Opal.modules["fileutils"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.5.1 */

Opal.modules["atome/version"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $const_set = Opal.const_set;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting);

    return $const_set($nesting[0], 'VERSION', "0.449")
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/universe"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $assign_ivar_val = Opal.assign_ivar_val, $defs = Opal.defs, $return_val = Opal.return_val;

  Opal.add_stubs('<<,attr_reader');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Universe');

    var $nesting = [self].concat($parent_nesting);

    
    $defs(self, '$app_identity', $assign_ivar_val("app_identity", 3), 0);
    $defs(self, '$initialize', function $$initialize() {
      var self = this;

      return (self.atomes = [])
    }, 0);
    $defs(self, '$atomes_add', function $$atomes_add(new_atome) {
      var self = this;
      if (self.atomes == null) self.atomes = nil;

      return self.atomes['$<<'](new_atome)
    }, 1);
    (function(self, $parent_nesting) {
      
      return self.$attr_reader("atomes")
    })(Opal.get_singleton_class(self), $nesting);
    return $defs(self, '$connected', $return_val(true), 0);
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/generators/genesis"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $def = Opal.def, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $defs = Opal.defs;

  Opal.add_stubs('validation,run_optional_methods_helper,to_sym,broadcaster,history,instance_variable_get,set_new_particle,to_proc,get_new_particle,new,instance_variable_set,each,send,create_new_atomes,[],current_user,app_identity,length,atomes,puts,add_essential_properties,sanitizer,set_new_atome,get_new_atome,additional,include,[]=,is_a?,instance_exec,define_method,renderer_list,define_singleton_method,atome_creator_option,additional_atomes,generate_renderers_methods,atome_list,new_atome,optional_atome_methods,additional_atome_methods,render_engine,optional_particle_methods,particle_list,new_particle,additional_particle_methods');
  
  (function($base) {
    var self = $module($base, 'GenesisHelper');

    
    
    
    $def(self, '$broadcaster', function $$broadcaster(property, value) {
      
      return "broadcast : " + (property) + " " + (value)
    }, 2);
    return $def(self, '$history', function $$history(property, value) {
      
      return "historize : " + (property) + " " + (value)
    }, 2);
  })($nesting[0]);
  (function($base, $parent_nesting) {
    var self = $module($base, 'GenesisKernel');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$set_new_particle', function $$set_new_particle(particle, value) {
      var proc = $$set_new_particle.$$p || nil, self = this;

      delete $$set_new_particle.$$p;
      
      ;
      if (!$truthy(self.$validation(particle))) {
        return false
      };
      value = $$('Genesis').$run_optional_methods_helper((("" + (particle)) + "_pre_render_proc").$to_sym(), $hash2(["method", "value", "atome", "proc"], {"method": particle, "value": value, "atome": self, "proc": proc}));
      $$('Genesis').$run_optional_methods_helper((("" + (particle)) + "_render_proc").$to_sym(), $hash2(["method", "value", "atome", "proc"], {"method": particle, "value": value, "atome": self, "proc": proc}));
      value = $$('Genesis').$run_optional_methods_helper((("" + (particle)) + "_post_render_proc").$to_sym(), $hash2(["method", "value", "proc"], {"method": particle, "value": value, "proc": proc}));
      self.$broadcaster(particle, value);
      self.$history(particle, value);
      return self;
    }, 2);
    
    $def(self, '$get_new_particle', function $$get_new_particle(particle) {
      var self = this, particle_instance_variable = nil, value_getted = nil;

      
      if (!$truthy(self.$validation(particle))) {
        return false
      };
      particle_instance_variable = "@" + (particle);
      value_getted = self.$instance_variable_get(particle_instance_variable);
      return $$('Genesis').$run_optional_methods_helper((("" + (particle)) + "_getter_pre_proc").$to_sym(), $hash2(["value", "atome"], {"value": value_getted, "atome": self}));
    }, 1);
    
    $def(self, '$new_particle', function $$new_particle(particle, params, proc) {
      var self = this;

      if ($truthy(params)) {
        return $send(self, 'set_new_particle', [particle, params], proc.$to_proc())
      } else {
        return self.$get_new_particle(particle)
      }
    }, 3);
    
    $def(self, '$create_new_atomes', function $$create_new_atomes(params, instance_var, _atome) {
      var self = this, new_atome = nil;

      
      new_atome = $$('Atome').$new($hash2([], {}));
      self.$instance_variable_set(instance_var, new_atome);
      return $send(params, 'each', [], function $$1(param, value){
        
        
        if (param == null) param = nil;;
        
        if (value == null) value = nil;;
        return new_atome.$send(param, value);}, 2);
    }, 3);
    
    $def(self, '$set_new_atome', function $$set_new_atome(atome, params, proc) {
      var self = this, instance_var = nil;

      
      if (!$truthy(self.$validation(atome))) {
        return false
      };
      instance_var = "@" + (atome);
      params = $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_pre_save_proc").$to_sym(), $hash2(["value", "proc"], {"value": params, "proc": proc}));
      self.$create_new_atomes(params['$[]']("value"), instance_var, atome);
      $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_post_save_proc").$to_sym(), $hash2(["value", "proc"], {"value": params, "proc": proc}));
      self.dna = "" + ($$('Atome').$current_user()) + "_" + ($$('Universe').$app_identity()) + "_" + ($$('Universe').$atomes().$length());
      return self;
    }, 3);
    
    $def(self, '$get_new_atome', function $$get_new_atome(atome) {
      var self = this, atome_instance_variable = nil, value_getted = nil, poil = nil;

      
      if (!$truthy(self.$validation(atome))) {
        return false
      };
      atome_instance_variable = "@" + (atome);
      value_getted = self.$instance_variable_get(atome_instance_variable);
      poil = $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_getter_pre_proc").$to_sym(), $hash2(["value"], {"value": value_getted}));
      self.$puts("---------");
      self.$puts(poil);
      self.$puts(value_getted);
      return value_getted;
    }, 1);
    
    $def(self, '$new_atome', function $$new_atome(atome, params, proc) {
      var self = this;

      if ($truthy(params)) {
        
        params = self.$add_essential_properties(atome, params);
        params = self.$sanitizer(params);
        return self.$set_new_atome(atome, params, proc);
      } else {
        return self.$get_new_atome(atome)
      }
    }, 3);
    return $def(self, '$additional_atomes', function $$additional_atomes(atome, params) {
      var self = this, atome_instance_variable = nil;

      
      atome_instance_variable = "@" + (atome);
      if ($truthy(params)) {
        return self.$instance_variable_get(atome_instance_variable).$additional(params)
      } else {
        return self.$instance_variable_get(atome_instance_variable).$additional()
      };
    }, 2);
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Genesis');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$include($$('GenesisHelper'));
    self.$include($$('GenesisKernel'));
    self.optionals_methods = $hash2([], {});
    $defs(self, '$atome_creator_option', function $$atome_creator_option(property_name) {
      var proc = $$atome_creator_option.$$p || nil, $a, self = this;
      if (self.optionals_methods == null) self.optionals_methods = nil;

      delete $$atome_creator_option.$$p;
      
      ;
      return ($a = [property_name, proc], $send(self.optionals_methods, '[]=', $a), $a[$a.length - 1]);
    }, 1);
    $defs(self, '$run_optional_methods_helper', function $$run_optional_methods_helper(method_name, params, atome) {
      var self = this, proc = nil;
      if (self.optionals_methods == null) self.optionals_methods = nil;

      
      
      if (atome == null) atome = nil;;
      proc = nil;
      if ($truthy(self.optionals_methods)) {
        proc = self.optionals_methods['$[]'](method_name)
      };
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [params, atome], proc.$to_proc())
      } else {
        return nil
      };
    }, -3);
    $defs(self, '$generate_html_renderer', function $$generate_html_renderer(method_name) {
      var methods_proc = $$generate_html_renderer.$$p || nil, self = this, current_renderer = nil, generated_method_name = nil;

      delete $$generate_html_renderer.$$p;
      
      ;
      current_renderer = "html";
      generated_method_name = ((("" + (method_name)) + "_") + (current_renderer)).$to_sym();
      return $send($$('Atome'), 'define_method', [generated_method_name], function $$2(value, atome){var user_proc = $$2.$$p || nil, self = $$2.$$s == null ? this : $$2.$$s;

        delete $$2.$$p;
        
        ;
        
        if (value == null) value = nil;;
        
        if (atome == null) atome = nil;;
        if ($truthy(methods_proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [value, atome, user_proc], methods_proc.$to_proc())
        } else {
          return nil
        };}, {$$arity: 2, $$s: self});
    }, 1);
    $defs(self, '$generate_server_renderer', function $$generate_server_renderer(method_name) {
      var methods_proc = $$generate_server_renderer.$$p || nil, self = this, current_renderer = nil, generated_method_name = nil;

      delete $$generate_server_renderer.$$p;
      
      ;
      current_renderer = "headless";
      generated_method_name = ((("" + (method_name)) + "_") + (current_renderer)).$to_sym();
      return $send($$('Atome'), 'define_method', [generated_method_name], function $$3(value, atome){var user_proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s;

        delete $$3.$$p;
        
        ;
        
        if (value == null) value = nil;;
        
        if (atome == null) atome = nil;;
        if ($truthy(methods_proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [value, atome, user_proc], methods_proc.$to_proc())
        } else {
          return nil
        };}, {$$arity: 2, $$s: self});
    }, 1);
    $defs(self, '$generate_renderers_methods', function $$generate_renderers_methods(method_name) {
      var $yield = $$generate_renderers_methods.$$p || nil, self = this;

      delete $$generate_renderers_methods.$$p;
      
      $send($$('Utilities').$renderer_list(), 'each', [], function $$4(render_method){var self = $$4.$$s == null ? this : $$4.$$s;

        
        
        if (render_method == null) render_method = nil;;
        $send(self, 'define_singleton_method', ["generate_" + (render_method) + "_renderer"], function $$5(method_name){var methods_proc = $$5.$$p || nil, self = $$5.$$s == null ? this : $$5.$$s, current_renderer = nil, generated_method_name = nil;

          delete $$5.$$p;
          
          ;
          
          if (method_name == null) method_name = nil;;
          current_renderer = render_method;
          generated_method_name = ((("" + (method_name)) + "_") + (current_renderer)).$to_sym();
          return $send($$('Atome'), 'define_method', [generated_method_name], function $$6(value, atome){var user_proc = $$6.$$p || nil, self = $$6.$$s == null ? this : $$6.$$s;

            delete $$6.$$p;
            
            ;
            
            if (value == null) value = nil;;
            
            if (atome == null) atome = nil;;
            if ($truthy(methods_proc['$is_a?']($$('Proc')))) {
              return $send(self, 'instance_exec', [value, atome, user_proc], methods_proc.$to_proc())
            } else {
              return nil
            };}, {$$arity: 2, $$s: self});}, {$$arity: 1, $$s: self});
        return self.$send("generate_" + (render_method) + "_renderer", method_name);}, {$$arity: 1, $$s: self});
      return $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_post_render_proc").$to_sym()], function $$7(params){
        
        
        if (params == null) params = nil;;
        return params['$[]']("value");}, 1);
    }, 1);
    $defs(self, '$optional_atome_methods', function $$optional_atome_methods(method_name) {
      
      
      $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_pre_save_proc").$to_sym()], function $$8(params, proc){
        
        
        if (params == null) params = nil;;
        
        if (proc == null) proc = nil;;
        return params;}, 2);
      $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_sanitizer_proc").$to_sym()], function $$9(params, atome, proc){
        
        
        if (params == null) params = nil;;
        
        if (atome == null) atome = nil;;
        
        if (proc == null) proc = nil;;
        return params;}, 3);
      return $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_getter_pre_proc").$to_sym()], function $$10(params, atome, proc){
        
        
        if (params == null) params = nil;;
        
        if (atome == null) atome = nil;;
        
        if (proc == null) proc = nil;;
        return params['$[]']("value");}, 3);
    }, 1);
    $defs(self, '$additional_atome_methods', function $$additional_atome_methods(method_name) {
      var $yield = $$additional_atome_methods.$$p || nil, self = this;

      delete $$additional_atome_methods.$$p;
      
      $send($$('Atome'), 'define_method', ["" + (method_name) + "s"], function $$11(params){var self = $$11.$$s == null ? this : $$11.$$s;

        
        
        if (params == null) params = nil;;
        return self.$additional_atomes(method_name, params);}, {$$arity: -1, $$s: self});
      $send($$('Atome'), 'define_method', ["set_" + (method_name)], function $$12(params){var proc = $$12.$$p || nil, self = $$12.$$s == null ? this : $$12.$$s;

        delete $$12.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$set_new_atome(method_name, params, proc);}, {$$arity: -1, $$s: self});
      $send($$('Atome'), 'define_method', ["get_" + (method_name)], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

        return self.$get_new_atome(method_name)}, {$$arity: 0, $$s: self});
      return self.$generate_renderers_methods(method_name);
    }, 1);
    $defs(self, '$atome_creator', function $$atome_creator(method_name) {
      var proc = $$atome_creator.$$p || nil, self = this;

      delete $$atome_creator.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [method_name], proc.$to_proc())
      };
      $$('Utilities').$atome_list(method_name);
      $send($$('Atome'), 'define_method', [method_name], function $$14(params){var user_proc = $$14.$$p || nil, self = $$14.$$s == null ? this : $$14.$$s;

        delete $$14.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$new_atome(method_name, params, user_proc);}, {$$arity: -1, $$s: self});
      $send($$('Atome'), 'define_method', ["" + (method_name) + "="], function $$15(params){var user_proc = $$15.$$p || nil, self = $$15.$$s == null ? this : $$15.$$s;

        delete $$15.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$new_atome(method_name, params, user_proc);}, {$$arity: 1, $$s: self});
      self.$optional_atome_methods(method_name);
      return self.$additional_atome_methods(method_name);
    }, 1);
    $defs(self, '$optional_particle_methods', function $$optional_particle_methods(method_name) {
      
      
      $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_render_proc").$to_sym()], function $$16(params){
        
        
        if (params == null) params = nil;;
        $send(params['$[]']("atome"), 'render_engine', [params['$[]']("method"), params['$[]']("value"), params['$[]']("atome")], params['$[]']("proc").$to_proc());
        return params['$[]']("value");}, 1);
      $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_pre_render_proc").$to_sym()], function $$17(params){var particle_instance_variable = nil;

        
        
        if (params == null) params = nil;;
        particle_instance_variable = "@" + (params['$[]']("method"));
        params['$[]']("atome").$instance_variable_set(particle_instance_variable, params['$[]']("value"));
        return params['$[]']("value");}, 1);
      $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_post_render_proc").$to_sym()], function $$18(params){
        
        
        if (params == null) params = nil;;
        return params['$[]']("value");}, 1);
      return $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_getter_pre_proc").$to_sym()], function $$19(params){
        
        
        if (params == null) params = nil;;
        return params['$[]']("value");}, 1);
    }, 1);
    $defs(self, '$additional_particle_methods', function $$additional_particle_methods(method_name) {
      var $yield = $$additional_particle_methods.$$p || nil, self = this;

      delete $$additional_particle_methods.$$p;
      
      $send($$('Atome'), 'define_method', ["set_" + (method_name)], function $$20(params){var proc = $$20.$$p || nil, self = $$20.$$s == null ? this : $$20.$$s;

        delete $$20.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return $send(self, 'set_new_particle', [method_name, params], proc.$to_proc());}, {$$arity: 1, $$s: self});
      $send($$('Atome'), 'define_method', ["get_" + (method_name)], function $$21(){var self = $$21.$$s == null ? this : $$21.$$s;

        return self.$get_new_particle(method_name)}, {$$arity: 0, $$s: self});
      self.$generate_renderers_methods(method_name);
      return self.$optional_particle_methods(method_name);
    }, 1);
    return $defs(self, '$particle_creator', function $$particle_creator(method_name) {
      var proc = $$particle_creator.$$p || nil, self = this;

      delete $$particle_creator.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [method_name], proc.$to_proc())
      };
      $$('Utilities').$particle_list(method_name);
      $send($$('Atome'), 'define_method', [method_name], function $$22(params){var user_proc = $$22.$$p || nil, self = $$22.$$s == null ? this : $$22.$$s;

        delete $$22.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$new_particle(method_name, params, user_proc);}, {$$arity: -1, $$s: self});
      $send($$('Atome'), 'define_method', ["" + (method_name) + "="], function $$23(params){var user_proc = $$23.$$p || nil, self = $$23.$$s == null ? this : $$23.$$s;

        delete $$23.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$new_particle(method_name, params, user_proc);}, {$$arity: 1, $$s: self});
      return self.$additional_particle_methods(method_name);
    }, 1);
  })($nesting[0], $nesting);
};

Opal.modules["atome/extensions/utilities"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $defs = Opal.defs, $truthy = Opal.truthy, $send = Opal.send, $eqeq = Opal.eqeq;

  Opal.add_stubs('push,instance_variable_get,each,atomes,==,id');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Utilities');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.atome_list = [];
    self.particle_list = [];
    self.renderer_list = ["html", "headless", "server"];
    $defs(self, '$renderer_list', function $$renderer_list(atome) {
      var self = this;
      if (self.renderer_list == null) self.renderer_list = nil;

      
      
      if (atome == null) atome = nil;;
      return self.renderer_list;
    }, -1);
    $defs(self, '$atome_list', function $$atome_list(atome) {
      var self = this;

      
      
      if (atome == null) atome = nil;;
      if ($truthy(atome)) {
        return self.$instance_variable_get("@atome_list").$push(atome)
      } else {
        return self.$instance_variable_get("@atome_list")
      };
    }, -1);
    $defs(self, '$particle_list', function $$particle_list(particle) {
      var self = this;

      
      
      if (particle == null) particle = nil;;
      if ($truthy(particle)) {
        return self.$instance_variable_get("@particle_list").$push(particle)
      } else {
        return self.$instance_variable_get("@particle_list")
      };
    }, -1);
    return $defs(self, '$grab', function $$grab(params) {
      var atome_found = nil;

      
      atome_found = nil;
      $send($$('Universe').$atomes(), 'each', [], function $$1(atome){
        
        
        if (atome == null) atome = nil;;
        if ($eqeq(atome.$id(), params)) {
          return (atome_found = atome)
        } else {
          return nil
        };}, 1);
      return atome_found;
    }, 1);
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/renderer"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $send = Opal.send, $def = Opal.def;

  Opal.add_stubs('render,each,send,to_proc');
  return (function($base) {
    var self = $module($base, 'Render');

    
    return $def(self, '$render_engine', function $$render_engine(property, value, atome) {
      var proc = $$render_engine.$$p || nil, self = this, renderer_found = nil;

      delete $$render_engine.$$p;
      
      ;
      renderer_found = atome.$render();
      return $send(renderer_found, 'each', [], function $$1(renderer){var self = $$1.$$s == null ? this : $$1.$$s, renderer_name = nil;

        
        
        if (renderer == null) renderer = nil;;
        renderer_name = "" + (property) + "_" + (renderer);
        return $send(self, 'send', [renderer_name, value, atome], proc.$to_proc());}, {$$arity: 1, $$s: self});
    }, 3)
  })($nesting[0])
};

Opal.modules["atome/kernel/generators/sanitizer"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $hash2 = Opal.hash2, $return_ivar = Opal.return_ivar, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('current_user,[]=,[],merge,id,length,atomes,run_optional_methods_helper,to_sym,add_missing_id,add_essential_drm,default_params,check_parent');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Sanitizer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.default_params = $hash2(["render", "color", "box", "shape", "drm", "shadow"], {"render": ["html"], "color": $hash2(["x", "y", "z", "red", "green", "blue", "alpha", "diffusion"], {"x": 0, "y": 0, "z": 0, "red": 0.6, "green": 0.6, "blue": 0.6, "alpha": 1, "diffusion": "linear"}), "box": $hash2(["width", "height", "x", "y", "color", "generator", "preset"], {"width": 100, "height": 100, "x": 100, "y": 100, "color": $hash2(["x", "y", "z", "red", "green", "blue", "alpha", "diffusion"], {"x": 0, "y": 0, "z": 0, "red": 0.9, "green": 0.9, "blue": 0.9, "alpha": 1, "diffusion": "linear"}), "generator": "box", "preset": "box"}), "shape": $hash2(["width", "height", "x", "y", "color", "generator"], {"width": 100, "height": 100, "x": 100, "y": 100, "color": $hash2(["x", "y", "z", "red", "green", "blue", "alpha", "diffusion"], {"x": 0, "y": 0, "z": 0, "red": 0.1, "green": 0.9, "blue": 0.9, "alpha": 1, "diffusion": "linear"}), "generator": "manual"}), "drm": $hash2(["type"], {"type": "drm"}), "shadow": $hash2([], {})});
    $defs(self, '$default_params', $return_ivar("default_params"), 0);
    
    $def(self, '$validation', function $$validation(atome_instance_var) {
      
      if ($truthy(atome_instance_var)) {
        return true
      } else {
        return nil
      }
    }, 1);
    
    $def(self, '$sanitizer', function $$sanitizer(params) {
      
      return params
    }, 1);
    
    $def(self, '$add_essential_drm', function $$add_essential_drm(params) {
      var $a, essential_drm = nil;

      
      essential_drm = $hash2(["authorisation", "atome"], {"authorisation": $hash2(["read", "write"], {"read": [$$('Atome').$current_user()], "write": [$$('Atome').$current_user()]}), "atome": $hash2(["read", "write"], {"read": ["all"], "write": ["me"]})});
      return ($a = ["drm", ($truthy(params['$[]']("drm")) ? (essential_drm.$merge(params['$[]']("drm"))) : (essential_drm))], $send(params, '[]=', $a), $a[$a.length - 1]);
    }, 1);
    
    $def(self, '$check_parent', function $$check_parent(params) {
      var self = this, parent = nil, $ret_or_1 = nil;

      
      parent = ($truthy(($ret_or_1 = self.$id())) ? ($ret_or_1) : ("user_view"));
      if (!$truthy(params['$[]']("parent"))) {
        params['$[]=']("parent", parent)
      };
      return params;
    }, 1);
    
    $def(self, '$add_missing_id', function $$add_missing_id(atome_type, params) {
      var type = nil, $ret_or_1 = nil;

      
      type = ($truthy(($ret_or_1 = params['$[]']("type"))) ? ($ret_or_1) : (atome_type));
      return "" + (type) + "_" + ($$('Universe').$atomes().$length());
    }, 2);
    return $def(self, '$add_essential_properties', function $$add_essential_properties(atome_type, params) {
      var self = this, render = nil;

      
      params = $$('Genesis').$run_optional_methods_helper((("" + (atome_type)) + "_sanitizer_proc").$to_sym(), params, self);
      if (!$truthy(params['$[]']("id"))) {
        params['$[]=']("id", self.$add_missing_id(atome_type, params))
      };
      if (!$truthy(params['$[]']("drm"))) {
        params['$[]=']("drm", self.$add_essential_drm(params))
      };
      render = $$('Sanitizer').$default_params()['$[]']("render");
      if (!$truthy(params['$[]']("render"))) {
        params['$[]=']("render", render)
      };
      return self.$check_parent(params);
    }, 2);
  })($nesting[0], $nesting)
};

Opal.modules["atome/kernel/generators/generator"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide, $return_val = Opal.return_val, $gvars = Opal.gvars, $rb_times = Opal.rb_times, $eqeqeq = Opal.eqeqeq, $def = Opal.def;

  Opal.add_stubs('atome_creator,atome_creator_option,instance_of?,==,downcase,each_with_index,split,gsub,[]=,[],keys,/,to_i,css_rgb,merge,id,particle_creator,generate_html_renderer,send,is_a?,instance_exec,to_proc,append_to,DOM,atome,div,<<,head,green,blue,alpha,inner_html=,*,red,add_class,style,method_name,===,each,to_s,join,on,instance_variable_set,generate_headless_renderer,puts,class,remove_class');
  
  $$('Genesis').$atome_creator("shape");
  $$('Genesis').$atome_creator("shadow");
  $$('Genesis').$atome_creator("content");
  $$('Genesis').$atome_creator("color");
  $send($$('Genesis'), 'atome_creator_option', ["color_sanitizer_proc"], function $$1(params, atome){var rgb_color = nil, color_converted = nil;

    
    
    if (params == null) params = nil;;
    
    if (atome == null) atome = nil;;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($eqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
        
        rgb_color = d = document.createElement("div");
	d.style.color = params;
	document.body.appendChild(d)
   rgb_color=(window.getComputedStyle(d).color);
d.remove();
;
        color_converted = $hash2(["red", "green", "blue", "alpha"], {"red": 0, "green": 0, "blue": 0, "alpha": 1});
        $send(rgb_color.$gsub("rgb(", "").$gsub(")", "").$split(","), 'each_with_index', [], function $$2(component, index){var $a;

          
          
          if (component == null) component = nil;;
          
          if (index == null) index = nil;;
          return ($a = [color_converted.$keys()['$[]'](index), $rb_divide(component.$to_i(), 255)], $send(color_converted, '[]=', $a), $a[$a.length - 1]);}, 2);
      } else {
        
        rgb_color = $$$($$('Color'), 'CSS')['$[]']("red").$css_rgb();
        color_converted = $hash2(["red", "green", "blue", "alpha"], {"red": 0, "green": 0, "blue": 0, "alpha": 1});
        $send(rgb_color.$gsub("rgb(", "").$gsub(")", "").$gsub("%", "").$split(","), 'each_with_index', [], function $$3(component, index){var $a;

          
          
          if (component == null) component = nil;;
          
          if (index == null) index = nil;;
          component = $rb_divide(component.$to_i(), 100);
          return ($a = [color_converted.$keys()['$[]'](index), component], $send(color_converted, '[]=', $a), $a[$a.length - 1]);}, 2);
      };
      params = $hash2(["render", "id", "type"], {"render": ["html"], "id": "color_" + (atome.$id()), "type": "color"}).$merge(color_converted);
    };
    return params;}, 2);
  $$('Genesis').$atome_creator("shadow");
  $send($$('Genesis'), 'particle_creator', ["id"], $return_val(nil), 0);
  $$('Genesis').$particle_creator("left");
  $$('Genesis').$particle_creator("right");
  $$('Genesis').$particle_creator("top");
  $$('Genesis').$particle_creator("bottom");
  $$('Genesis').$particle_creator("width");
  $$('Genesis').$particle_creator("height");
  $$('Genesis').$particle_creator("red");
  $$('Genesis').$particle_creator("green");
  $$('Genesis').$particle_creator("blue");
  $$('Genesis').$particle_creator("alpha");
  $$('Genesis').$particle_creator("type");
  $$('Genesis').$particle_creator("smooth");
  $$('Genesis').$particle_creator("blur");
  $$('Genesis').$particle_creator("touch");
  $$('Genesis').$particle_creator("render");
  $$('Genesis').$particle_creator("drm");
  $$('Genesis').$particle_creator("parent");
  $$('Genesis').$particle_creator("date");
  $$('Genesis').$particle_creator("location");
  $send($$('Genesis'), 'generate_html_renderer', ["type"], function $$4(value, atome, proc){var self = $$4.$$s == null ? this : $$4.$$s;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return self.$send("" + (value) + "_html", value, atome, proc);}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["shape"], function $$5(value, atome, proc){var self = $$5.$$s == null ? this : $$5.$$s, id_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    id_found = self.$id();
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    $send(self, 'DOM', [], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

      return self.$div($hash2(["id"], {"id": id_found})).$atome()}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
    self.html_object = $gvars.document['$[]'](id_found);
    return (self.html_type = "div");}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["color"], function $$7(value, atome, proc){var self = $$7.$$s == null ? this : $$7.$$s;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    self.html_type = "style";
    return $gvars.document.$head()['$<<'](self.$DOM("<style id='" + (self.$id()) + "'></style>"));}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["red"], function $$8(value, atome, proc){var $a, self = $$8.$$s == null ? this : $$8.$$s, green_found = nil, $ret_or_1 = nil, blue_found = nil, alpha_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    green_found = self.$green();
    green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
    blue_found = self.$blue();
    blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
    alpha_found = self.$alpha();
    alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
    return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(value, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["green"], function $$9(value, atome, proc){var $a, self = $$9.$$s == null ? this : $$9.$$s, red_found = nil, $ret_or_1 = nil, blue_found = nil, alpha_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    red_found = self.$red();
    red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
    blue_found = self.$blue();
    blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
    alpha_found = self.$alpha();
    alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
    return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(value, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["blue"], function $$10(value, atome, proc){var $a, self = $$10.$$s == null ? this : $$10.$$s, red_found = nil, $ret_or_1 = nil, green_found = nil, alpha_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    red_found = self.$red();
    red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
    green_found = self.$green();
    green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
    alpha_found = self.$alpha();
    alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
    return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(value, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["alpha"], function $$11(value, atome, proc){var $a, self = $$11.$$s == null ? this : $$11.$$s, red_found = nil, $ret_or_1 = nil, green_found = nil, blue_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    red_found = self.$red();
    red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
    green_found = self.$green();
    green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
    blue_found = self.$blue();
    blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
    return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (value) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["drm"], function $$12(value, atome, proc){
    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return nil;}, 3);
  $send($$('Genesis'), 'generate_html_renderer', ["parent"], function $$13(value, atome, proc){var self = $$13.$$s == null ? this : $$13.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    if ($eqeq(self.html_type, "style")) {
      return $gvars.document['$[]'](value).$add_class(self.$id())
    } else {
      return self.html_object.$append_to($gvars.document['$[]'](value))
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["id"], function $$14(value, atome, proc){
    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return nil;}, 3);
  $send($$('Genesis'), 'generate_html_renderer', ["left"], function $$15(value, atome, proc){var $a, self = $$15.$$s == null ? this : $$15.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["left", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["right"], function $$16(value, atome, proc){var $a, self = $$16.$$s == null ? this : $$16.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["right", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["top"], function $$17(value, atome, proc){var $a, self = $$17.$$s == null ? this : $$17.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["top", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["bottom"], function $$18(value, atome, proc){var $a, self = $$18.$$s == null ? this : $$18.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["bottom", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["width"], function $$19(value, atome, proc){var $a, self = $$19.$$s == null ? this : $$19.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["width", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["height"], function $$20(value, atome, proc){var $a, self = $$20.$$s == null ? this : $$20.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["height", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'particle_creator', ["rotate"], function $$21(params, atome){var proc = $$21.$$p || nil, self = $$21.$$s == null ? this : $$21.$$s;

    delete $$21.$$p;
    
    ;
    
    if (params == null) params = nil;;
    
    if (atome == null) atome = nil;;
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [self.$method_name(), params, atome], proc.$to_proc())
    } else {
      return nil
    };}, {$$arity: 2, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["rotate"], function $$23(value, atome, proc){var $a, self = $$23.$$s == null ? this : $$23.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["transform", "rotate(" + (value) + "deg)"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["smooth"], function $$24(value, atome, proc){var $a, self = $$24.$$s == null ? this : $$24.$$s, formated_params = nil, $ret_or_1 = nil, properties = nil;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    formated_params = ($eqeqeq($$('Array'), ($ret_or_1 = value)) ? (((properties = []), $send(value, 'each', [], function $$25(param){
      
      
      if (param == null) param = nil;;
      return properties['$<<']("" + (param) + "px");}, 1), properties.$join(" ").$to_s())) : ($eqeqeq($$('Integer'), $ret_or_1) ? ("" + (value) + "px") : (value)));
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["border-radius", formated_params], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["touch"], function $$26(value, atome, proc){var self = $$26.$$s == null ? this : $$26.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return $send(self.html_object, 'on', ["click"], function $$27(e){var self = $$27.$$s == null ? this : $$27.$$s;

      
      
      if (e == null) e = nil;;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };}, {$$arity: 1, $$s: self});}, {$$arity: 3, $$s: self});
  
  $def(self, '$dragCallback', function $$dragCallback(page_x, page_y, x, y, current_object, proc) {
    var self = this;

    
    current_object.$instance_variable_set("@left", x);
    current_object.$instance_variable_set("@top", y);
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [page_x, page_y], proc.$to_proc())
    } else {
      return nil
    };
  }, 6);
  $$('Genesis').$particle_creator("drag");
  $send($$('Genesis'), 'generate_headless_renderer', ["drag"], function $$28(value, atome, user_proc){var self = $$28.$$s == null ? this : $$28.$$s;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (user_proc == null) user_proc = nil;;
    self.$puts("msg from headless drag method: value is " + (value) + " , atome class is " + (atome.$class()));
    if ($truthy(user_proc['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [], user_proc.$to_proc())
    } else {
      return nil
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["drag"], function $$29(value, atome, user_proc){var self = $$29.$$s == null ? this : $$29.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (user_proc == null) user_proc = nil;;
    if ($truthy(user_proc)) {
      self.html_drag = user_proc
    };
    if ($eqeq(value, "remove")) {
      return self.html_object.$remove_class("draggable")
    } else {
      return self.html_object.$add_class("draggable")
    };}, {$$arity: 3, $$s: self});
  $$('Genesis').$particle_creator("overflow");
  $send($$('Genesis'), 'generate_html_renderer', ["overflow"], function $$30(value, atome, proc){var $a, self = $$30.$$s == null ? this : $$30.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["overflow", value], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$arity: 3, $$s: self});
  return $$('Genesis').$particle_creator("bloc");
};

Opal.modules["atome/renderers/opal/properties/generator"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.5.1 */

Opal.modules["atome/renderers/server/properties/generator"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def;

  Opal.add_stubs('is_a?,instance_exec,to_proc,puts');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ServerRenderer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$render_sever', function $$render_sever(params) {
      var proc = $$render_sever.$$p || nil, self = this;

      delete $$render_sever.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [params], proc.$to_proc())
      };
      return self.$puts("----puts render sever render " + (params));
    }, 1)
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/headless/properties/generator"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.5.1 */

Opal.modules["atome/kernel/generators/shapes"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('[],default_params,length,atomes,instance_of?,id,merge,new,shape,box,grab,circle');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$box', function $$box(params) {
      var self = this, default_renderer = nil, generated_id = nil, $ret_or_1 = nil, generated_render = nil, generated_parent = nil, temp_default = nil, new_atome = nil;

      
      
      if (params == null) params = $hash2([], {});;
      default_renderer = $$('Sanitizer').$default_params()['$[]']("render");
      generated_id = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : ("box_" + ($$('Universe').$atomes().$length())));
      if (!$truthy(params['$[]']("render")['$instance_of?']($$('Hash')))) {
        generated_render = ($truthy(($ret_or_1 = params['$[]']("render"))) ? ($ret_or_1) : (default_renderer))
      };
      generated_parent = ($truthy(($ret_or_1 = params['$[]']("parent"))) ? ($ret_or_1) : (self.$id()));
      temp_default = $hash2(["render", "id", "type", "parent", "width", "height", "left", "top", "color"], {"render": [generated_render], "id": generated_id, "type": "shape", "parent": generated_parent, "width": 99, "height": 99, "left": 9, "top": 9, "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": [generated_render], "id": "color_" + (generated_id), "type": "color", "red": 0.69, "green": 0.69, "blue": 0.69, "alpha": 1})});
      params = temp_default.$merge(params);
      new_atome = $$('Atome').$new($hash2(["shape"], {"shape": params}));
      return new_atome.$shape();
    }, -1);
    return $def(self, '$circle', function $$circle(params) {
      var self = this, default_renderer = nil, generated_id = nil, $ret_or_1 = nil, generated_render = nil, generated_parent = nil, temp_default = nil, new_atome = nil;

      
      
      if (params == null) params = $hash2([], {});;
      default_renderer = $$('Sanitizer').$default_params()['$[]']("render");
      generated_id = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : ("circle_" + ($$('Universe').$atomes().$length())));
      if (!$truthy(params['$[]']("render")['$instance_of?']($$('Hash')))) {
        generated_render = ($truthy(($ret_or_1 = params['$[]']("render"))) ? ($ret_or_1) : (default_renderer))
      };
      generated_parent = ($truthy(($ret_or_1 = params['$[]']("parent"))) ? ($ret_or_1) : (self.$id()));
      temp_default = $hash2(["render", "id", "type", "parent", "width", "height", "left", "top", "color", "smooth"], {"render": [generated_render], "id": generated_id, "type": "shape", "parent": generated_parent, "width": 99, "height": 99, "left": 9, "top": 9, "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": [generated_render], "id": "color_" + (generated_id), "type": "color", "red": 0.69, "green": 0.69, "blue": 0.69, "alpha": 1}), "smooth": "100%"});
      params = temp_default.$merge(params);
      new_atome = $$('Atome').$new($hash2(["shape"], {"shape": params}));
      return new_atome.$shape();
    }, -1);
  })($nesting[0], null, $nesting);
  
  $def(self, '$box', function $$box(params) {
    
    
    
    if (params == null) params = $hash2([], {});;
    return $$('Utilities').$grab("view").$box(params);
  }, -1);
  return $def(self, '$circle', function $$circle(params) {
    
    
    
    if (params == null) params = $hash2([], {});;
    return $$('Utilities').$grab("view").$circle(params);
  }, -1);
};

Opal.modules["atome/kernel/atome"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $defs = Opal.defs, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $return_ivar = Opal.return_ivar, $assign_ivar = Opal.assign_ivar, $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('include,new,===,=~,last_match,downcase,current_machine_decision,now,geolocation,each_with_index,instance_variable_set,each,send,additional_helper,[]=,atomes_add,connected,puts');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.additional = nil;
    
    self.$include($$('Genesis'));
    self.$include($$('Sanitizer'));
    self.$include($$('ServerRenderer'));
    self.$include($$('Render'));
    $defs(self, '$atome', function $$atome(params) {
      
      return $$('Atome').$new(params)
    }, 1);
    $defs(self, '$current_machine_decision', function $$current_machine_decision(platform, output) {
      var $ret_or_1 = nil;

      
      if ($eqeqeq(/darwin/, ($ret_or_1 = platform))) {
        if ($truthy(output['$=~'](/en1.*?(([A-F0-9]{2}:){5}[A-F0-9]{2})/im))) {
          $$$('Regexp').$last_match(1)
        }
      } else if ($eqeqeq(/win32/, $ret_or_1)) {
        if ($truthy(output['$=~'](/Physical Address.*?(([A-F0-9]{2}-){5}[A-F0-9]{2})/im))) {
          $$$('Regexp').$last_match(1)
        }
      } else {
        "unknown platform"
      };
      return platform;
    }, 2);
    $defs(self, '$current_machine', function $$current_machine() {
      var self = this, platform = nil, output = nil;

      
      platform = $$('RUBY_PLATFORM').$downcase();
      output = ($truthy(platform['$=~'](/win32/)) ? ("ipconfig /all") : ("ifconfig"));
      return self.$current_machine_decision(platform, output);
    }, 0);
    $defs(self, '$current_user', $return_ivar("user"), 0);
    $defs(self, '$current_user=', $assign_ivar("user"), 0);
    
    $def(self, '$identity_generator', function $$identity_generator() {
      var self = this;

      return $hash2(["date", "location"], {"date": $$('Time').$now(), "location": self.$geolocation()})
    }, 0);
    
    $def(self, '$additional_helper', function $$additional_helper(params) {
      var self = this, virtual_atome = nil;

      
      virtual_atome = $$('Atome').$new($hash2([], {}));
      self.additional = virtual_atome;
      return $send(params, 'each_with_index', [], function $$1(additional, index){var new_atome = nil;

        
        
        if (additional == null) additional = nil;;
        
        if (index == null) index = nil;;
        new_atome = $$('Atome').$new($hash2([], {}));
        virtual_atome.$instance_variable_set("@virtual" + (index), new_atome);
        return $send(additional, 'each', [], function $$2(param, value){
          
          
          if (param == null) param = nil;;
          
          if (value == null) value = nil;;
          return new_atome.$send(param, value);}, 2);}, 2);
    }, 1);
    
    $def(self, '$additional', function $$additional(params) {
      var self = this;

      
      
      if (params == null) params = nil;;
      if ($truthy(params)) {
        return self.$additional_helper(params)
      } else {
        return self.additional
      };
    }, -1);
    return $def(self, '$initialize', function $$initialize(params) {
      var proc = $$initialize.$$p || nil, self = this;

      delete $$initialize.$$p;
      
      ;
      
      if (params == null) params = $hash2([], {});;
      $send(params, 'each', [], function $$3(atome, values){var self = $$3.$$s == null ? this : $$3.$$s;

        
        
        if (atome == null) atome = nil;;
        
        if (values == null) values = nil;;
        values['$[]=']("bloc", $hash2(["bloc"], {"bloc": proc}));
        return self.$send(atome, values);}, {$$arity: 2, $$s: self});
      return $$('Universe').$atomes_add(self);
    }, -1);
  })($nesting[0], null, $nesting);
  $$('Universe').$connected();
  return self.$puts("atome version : " + ($$$($$('Atome'), 'VERSION')));
};

Opal.modules["atome/kernel/properties/essential"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $assign_ivar = Opal.assign_ivar, $def = Opal.def, $defs = Opal.defs;

  Opal.add_stubs('puts,grab,instance_variable_get,[],instance_variables,to_s,inspect');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$identity', $assign_ivar("identity"), 0);
    
    $def(self, '$new', function $Atome_new$1(params) {
      var self = this;

      return self.$puts("add/new : " + (params))
    }, 1);
    
    $def(self, '$set', function $$set(params) {
      var self = this;

      return self.$puts("set : " + (params))
    }, 1);
    $defs(self, '$grab', function $$grab(val) {
      
      return $$('Utilities').$grab(val)
    }, 1);
    
    $def(self, '$add', function $$add(params) {
      var self = this;

      return self.$puts("add : " + (params))
    }, 1);
    
    $def(self, '$update', function $$update(params) {
      var self = this;

      return self.$puts("update : " + (params))
    }, 1);
    
    $def(self, '$replace', function $$replace(params) {
      var self = this;

      return self.$puts("replace : " + (params))
    }, 1);
    
    $def(self, '$delete', function $Atome_delete$2(params) {
      var self = this;

      return self.$puts("replace : " + (params))
    }, 1);
    
    $def(self, '$[]', function $Atome_$$$3(params) {
      var self = this;

      return self.$instance_variable_get(self.$instance_variables()['$[]'](params))
    }, 1);
    return $def(self, '$to_s', function $$to_s() {
      var self = this;

      return self.$inspect().$to_s()
    }, 0);
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/extensions/helper"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $def = Opal.def;

  Opal.add_stubs('grab');
  return $def(self, '$grab', function $$grab(val) {
    
    return $$('Atome').$grab(val)
  }, 1)
};

Opal.modules["atome/kernel/sparkle"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, default_render = nil;

  Opal.add_stubs('==,downcase,[]=,default_params,new,puts,current_machine');
  
  default_render = ($eqeq($$('RUBY_ENGINE').$downcase(), "opal") ? ("html") : ("headless"));
  $$('Sanitizer').$default_params()['$[]=']("render", default_render);
  $$('Atome').$new($hash2(["shape"], {"shape": $hash2(["render", "id", "type", "parent", "left", "right", "top", "bottom", "overflow", "color"], {"render": [default_render], "id": "view", "type": "shape", "parent": "user_view", "left": 0, "right": 0, "top": 0, "bottom": 0, "overflow": "auto", "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": [default_render], "id": "c1", "type": "color", "red": 0.15, "green": 0.15, "blue": 0.15, "alpha": 1})})}));
  return self.$puts("current machine id: " + ($$('Atome').$current_machine()));
};

Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $def = Opal.def, $neqeq = Opal.neqeq;

  Opal.add_stubs('require,!=,downcase,eval,eval_protection,send,current_user=');
  
  self.$require("fileutils");
  self.$require("atome/version");
  self.atome_client_ready = false;
  
  $def(self, '$eval_protection', function $$eval_protection() {
    var self = this;

    return Opal.Binding.$new(  function($code) {    return eval($code);  },  [],  self,  ['/Users/jean-ericgodard/Documents/GitHub/atome/app_builder_helpers/../lib/atome.rb', 8])
  }, 0);
  if ($neqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
    
    self.$eval("require 'atome/atome_native_extensions'", self.$eval_protection(), "/Users/jean-ericgodard/Documents/GitHub/atome/app_builder_helpers/../lib/atome.rb", 15);
    self.$eval("require 'color'", self.$eval_protection(), "/Users/jean-ericgodard/Documents/GitHub/atome/app_builder_helpers/../lib/atome.rb", 16);
  };
  self.$require("atome/kernel/universe");
  self.$require("atome/kernel/generators/genesis");
  self.$require("atome/extensions/utilities");
  self.$require("atome/renderers/renderer");
  self.$require("atome/kernel/generators/sanitizer");
  self.$require("atome/kernel/generators/generator");
  self.$require("atome/renderers/opal/properties/generator");
  self.$require("atome/renderers/server/properties/generator");
  self.$require("atome/renderers/headless/properties/generator");
  self.$require("atome/kernel/generators/shapes");
  self.$require("atome/kernel/atome");
  self.$require("atome/kernel/properties/essential");
  self.$require("atome/extensions/helper");
  $$('Universe').$send("initialize");
  $$('Atome')['$current_user=']("jeezs");
  return self.$require("atome/kernel/sparkle");
});
