/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$<<', '$[]', '$each']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'JSUtils');

    var $nesting = [self].concat($parent_nesting), $JSUtils_initialize$1, $JSUtils_device$2, $JSUtils_document$3, $JSUtils_add_interval$4, $JSUtils_clear_interval$5, $JSUtils_clear_intervals$6, $JSUtils_add_timeout$8, $JSUtils_clear_timeout$9, $JSUtils_clear_timeouts$10, $JSUtils_verification$12;

    
    
    Opal.def(self, '$initialize', $JSUtils_initialize$1 = function $$initialize() {
      var self = this;

      return (self.codemirror = [])
    }, $JSUtils_initialize$1.$$arity = 0);
    Opal.defs(self, '$device', $JSUtils_device$2 = function $$device() {
      var self = this;

      return window;
    }, $JSUtils_device$2.$$arity = 0);
    Opal.defs(self, '$document', $JSUtils_document$3 = function $$document() {
      var self = this;

      return $(document);
    }, $JSUtils_document$3.$$arity = 0);
    Opal.defs(self, '$add_interval', $JSUtils_add_interval$4 = function $$add_interval(interval) {
      var self = this;
      if (self.project_intervals == null) self.project_intervals = nil;

      return self.project_intervals['$<<'](interval)
    }, $JSUtils_add_interval$4.$$arity = 1);
    Opal.defs(self, '$clear_interval', $JSUtils_clear_interval$5 = function $$clear_interval(params) {
      var self = this;

      return clearInterval(params['$[]'](1))
    }, $JSUtils_clear_interval$5.$$arity = 1);
    Opal.defs(self, '$clear_intervals', $JSUtils_clear_intervals$6 = function $$clear_intervals() {
      var $$7, self = this;
      if (self.project_intervals == null) self.project_intervals = nil;

      
      $send(self.project_intervals, 'each', [], ($$7 = function(interval){var self = $$7.$$s || this;

      
        
        if (interval == null) {
          interval = nil;
        };
        return  clearInterval(interval);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      return (self.project_intervals = []);
    }, $JSUtils_clear_intervals$6.$$arity = 0);
    Opal.defs(self, '$add_timeout', $JSUtils_add_timeout$8 = function $$add_timeout(timeout) {
      var self = this;
      if (self.project_timeouts == null) self.project_timeouts = nil;

      return self.project_timeouts['$<<'](timeout)
    }, $JSUtils_add_timeout$8.$$arity = 1);
    Opal.defs(self, '$clear_timeout', $JSUtils_clear_timeout$9 = function $$clear_timeout(params) {
      var self = this;

      return clearTimeout(params['$[]'](1))
    }, $JSUtils_clear_timeout$9.$$arity = 1);
    Opal.defs(self, '$clear_timeouts', $JSUtils_clear_timeouts$10 = function $$clear_timeouts() {
      var $$11, self = this;
      if (self.project_timeouts == null) self.project_timeouts = nil;

      
      $send(self.project_timeouts, 'each', [], ($$11 = function(timeout){var self = $$11.$$s || this;

      
        
        if (timeout == null) {
          timeout = nil;
        };
        return clearTimeout(timeout);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
      return (self.project_timeouts = []);
    }, $JSUtils_clear_timeouts$10.$$arity = 0);
    Opal.defs(self, '$verification', $JSUtils_verification$12 = function $$verification($a) {
      var $post_args, params, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      params = $post_args;;
      return atome.jsVerification(params);
    }, $JSUtils_verification$12.$$arity = -1);
  })($nesting[0], $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AudioHtmlRenderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], null, $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CommunicationHtmlRenderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'AudioHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EffectHtmlRenderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'CommunicationHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EventHtmlRenderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'EffectHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GeometryHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $GeometryHtmlRenderer_render_width$1, $GeometryHtmlRenderer_render_height$2;

    
    Opal.defs(self, '$render_width', $GeometryHtmlRenderer_render_width$1 = function $$render_width(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $GeometryHtmlRenderer_render_width$1.$$arity = 2);
    return (Opal.defs(self, '$render_height', $GeometryHtmlRenderer_render_height$2 = function $$render_height(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $GeometryHtmlRenderer_render_height$2.$$arity = 2), nil) && 'render_height';
  })($nesting[0], $$($nesting, 'EventHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HelperHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $HelperHtmlRenderer_render_tactile$1;

    return (Opal.defs(self, '$render_tactile', $HelperHtmlRenderer_render_tactile$1 = function $$render_tactile(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $HelperHtmlRenderer_render_tactile$1.$$arity = 2), nil) && 'render_tactile'
  })($nesting[0], $$($nesting, 'GeometryHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HierarchyHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $HierarchyHtmlRenderer_render_parent$1;

    return (Opal.defs(self, '$render_parent', $HierarchyHtmlRenderer_render_parent$1 = function $$render_parent(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $HierarchyHtmlRenderer_render_parent$1.$$arity = 2), nil) && 'render_parent'
  })($nesting[0], $$($nesting, 'HelperHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IdentityHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $IdentityHtmlRenderer_render_atome_id$1, $IdentityHtmlRenderer_render_id$2, $IdentityHtmlRenderer_render_type$3;

    
    Opal.defs(self, '$render_atome_id', $IdentityHtmlRenderer_render_atome_id$1 = function $$render_atome_id(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $IdentityHtmlRenderer_render_atome_id$1.$$arity = 2);
    Opal.defs(self, '$render_id', $IdentityHtmlRenderer_render_id$2 = function $$render_id(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $IdentityHtmlRenderer_render_id$2.$$arity = 2);
    return (Opal.defs(self, '$render_type', $IdentityHtmlRenderer_render_type$3 = function $$render_type(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $IdentityHtmlRenderer_render_type$3.$$arity = 2), nil) && 'render_type';
  })($nesting[0], $$($nesting, 'HierarchyHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MediaHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $MediaHtmlRenderer_render_content$1;

    return (Opal.defs(self, '$render_content', $MediaHtmlRenderer_render_content$1 = function $$render_content(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $MediaHtmlRenderer_render_content$1.$$arity = 2), nil) && 'render_content'
  })($nesting[0], $$($nesting, 'IdentityHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SpatialHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $SpatialHtmlRenderer_render_x$1, $SpatialHtmlRenderer_render_xx$2, $SpatialHtmlRenderer_render_y$3, $SpatialHtmlRenderer_render_yy$4, $SpatialHtmlRenderer_render_z$5;

    
    Opal.defs(self, '$render_x', $SpatialHtmlRenderer_render_x$1 = function $$render_x(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_x$1.$$arity = 2);
    Opal.defs(self, '$render_xx', $SpatialHtmlRenderer_render_xx$2 = function $$render_xx(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_xx$2.$$arity = 2);
    Opal.defs(self, '$render_y', $SpatialHtmlRenderer_render_y$3 = function $$render_y(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_y$3.$$arity = 2);
    Opal.defs(self, '$render_yy', $SpatialHtmlRenderer_render_yy$4 = function $$render_yy(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_yy$4.$$arity = 2);
    return (Opal.defs(self, '$render_z', $SpatialHtmlRenderer_render_z$5 = function $$render_z(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_z$5.$$arity = 2), nil) && 'render_z';
  })($nesting[0], $$($nesting, 'MediaHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'UtilityHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $UtilityHtmlRenderer_render_language$1, $UtilityHtmlRenderer_render_preset$2;

    
    Opal.defs(self, '$render_language', $UtilityHtmlRenderer_render_language$1 = function $$render_language(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $UtilityHtmlRenderer_render_language$1.$$arity = 2);
    return (Opal.defs(self, '$render_preset', $UtilityHtmlRenderer_render_preset$2 = function $$render_preset(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $UtilityHtmlRenderer_render_preset$2.$$arity = 2), nil) && 'render_preset';
  })($nesting[0], $$($nesting, 'SpatialHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$alert']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'VisualHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $VisualHtmlRenderer_color$1, $VisualHtmlRenderer_opacity$2, $VisualHtmlRenderer_border$3, $VisualHtmlRenderer_overflow$4;

    
    Opal.defs(self, '$color', $VisualHtmlRenderer_color$1 = function $$color(atome_id, params) {
      var self = this;

      return self.$alert("" + "render " + (atome_id) + " " + (params))
    }, $VisualHtmlRenderer_color$1.$$arity = 2);
    Opal.defs(self, '$opacity', $VisualHtmlRenderer_opacity$2 = function $$opacity(atome_id, params) {
      var self = this;

      return self.$alert("" + "render " + (atome_id) + " " + (params))
    }, $VisualHtmlRenderer_opacity$2.$$arity = 2);
    Opal.defs(self, '$border', $VisualHtmlRenderer_border$3 = function $$border(atome_id, params) {
      var self = this;

      return self.$alert("" + "render " + (atome_id) + " " + (params))
    }, $VisualHtmlRenderer_border$3.$$arity = 2);
    return (Opal.defs(self, '$overflow', $VisualHtmlRenderer_overflow$4 = function $$overflow(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $VisualHtmlRenderer_overflow$4.$$arity = 2), nil) && 'overflow';
  })($nesting[0], $$($nesting, 'UtilityHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$find', '$+', '$[]']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RenderHtml');

    var $nesting = [self].concat($parent_nesting), $RenderHtml_jq_get$1;

    return (Opal.defs(self, '$jq_get', $RenderHtml_jq_get$1 = function $$jq_get(atome_id) {
      var self = this;

      return $$($nesting, 'Element').$find($rb_plus("#", atome_id['$[]']("value")))
    }, $RenderHtml_jq_get$1.$$arity = 1), nil) && 'jq_get'
  })($nesting[0], $$($nesting, 'VisualHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
Opal.modules["extensions/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]', '$sort_by', '$index', '$length']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_sort_by_array$1;

    return (Opal.def(self, '$sort_by_array', $Hash_sort_by_array$1 = function $$sort_by_array(a) {
      var $$2, self = this;

      return $$($nesting, 'Hash')['$[]']($send(self, 'sort_by', [], ($$2 = function(k, _){var self = $$2.$$s || this, $a;

      
        
        if (k == null) {
          k = nil;
        };
        
        if (_ == null) {
          _ = nil;
        };
        return ($truthy($a = a.$index(k)) ? $a : self.$length());}, $$2.$$s = self, $$2.$$arity = 2, $$2)))
    }, $Hash_sort_by_array$1.$$arity = 1), nil) && 'sort_by_array'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/fake_methods"] = function(Opal) {
  var $atome_id$1, $color$2, $opacity$3, $fill$4, $insert$5, $centering$6, $resize$7, $child$8, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  
  
  Opal.def(self, '$atome_id', $atome_id$1 = function $$atome_id($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $atome_id$1.$$arity = -1);
  
  Opal.def(self, '$color', $color$2 = function $$color($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $color$2.$$arity = -1);
  
  Opal.def(self, '$opacity', $opacity$3 = function $$opacity($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $opacity$3.$$arity = -1);
  
  Opal.def(self, '$fill', $fill$4 = function $$fill($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $fill$4.$$arity = -1);
  
  Opal.def(self, '$insert', $insert$5 = function $$insert($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $insert$5.$$arity = -1);
  
  Opal.def(self, '$centering', $centering$6 = function $$centering($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $centering$6.$$arity = -1);
  
  Opal.def(self, '$resize', $resize$7 = function $$resize($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $resize$7.$$arity = -1);
  return (Opal.def(self, '$child', $child$8 = function $$child($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $child$8.$$arity = -1), nil) && 'child';
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/builder/property"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$merge', '$define_method', '$each', '$send', '$atome_id', '$instance_variable_set', '$instance_variable_get', '$+', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Properties');

    var $nesting = [self].concat($parent_nesting), $Properties_atome_methods$1, $Properties_methods_genesis$2;

    
    Opal.defs(self, '$atome_methods', $Properties_atome_methods$1 = function $$atome_methods() {
      var self = this, spatial = nil, events = nil, helper = nil, visual = nil, geometry = nil, effect = nil, identity = nil, media = nil, hierarchy = nil, communication = nil, utility = nil;

      
      spatial = $hash2(["width", "height", "size", "x", "xx", "y", "yy", "z"], {"width": [], "height": [], "size": [], "x": [], "xx": [], "y": [], "yy": [], "z": []});
      events = $hash2(["touch", "drag", "over"], {"touch": [], "drag": [], "over": []});
      helper = $hash2(["tactile", "display"], {"tactile": [], "display": []});
      visual = $hash2(["color", "opacity", "border", "overflow"], {"color": ["pre"], "opacity": [], "border": [], "overflow": ["pre", "post"]});
      geometry = $hash2(["width", "height", "resize", "rotation"], {"width": [], "height": [], "resize": [], "rotation": []});
      effect = $hash2(["blur", "shadow"], {"blur": [], "shadow": ["post"]});
      identity = $hash2(["atome_id", "id", "type"], {"atome_id": [], "id": [], "type": []});
      media = $hash2(["content", "image", "sound", "video"], {"content": [], "image": [], "sound": [], "video": []});
      hierarchy = $hash2(["parent", "child", "insert"], {"parent": [], "child": [], "insert": []});
      communication = $hash2(["share"], {"share": []});
      utility = $hash2(["add", "delete", "record", "enliven", "selector", "render", "preset"], {"add": [], "delete": [], "record": [], "enliven": [], "selector": [], "render": [], "preset": []});
      return spatial.$merge(events).$merge(helper).$merge(visual).$merge(geometry).$merge(effect).$merge(identity).$merge(media).$merge(hierarchy).$merge(communication).$merge(utility);
    }, $Properties_atome_methods$1.$$arity = 0);
    Opal.defs(self, '$methods_genesis', $Properties_methods_genesis$2 = function $$methods_genesis(method_name, options) {
      var $$3, $$5, self = this;

      
      $send($$($nesting, 'Atome'), 'define_method', [method_name], ($$3 = function(value){var self = $$3.$$s || this, $$4;

      
        
        if (value == null) {
          value = nil;
        };
        if ($truthy(value)) {
          
          $send(options, 'each', [], ($$4 = function(option){var self = $$4.$$s || this;

          
            
            if (option == null) {
              option = nil;
            };
            return $$($nesting, 'Renderer').$send("" + (method_name) + "_" + (option) + "_processor", value);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
          $$($nesting, 'RenderHtml').$send(method_name, self.$atome_id(), value);
          return self.$instance_variable_set("" + "@" + (method_name), value);
        } else {
          return self.$instance_variable_get("" + "@" + (method_name))
        };}, $$3.$$s = self, $$3.$$arity = 1, $$3));
      return $send($$($nesting, 'Atome'), 'define_method', [$rb_plus(method_name.$to_s(), "=")], ($$5 = function(value){var self = $$5.$$s || this;

      
        
        if (value == null) {
          value = nil;
        };
        return self.$send(method_name, value);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
    }, $Properties_methods_genesis$2.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/audio"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AudioProcessor');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/communication"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CommunicationProcessor');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'AudioProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/effect"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EffectProcessor');

    var $nesting = [self].concat($parent_nesting), $EffectProcessor_shadow_pre_processor$1;

    return (Opal.defs(self, '$shadow_pre_processor', $EffectProcessor_shadow_pre_processor$1 = function $$shadow_pre_processor(params) {
      var self = this;

      return params
    }, $EffectProcessor_shadow_pre_processor$1.$$arity = 1), nil) && 'shadow_pre_processor'
  })($nesting[0], $$($nesting, 'CommunicationProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EventProcessor');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'EffectProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/geometry"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GeometryProcessor');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'EventProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/helper"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HelperProcessor');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'GeometryProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/hierarchy"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HierarchyProcessor');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'HelperProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/identity"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IdentityProcessor');

    var $nesting = [self].concat($parent_nesting), $IdentityProcessor_atome_id_pre_processor$1, $IdentityProcessor_atome_id_processor$2;

    
    Opal.defs(self, '$atome_id_pre_processor', $IdentityProcessor_atome_id_pre_processor$1 = function $$atome_id_pre_processor(params) {
      var self = this;

      return params
    }, $IdentityProcessor_atome_id_pre_processor$1.$$arity = 1);
    return (Opal.defs(self, '$atome_id_processor', $IdentityProcessor_atome_id_processor$2 = function $$atome_id_processor(params) {
      var self = this;

      return params
    }, $IdentityProcessor_atome_id_processor$2.$$arity = 1), nil) && 'atome_id_processor';
  })($nesting[0], $$($nesting, 'HierarchyProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/media"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MediaProcessor');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'IdentityProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/spatial"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SpatialProcessor');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'MediaProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/utility"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'UtilityProcessor');

    var $nesting = [self].concat($parent_nesting), $UtilityProcessor_delete_processor$1, $UtilityProcessor_render_pre_processor$2;

    
    Opal.defs(self, '$delete_processor', $UtilityProcessor_delete_processor$1 = function $$delete_processor(params) {
      var self = this;

      return params
    }, $UtilityProcessor_delete_processor$1.$$arity = 1);
    return (Opal.defs(self, '$render_pre_processor', $UtilityProcessor_render_pre_processor$2 = function $$render_pre_processor(params) {
      var self = this;

      return params
    }, $UtilityProcessor_render_pre_processor$2.$$arity = 1), nil) && 'render_pre_processor';
  })($nesting[0], $$($nesting, 'SpatialProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/visual"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$alert']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'VisualProcessor');

    var $nesting = [self].concat($parent_nesting), $VisualProcessor_color_pre_processor$1, $VisualProcessor_shadow_post_processor$2, $VisualProcessor_overflow_pre_processor$3, $VisualProcessor_overflow_post_processor$4;

    
    Opal.defs(self, '$color_pre_processor', $VisualProcessor_color_pre_processor$1 = function $$color_pre_processor(params) {
      var self = this;

      
      self.$alert("" + "params is : " + (params));
      return params;
    }, $VisualProcessor_color_pre_processor$1.$$arity = 1);
    Opal.defs(self, '$shadow_post_processor', $VisualProcessor_shadow_post_processor$2 = function $$shadow_post_processor(params) {
      var self = this;

      
      self.$alert("ok for the params");
      return params;
    }, $VisualProcessor_shadow_post_processor$2.$$arity = 1);
    Opal.defs(self, '$overflow_pre_processor', $VisualProcessor_overflow_pre_processor$3 = function $$overflow_pre_processor(params) {
      var self = this;

      
      self.$alert("ok for the preoverflow");
      return params;
    }, $VisualProcessor_overflow_pre_processor$3.$$arity = 1);
    return (Opal.defs(self, '$overflow_post_processor', $VisualProcessor_overflow_post_processor$4 = function $$overflow_post_processor(params) {
      var self = this;

      
      self.$alert("ok for the postoverflow");
      return params;
    }, $VisualProcessor_overflow_post_processor$4.$$arity = 1), nil) && 'overflow_post_processor';
  })($nesting[0], $$($nesting, 'UtilityProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/system/utilities"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$sort_by_array', '$each', '$[]=', '$resize_actions', '$grab', '$-', '$==', '$[]', '$atome_id', '$instance_of?', '$resize', '$x', '$centering', '$y']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Utilities');

    var $nesting = [self].concat($parent_nesting), $Utilities_reorder_properties$1, $Utilities_resize_actions$2, $Utilities_viewer_actions$4;

    
    
    Opal.def(self, '$reorder_properties', $Utilities_reorder_properties$1 = function $$reorder_properties(properties) {
      var self = this, order_wanted = nil;

      
      order_wanted = ["atome_id", "type", "parent", "width", "height", "x", "y", "z", "center", "size", "content"];
      return properties.$sort_by_array(order_wanted);
    }, $Utilities_reorder_properties$1.$$arity = 1);
    
    Opal.def(self, '$resize_actions', $Utilities_resize_actions$2 = function $$resize_actions(params) {
      var $$3, self = this;
      if (self.resize_actions == null) self.resize_actions = nil;

      
      
      if (params == null) {
        params = nil;
      };
      if ($truthy(params)) {
        return $send(params, 'each', [], ($$3 = function(key, value){var self = $$3.$$s || this, $writer = nil;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          $writer = [key, value];
          $send(self.$grab("actions").$resize_actions(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3))
      } else if (self.$atome_id()['$[]']("value")['$==']("actions")) {
        if ($truthy(self.resize_actions['$instance_of?']($$($nesting, 'NilClass')))) {
          return (self.resize_actions = $hash2([], {}))
        } else {
          return self.resize_actions
        }
      } else {
        return self.$grab("actions").$resize_actions()
      };
    }, $Utilities_resize_actions$2.$$arity = -1);
    
    Opal.def(self, '$viewer_actions', $Utilities_viewer_actions$4 = function $$viewer_actions() {
      var $$5, self = this;

      return $send(self.$grab("view"), 'resize', [], ($$5 = function(){var self = $$5.$$s || this, $a, $$6;

      return ($a = self.$grab("actions").$resize_actions()['$[]']("center"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], ($$6 = function(atome){var self = $$6.$$s || this;

        
          
          if (atome == null) {
            atome = nil;
          };
          if ($truthy(atome.$x()['$[]']("center"))) {
            atome.$centering("x", atome.$x()['$[]']("center"), atome.$x()['$[]']("reference"), atome.$x()['$[]']("dynamic"))};
          if ($truthy(atome.$y()['$[]']("center"))) {
            return atome.$centering("y", atome.$y()['$[]']("center"), atome.$y()['$[]']("reference"), atome.$y()['$[]']("dynamic"))
          } else {
            return nil
          };}, $$6.$$s = self, $$6.$$arity = 1, $$6)))}, $$5.$$s = self, $$5.$$arity = 0, $$5))
    }, $Utilities_viewer_actions$4.$$arity = 0);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/system/renderer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Renderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'VisualProcessor'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/builder/object"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$atome_methods', '$each', '$methods_genesis', '$atomise', '$set', '$register_atome', '$send', '$<<', '$class_variable_get', '$class_variable_set']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $Atome_sparkle$1, $Atome_initialize$3, $Atome_set$5, $Atome_register_atome$6, $Atome_atomise$7, $Atome_atomes$8;

    
    self.$include($$($nesting, 'Utilities'));
    self.$include($$($nesting, 'Properties'));
    Opal.defs(self, '$sparkle', $Atome_sparkle$1 = function $$sparkle() {
      var $$2, self = this, atome_methods = nil;

      
      atome_methods = $$($nesting, 'Properties').$atome_methods();
      $send(atome_methods, 'each', [], ($$2 = function(method_name, options){var self = $$2.$$s || this;

      
        
        if (method_name == null) {
          method_name = nil;
        };
        
        if (options == null) {
          options = nil;
        };
        return $$($nesting, 'Properties').$methods_genesis(method_name, options);}, $$2.$$s = self, $$2.$$arity = 2, $$2));
      return $$($nesting, 'Atome').$atomise();
    }, $Atome_sparkle$1.$$arity = 0);
    
    Opal.def(self, '$initialize', $Atome_initialize$3 = function $$initialize(properties) {
      var $$4, self = this;

      
      
      if (properties == null) {
        properties = $hash2(["type"], {"type": "particle"});
      };
      $send(properties, 'each', [], ($$4 = function(property, value){var self = $$4.$$s || this;

      
        
        if (property == null) {
          property = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return self.$set(property, value);}, $$4.$$s = self, $$4.$$arity = 2, $$4));
      return self.$register_atome();
    }, $Atome_initialize$3.$$arity = -1);
    
    Opal.def(self, '$set', $Atome_set$5 = function $$set(property, value) {
      var self = this;

      return self.$send(property, value)
    }, $Atome_set$5.$$arity = 2);
    
    Opal.def(self, '$register_atome', $Atome_register_atome$6 = function $$register_atome() {
      var self = this;

      return $$($nesting, 'Atome').$class_variable_get("@@atomes")['$<<'](self)
    }, $Atome_register_atome$6.$$arity = 0);
    Opal.defs(self, '$atomise', $Atome_atomise$7 = function $$atomise() {
      var self = this;

      return $$($nesting, 'Atome').$class_variable_set("@@atomes", [])
    }, $Atome_atomise$7.$$arity = 0);
    return (Opal.defs(self, '$atomes', $Atome_atomes$8 = function $$atomes() {
      var self = this;

      return $$($nesting, 'Atome').$class_variable_get("@@atomes")
    }, $Atome_atomes$8.$$arity = 0), nil) && 'atomes';
  })($nesting[0], $$($nesting, 'Renderer'), $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/utilities/global"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $identity$1, $get$2, $grab$4, $tactile$6, $lorem$7, $version$8, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send;

  Opal.add_stubs(['$+', '$to_s', '$object_id', '$now', '$each', '$atomes', '$==', '$[]', '$id', '$atome_id']);
  
  
  Opal.def(self, '$identity', $identity$1 = function $$identity() {
    var self = this;

    return $rb_plus($rb_plus("a_", self.$object_id().$to_s()), $$($nesting, 'Time').$now().$to_s())
  }, $identity$1.$$arity = 0);
  
  Opal.def(self, '$get', $get$2 = function $$get(id) {try {

    var $$3, self = this;

    
    $send($$($nesting, 'Atome').$atomes(), 'each', [], ($$3 = function(atome){var self = $$3.$$s || this;

    
      
      if (atome == null) {
        atome = nil;
      };
      if (atome.$id()['$[]']("value")['$=='](id)) {
        Opal.ret(atome)
      } else {
        return nil
      };}, $$3.$$s = self, $$3.$$arity = 1, $$3));
    return nil;
    } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
  }, $get$2.$$arity = 1);
  
  Opal.def(self, '$grab', $grab$4 = function $$grab(atome_id) {try {

    var $$5, self = this;

    
    $send($$($nesting, 'Atome').$atomes(), 'each', [], ($$5 = function(atome){var self = $$5.$$s || this;

    
      
      if (atome == null) {
        atome = nil;
      };
      if (atome.$atome_id()['$[]']("value")['$=='](atome_id)) {
        Opal.ret(atome)
      } else {
        return nil
      };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
    return nil;
    } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
  }, $grab$4.$$arity = 1);
  
  Opal.def(self, '$tactile', $tactile$6 = function $$tactile() {
    var self = this;

    return false
  }, $tactile$6.$$arity = 0);
  
  Opal.def(self, '$lorem', $lorem$7 = function $$lorem() {
    var self = this;

    return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n"
  }, $lorem$7.$$arity = 0);
  return (Opal.def(self, '$version', $version$8 = function $$version() {
    var self = this;

    return "v:0.010"
  }, $version$8.$$arity = 0), nil) && 'version';
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/environment/device"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$merge', '$lorem']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Device');

    var $nesting = [self].concat($parent_nesting), $Device_initialize$1, $Device_presets$2;

    
    
    Opal.def(self, '$initialize', $Device_initialize$1 = function $$initialize() {
      var self = this;

      return nil
    }, $Device_initialize$1.$$arity = 0);
    return (Opal.def(self, '$presets', $Device_presets$2 = function $$presets() {
      var self = this, visual = nil, shape = nil, box = nil, circle = nil, text = nil, image = nil, video = nil, audio = nil, particle = nil, collector = nil, tool = nil, web = nil, user = nil, color = nil, history = nil, authorisation = nil, shadow = nil, border = nil, blur = nil;

      
      visual = $hash2(["color", "center", "z", "overflow", "parent"], {"color": "lightgray", "center": $hash2(["y", "x", "dynamic"], {"y": 43, "x": 16, "dynamic": false}), "z": 0, "overflow": "visible", "parent": "view"});
      shape = visual.$merge($hash2(["type", "width", "height", "content"], {"type": "shape", "width": 70, "height": 70, "content": $hash2(["points"], {"points": 2})}));
      box = visual.$merge(shape).$merge($hash2(["content"], {"content": $hash2(["points"], {"points": 4})}));
      circle = visual.$merge(shape).$merge($hash2(["color", "content"], {"color": "red", "content": $hash2(["points", "tension"], {"points": 4, "tension": "100%"})}));
      text = visual.$merge($hash2(["type", "color", "size", "content"], {"type": "text", "color": [$hash2(["red", "green", "blue"], {"red": 124, "green": 124, "blue": 124})], "size": 25, "content": self.$lorem()}));
      image = visual.$merge($hash2(["type", "color", "content"], {"type": "image", "color": "transparent", "content": "atome"}));
      video = visual.$merge($hash2(["type", "color", "content"], {"type": "video", "color": "transparent", "content": "atome"}));
      audio = visual.$merge($hash2(["type", "color", "content"], {"type": "audio", "color": "transparent", "content": "atome"}));
      particle = $hash2(["type"], {"type": "particle"});
      collector = $hash2(["type"], {"type": "collector"});
      tool = visual.$merge($hash2(["type", "width", "height", "parent", "content"], {"type": "tool", "width": 52, "height": 50, "parent": "intuition", "content": "dummy"}));
      web = visual.$merge($hash2(["type", "color", "content"], {"type": "web", "color": "transparent", "content": "atome"}));
      user = visual.$merge($hash2(["type", "color", "name", "pass", "content"], {"type": "user", "color": "transparent", "name": "anonymous", "pass": "none", "content": "anonymous"}));
      color = $hash2(["content"], {"content": "black"});
      history = $hash2([], {});
      authorisation = $hash2(["creator", "read", "write"], {"creator": "atome", "read": "all", "write": "all"});
      shadow = $hash2(["x", "y", "blur", "thickness", "color", "invert"], {"x": 0, "y": 0, "blur": 7, "thickness": 0, "color": [$hash2(["alpha"], {"alpha": 0.3})], "invert": false});
      border = $hash2(["thickness", "pattern", "color"], {"thickness": 1, "pattern": "solid", "color": "red"});
      blur = $hash2(["default"], {"default": 5});
      return $hash2(["value"], {"value": $hash2(["shape", "box", "circle", "text", "image", "video", "audio", "particle", "collector", "tool", "web", "user", "color", "history", "authorisation", "shadow", "border", "blur"], {"shape": shape, "box": box, "circle": circle, "text": text, "image": image, "video": video, "audio": audio, "particle": particle, "collector": collector, "tool": tool, "web": web, "user": user, "color": color, "history": history, "authorisation": authorisation, "shadow": shadow, "border": border, "blur": blur})});
    }, $Device_presets$2.$$arity = 0), nil) && 'presets';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/environment/initialize"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$sparkle']);
  return $$($nesting, 'Atome').$sparkle()
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/system/creation"] = function(Opal) {
  var $box$1, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$alert']);
  return (Opal.def(self, '$box', $box$1 = function $$box() {
    var self = this;

    return self.$alert("box creation!!")
  }, $box$1.$$arity = 0), nil) && 'box'
};

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("extensions/hash");
  self.$require("atome/fake_methods");
  self.$require("atome/builder/property");
  self.$require("atome/properties/audio");
  self.$require("atome/properties/communication");
  self.$require("atome/properties/effect");
  self.$require("atome/properties/event");
  self.$require("atome/properties/geometry");
  self.$require("atome/properties/helper");
  self.$require("atome/properties/hierarchy");
  self.$require("atome/properties/identity");
  self.$require("atome/properties/media");
  self.$require("atome/properties/spatial");
  self.$require("atome/properties/utility");
  self.$require("atome/properties/visual");
  self.$require("atome/system/utilities");
  self.$require("atome/system/renderer");
  self.$require("atome/builder/object");
  self.$require("atome/utilities/global");
  self.$require("atome/environment/device");
  self.$require("atome/environment/initialize");
  return self.$require("atome/system/creation");
})(Opal);
