- monitor(atome: :view, property: size)
- broadcast changes
- database  and find api:
        examples:
        find({target: [atome_1, {user: [:jeezs, :sylvs]}, machine_1, :machine2})
        EDEn.find({user: :jeezs}) => get jeezs first level atomes
        EDEn.find({user: :jeezs, type: :image}) => get all images from jeezs
        EDEn.find({user: :jeezs, type: :image, from:{date: "01.06.2021"},  to:{date: "02.06.2021"}, width: {superior: 400} }) => get all images from a certain date with a width superior to 400
        my_atome.find({color: :red) => get all child of my_atome with a red color
        my_atome.find({type: :shape) => get all child of my_atome of type 'shape'
     how to name (root) user home's atome ? home?
- autorisation/ right management
    usage:
        right on an atome, ex jeezscan change autorisation (security) , everybody can read , modification possible using password, sylvs can change the color, jeezs can delete , jeezs can share
            a.autorisation(value: {security: :jeezs}, read: all, modification: {all: {pasword: :kjhdsfgdfg54dfg}, color: {user: :sylvs}} ,delete: {user: :jeezs}, share: {user: :jeezs}}}
        advanced right on a property :
            a.color({value: :red, autorisation: { read: true, write: {user: [:jeezs, sylvz], password: :jkhgj35435},security: :jeezs}})
            or using an external security object :
            security_atome=Atome.new(autorisation: { read: true, write: {user: [:jeezs, sylvz], password: :jkhgj35435},security: :jeezs})
            a.color({value: :red, autorisation: security_atome})
- midi native + web
- share collaboration
- init sequence
- basic U.I.
- Debug
- Documentation


#old todos :
- monstruous bug when inserting an object into an other, the child lose it's position, the offset is also fucked, the bug is worse when deleting and enliven an atome!!!
- monstruous bug 2 when enliven atome child often it's drag ability and sometimes disapear
- render and enliven loose centering
- make enliven works when object has child or parent ex :  b = box({id: :toto})
                                                           b.color(:red)
                                                           t=b.text({content: :kooly, id: :titi, color: :white, y: 150})
                                                           t.y(150)
                                                           b.touch do
                                                            b.delete(true)
                                                           end
                                                           r=text({content: :reanimator,color: :orange, y: 20})
                                                           r.touch do
                                                            get(:titi).enliven(true)
                                                           end
- prevent object from beeing insert many times in the same parent
- allow this syntax a.x=b.x-c.x( not possible because of content) maybe complex property should have two kind of return a simple and a full. ex a.x => 20 a_.x_full => {content: 20 , dynamic: true}
- add and atome array and atome hash that inherit ruby array and hash to allow easy batch of atomes
- add creation of atome's array to allow batch treatment
- solve render bug (see render example)
- utilities in Neutron needs to a bit of integration to work with example
- centering is not removed when settings x or y value
- stack and allow to remove and pause  all events and specifics
- using .property method destroy event such as 'touch'
- proper delete
- proper object creation
- clean and astandardize all properties
- caret handling
- protect atome_id once writen unmodifaible
_ protect autorisation
- init sequence with db
