Opal.modules["fileutils"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.7.3 */

Opal.modules["corelib/random/formatter"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $module = Opal.module, $def = Opal.def, $range = Opal.range, $send = Opal.send, $rb_divide = Opal.rb_divide, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('_verify_count,bytes,encode,strict_encode64,random_bytes,urlsafe_encode64,split,hex,[]=,[],map,to_proc,join,times,<<,|,ord,/,abs,random_float,raise,coerce_to!,flatten,new,random_number,length,include,extend');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Random');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var self = $module($base, 'Formatter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$hex', function $$hex(count) {
        var self = this;

        
        if (count == null) count = nil;
        count = $$$('Random').$_verify_count(count);
        
        var bytes = self.$bytes(count);
        var out = "";
        for (var i = 0; i < count; i++) {
          out += bytes.charCodeAt(i).toString(16).padStart(2, '0');
        }
        return (out).$encode("US-ASCII");
      ;
      }, -1);
      
      $def(self, '$random_bytes', function $$random_bytes(count) {
        var self = this;

        
        if (count == null) count = nil;
        return self.$bytes(count);
      }, -1);
      
      $def(self, '$base64', function $$base64(count) {
        var self = this;

        
        if (count == null) count = nil;
        return $$$('Base64').$strict_encode64(self.$random_bytes(count)).$encode("US-ASCII");
      }, -1);
      
      $def(self, '$urlsafe_base64', function $$urlsafe_base64(count, padding) {
        var self = this;

        
        if (count == null) count = nil;
        if (padding == null) padding = false;
        return $$$('Base64').$urlsafe_encode64(self.$random_bytes(count), padding).$encode("US-ASCII");
      }, -1);
      
      $def(self, '$uuid', function $$uuid() {
        var self = this, str = nil;

        
        str = self.$hex(16).$split("");
        str['$[]='](12, "4");
        str['$[]='](16, (parseInt(str['$[]'](16), 16) & 3 | 8).toString(16));
        str = [str['$[]']($range(0, 8, true)), str['$[]']($range(8, 12, true)), str['$[]']($range(12, 16, true)), str['$[]']($range(16, 20, true)), str['$[]']($range(20, 32, true))];
        str = $send(str, 'map', [], "join".$to_proc());
        return str.$join("-");
      });
      
      $def(self, '$random_float', function $$random_float() {
        var self = this, bs = nil, num = nil;

        
        bs = self.$bytes(4);
        num = 0;
        $send((4), 'times', [], function $$1(i){
          
          if (i == null) i = nil;
          num = num['$<<'](8);
          return (num = num['$|'](bs['$[]'](i).$ord()));});
        return $rb_divide(num.$abs(), 2147483647);
      });
      
      $def(self, '$random_number', function $$random_number(limit) {
        var self = this;

        
        ;
        
        function randomFloat() {
          return self.$random_float();
        }

        function randomInt(max) {
          return Math.floor(randomFloat() * max);
        }

        function randomRange() {
          var min = limit.begin,
              max = limit.end;

          if (min === nil || max === nil) {
            return nil;
          }

          var length = max - min;

          if (length < 0) {
            return nil;
          }

          if (length === 0) {
            return min;
          }

          if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
            length++;
          }

          return randomInt(length) + min;
        }

        if (limit == null) {
          return randomFloat();
        } else if (limit.$$is_range) {
          return randomRange();
        } else if (limit.$$is_number) {
          if (limit <= 0) {
            $Kernel.$raise($$$('ArgumentError'), "invalid argument - " + (limit))
          }

          if (limit % 1 === 0) {
            // integer
            return randomInt(limit);
          } else {
            return randomFloat() * limit;
          }
        } else {
          limit = $Opal['$coerce_to!'](limit, $$$('Integer'), "to_int");

          if (limit <= 0) {
            $Kernel.$raise($$$('ArgumentError'), "invalid argument - " + (limit))
          }

          return randomInt(limit);
        }
      ;
      }, -1);
      return $def(self, '$alphanumeric', function $$alphanumeric(count) {
        var self = this, map = nil;

        
        if (count == null) count = nil;
        count = $$('Random').$_verify_count(count);
        map = $send([$range("0", "9", false), $range("a", "z", false), $range("A", "Z", false)], 'map', [], "to_a".$to_proc()).$flatten();
        return $send($$$('Array'), 'new', [count], function $$2(i){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (i == null) i = nil;
          return map['$[]'](self.$random_number(map.$length()));}, {$$s: self}).$join();
      }, -1);
    })(self, $nesting);
    self.$include($$$($$$('Random'), 'Formatter'));
    return self.$extend($$$($$$('Random'), 'Formatter'));
  })('::', null, $nesting)
};

Opal.modules["securerandom"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,extend,warn,rand,gen_random,_verify_count,encode');
  
  self.$require("corelib/random/formatter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'SecureRandom');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$extend($$$($$('Random'), 'Formatter'));
    
    var gen_random_bytes;

    if ((Opal.global.crypto   && Opal.global.crypto.getRandomValues) ||
        (Opal.global.msCrypto && Opal.global.msCrypto.getRandomValues)) {
      // This method is available in all non-ancient web browsers.

      var crypto = Opal.global.crypto || Opal.global.msCrypto;
      gen_random_bytes = function(count) {
        var storage = new Uint8Array(count);
        crypto.getRandomValues(storage);
        return storage;
      };
    }
    else if (Opal.global.crypto && Opal.global.crypto.randomBytes) {
      // This method is available in Node.js

      gen_random_bytes = function(count) {
        return Opal.global.crypto.randomBytes(count);
      };
    }
    else {
      // Let's dangerously polyfill this interface with our MersenneTwister
      // xor native JS Math.random xor something about current time...
      // That's hardly secure, but the following warning should provide a person
      // deploying the code a good idea on what he should do to make his deployment
      // actually secure.
      // It's possible to interface other libraries by adding an else if above if
      // that's really desired.

      self.$warn("Can't get a Crypto.getRandomValues interface or Crypto.randomBytes." + "The random values generated with SecureRandom won't be " + "cryptographically secure")

      gen_random_bytes = function(count) {
        var storage = new Uint8Array(count);
        for (var i = 0; i < count; i++) {
          storage[i] = self.$rand(255) ^ Math.floor(Math.random() * 256);
          storage[i] ^= +(new Date())>>self.$rand(255)&0xff;
        }
        return storage;
      }
    }
  ;
    $defs(self, '$bytes', function $$bytes(bytes) {
      var self = this;

      
      if (bytes == null) bytes = nil;
      return self.$gen_random(bytes);
    }, -1);
    return $defs(self, '$gen_random', function $$gen_random(count) {
      var out = nil;

      
      if (count == null) count = nil;
      count = $$('Random').$_verify_count(count);
      out = "";
      
      var bytes = gen_random_bytes(count);
      for (var i = 0; i < count; i++) {
        out += String.fromCharCode(bytes[i]);
      }
    ;
      return out.$encode("ASCII-8BIT");
    }, -1);
  })($nesting[0], $nesting);
};

Opal.modules["atome/version"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $nesting = [], nil = Opal.nil;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting);

    return $const_set($nesting[0], 'VERSION', "0.5.4.0.8")
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/genesis"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $def = Opal.def, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $hash = Opal.hash, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('new,[],nil?,add_to_particle_list,particle_method_for_batch,auto_render_generator,new_particle,to_proc,additional_particle_methods,add_to_atome_list,atome_method_for_object,atome_method_for_batch,default_params,new_default_params,new_atome,each,renderer_list,build_render,new_render_engine,add_sanitizer_method,to_sym,add_optional_method');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Genesis');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return $def(self, '$generator', function $$generator() {
        
        return $$('Atome').$new()
      })
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$build_particle', function $$build_particle(particle_name, options) {
      var particle_proc = $$build_particle.$$p || nil, self = this, type = nil, store = nil, render = nil;

      $$build_particle.$$p = null;
      
      ;
      if (options == null) options = $hash2([], {});
      type = options['$[]']("type");
      if ($truthy(options['$[]']("type")['$nil?']())) {
        type = "string"
      };
      store = options['$[]']("store");
      if ($truthy(options['$[]']("store")['$nil?']())) {
        store = true
      };
      render = options['$[]']("render");
      if ($truthy(options['$[]']("render")['$nil?']())) {
        render = true
      };
      $$('Universe').$add_to_particle_list(particle_name, type);
      self.$particle_method_for_batch(particle_name);
      if ($truthy(render)) {
        self.$auto_render_generator(particle_name)
      };
      $send(self, 'new_particle', [particle_name, store, render], particle_proc.$to_proc());
      return $send(self, 'additional_particle_methods', [particle_name, store, render], particle_proc.$to_proc());
    }, -2);
    
    $def(self, '$build_atome', function $$build_atome(atome_name) {
      var atome_proc = $$build_atome.$$p || nil, self = this;

      $$build_atome.$$p = null;
      
      ;
      $$('Universe').$add_to_atome_list(atome_name);
      self.$atome_method_for_object(atome_name);
      self.$atome_method_for_batch(atome_name);
      if (!$truthy($$('Essentials').$default_params()['$[]'](atome_name))) {
        $$('Essentials').$new_default_params($hash(atome_name, $hash2(["type", "attach"], {"type": atome_name, "attach": ["view"]})))
      };
      self.$auto_render_generator(atome_name);
      return $send(self, 'new_atome', [atome_name], atome_proc.$to_proc());
    });
    
    $def(self, '$auto_render_generator', function $$auto_render_generator(element) {
      var self = this;

      return $send($$('Universe').$renderer_list(), 'each', [], function $$1(render_engine){var self = $$1.$$s == null ? this : $$1.$$s;

        
        if (render_engine == null) render_engine = nil;
        return self.$build_render("" + (render_engine) + "_" + (element));}, {$$s: self})
    });
    
    $def(self, '$build_render', function $$build_render(renderer_name) {
      var method_proc = $$build_render.$$p || nil, self = this;

      $$build_render.$$p = null;
      
      ;
      return $send(self, 'new_render_engine', [renderer_name], method_proc.$to_proc());
    });
    
    $def(self, '$build_sanitizer', function $$build_sanitizer(method_name) {
      var method_proc = $$build_sanitizer.$$p || nil;

      $$build_sanitizer.$$p = null;
      
      ;
      return $send($$('Universe'), 'add_sanitizer_method', [method_name.$to_sym()], method_proc.$to_proc());
    });
    return $def(self, '$build_option', function $$build_option(method_name) {
      var method_proc = $$build_option.$$p || nil;

      $$build_option.$$p = null;
      
      ;
      return $send($$('Universe'), 'add_optional_method', [method_name.$to_sym()], method_proc.$to_proc());
    });
  })($nesting[0], null, $nesting);
};

Opal.modules["atome/kernel/essentials"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $def = Opal.def, $return_ivar = Opal.return_ivar, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('private,[],to_s');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    var $proto = self.$$prototype;

    $proto.atome = $proto.value = $proto.result = nil;
    
    self.$private();
    
    $def(self, '$get', function $$get(element) {
      var self = this;

      return self.atome['$[]'](element)
    });
    
    $def(self, '$value', $return_ivar("atome"));
    return $def(self, '$to_s', function $$to_s() {
      var self = this;

      
      if ($truthy(self.value)) {
        self.result = self.value.$to_s()
      } else if ($truthy(self.atome)) {
        self.result = self.atome.$to_s()
      };
      return self.result.$to_s();
    });
  })($nesting[0], null)
};

Opal.modules["atome/kernel/universe"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $hash2 = Opal.hash2, $slice = Opal.slice, $send = Opal.send, $def = Opal.def, $hash = Opal.hash, $rb_plus = Opal.rb_plus, $assign_ivar_val = Opal.assign_ivar_val, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $return_ivar = Opal.return_ivar, $eqeq = Opal.eqeq, $assign_ivar = Opal.assign_ivar, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_reader,[]=,instance_variable_get,merge!,[],push,+,delete,===,=~,last_match,downcase,current_machine_decision,==');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Universe');

    var $nesting = [self].concat($parent_nesting);

    
    self.counter = 0;
    self.atomes = $hash2([], {});
    self.classes = $hash2([], {});
    self.atome_list = [];
    self.particle_list = $hash2([], {});
    self.renderer_list = ["html", "browser", "headless", "server"];
    self.options = $hash2([], {});
    self.sanitizers = $hash2([], {});
    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$attr_reader("atomes", "renderer_list", "atome_list", "particle_list", "classes", "counter");
      
      $def(self, '$add_to_particle_list', function $$add_to_particle_list($a, $b) {
        var $post_args, particle, type, $c, self = this;

        
        $post_args = $slice(arguments);
        
        if ($post_args.length > 1) particle = $post_args.shift();if (particle == null) particle = nil;
        
        type = $post_args.shift();if (type == null) type = nil;
        return ($c = [particle, type], $send(self.$instance_variable_get("@particle_list"), '[]=', $c), $c[$c.length - 1]);
      }, -2);
      
      $def(self, '$add_optional_method', function $$add_optional_method(method_name) {
        var method_proc = $$add_optional_method.$$p || nil, self = this;

        $$add_optional_method.$$p = null;
        
        ;
        return self.$instance_variable_get("@options")['$merge!']($hash(method_name, method_proc));
      });
      
      $def(self, '$get_optional_method', function $$get_optional_method(method_name) {
        var self = this;

        return self.$instance_variable_get("@options")['$[]'](method_name)
      });
      
      $def(self, '$add_sanitizer_method', function $$add_sanitizer_method(method_name) {
        var method_proc = $$add_sanitizer_method.$$p || nil, self = this;

        $$add_sanitizer_method.$$p = null;
        
        ;
        return self.$instance_variable_get("@sanitizers")['$merge!']($hash(method_name, method_proc));
      });
      
      $def(self, '$get_sanitizer_method', function $$get_sanitizer_method(method_name) {
        var self = this;

        return self.$instance_variable_get("@sanitizers")['$[]'](method_name)
      });
      
      $def(self, '$add_to_atome_list', function $$add_to_atome_list(atome) {
        var self = this;

        return self.$instance_variable_get("@atome_list").$push(atome)
      });
      
      $def(self, '$add_to_atomes', function $$add_to_atomes(id, atome) {
        var self = this;
        if (self.atomes == null) self.atomes = nil;
        if (self.counter == null) self.counter = nil;

        
        self.atomes['$[]='](id, atome);
        return (self.counter = $rb_plus(self.counter, 1));
      });
      
      $def(self, '$update_atome_id', function $$update_atome_id(id, atome, prev_id) {
        var self = this;
        if (self.atomes == null) self.atomes = nil;

        
        self.atomes['$[]='](id, atome);
        return self.atomes.$delete(prev_id);
      });
      
      $def(self, '$app_identity', $assign_ivar_val("app_identity", 369));
      
      $def(self, '$delete', function $delete$1(id) {
        var self = this;
        if (self.atomes == null) self.atomes = nil;

        return self.atomes.$delete(id)
      });
      
      $def(self, '$current_machine_decision', function $$current_machine_decision(platform, output) {
        var $ret_or_1 = nil;

        
        if ($eqeqeq(/darwin/, ($ret_or_1 = platform))) {
          if ($truthy(output['$=~'](/en1.*?(([A-F0-9]{2}:){5}[A-F0-9]{2})/im))) {
            $$$('Regexp').$last_match(1)
          }
        } else if ($eqeqeq(/win32/, $ret_or_1)) {
          if ($truthy(output['$=~'](/Physical Address.*?(([A-F0-9]{2}-){5}[A-F0-9]{2})/im))) {
            $$$('Regexp').$last_match(1)
          }
        } else {
          "unknown platform"
        };
        return platform;
      });
      
      $def(self, '$current_machine', function $$current_machine() {
        var self = this, platform = nil, output = nil;

        
        platform = $$('RUBY_PLATFORM').$downcase();
        output = ($truthy(platform['$=~'](/win32/)) ? ("ipconfig /all") : ("ifconfig"));
        return self.$current_machine_decision(platform, output);
      });
      
      $def(self, '$current_user', $return_ivar("user"));
      
      $def(self, '$current_server', function $$current_server() {
        
        if ($eqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
          return window.location.href;
        } else {
          return nil
        }
      });
      
      $def(self, '$current_user=', $assign_ivar("user"));
      return $def(self, '$connected', $return_val(true));
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/batch"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $assign_ivar = Opal.assign_ivar, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('each,grab,is_a?,instance_exec,to_proc,send');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Batch');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.data = nil;
    
    
    $def(self, '$each', function $$each() {
      var proc = $$each.$$p || nil, self = this;

      $$each.$$p = null;
      
      ;
      return $send(self.data, 'each', [], function $$1(val){var self = $$1.$$s == null ? this : $$1.$$s, atome_found = nil;

        
        if (val == null) val = nil;
        atome_found = self.$grab(val);
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [atome_found], proc.$to_proc())
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$initialize', $assign_ivar("data"));
    return $def(self, '$dispatch', function $$dispatch(method, args) {
      var block = $$dispatch.$$p || nil, self = this;

      $$dispatch.$$p = null;
      
      ;
      $send(self.data, 'each', [], function $$2(atome_found){var self = $$2.$$s == null ? this : $$2.$$s;

        
        if (atome_found == null) atome_found = nil;
        return $send(args, 'each', [], function $$3(arg){var self = $$3.$$s == null ? this : $$3.$$s;

          
          if (arg == null) arg = nil;
          return $send(self.$grab(atome_found), 'send', [method, arg], block.$to_proc());}, {$$s: self});}, {$$s: self});
      return self;
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/helpers/essentials"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $hash2 = Opal.hash2, $return_ivar = Opal.return_ivar, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('merge!,current_user,[]=,[],merge');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Essentials');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.default_params = $hash2(["render_engines", "image", "web", "video", "animation", "element", "matrix", "box", "circle", "shape", "text", "drm", "shadow", "color"], {"render_engines": ["browser"], "image": $hash2(["type", "attach"], {"type": "image", "attach": ["view"]}), "web": $hash2(["type", "attach"], {"type": "web", "attach": ["view"]}), "video": $hash2(["type", "attach"], {"type": "video", "attach": ["view"]}), "animation": $hash2(["type", "attach"], {"type": "animation", "attach": ["black_matter"]}), "element": $hash2(["type", "renderers", "attach"], {"type": "element", "renderers": [], "attach": ["black_matter"]}), "matrix": $hash2(["type", "width", "height", "attached", "left", "top", "clones", "preset", "attach"], {"type": "shape", "width": 99, "height": 99, "attached": "matrix_color", "left": 100, "top": 100, "clones": [], "preset": "matrix", "attach": ["view"]}), "box": $hash2(["type", "width", "height", "attached", "attach", "left", "top", "clones", "preset"], {"type": "shape", "width": 99, "height": 99, "attached": "box_color", "attach": ["view"], "left": 100, "top": 100, "clones": [], "preset": "box"}), "circle": $hash2(["type", "width", "height", "smooth", "attached", "attach", "left", "top", "clones", "preset"], {"type": "shape", "width": 99, "height": 99, "smooth": "100%", "attached": "circle_color", "attach": ["view"], "left": 100, "top": 100, "clones": [], "preset": "circle"}), "shape": $hash2(["type", "width", "height", "attached", "attach", "left", "top", "clones"], {"type": "shape", "width": 99, "height": 99, "attached": "shape_color", "attach": ["view"], "left": 100, "top": 100, "clones": []}), "text": $hash2(["type", "visual", "attached", "attach", "data", "width", "height", "clones"], {"type": "text", "visual": $hash2(["size"], {"size": 25}), "attached": "text_color", "attach": ["view"], "data": "this is a text sample", "width": 199, "height": 33, "clones": []}), "drm": $hash2(["type", "attach"], {"type": "drm", "attach": ["black_matter"]}), "shadow": $hash2(["type", "attach"], {"type": "shadow", "attach": ["black_matter"]}), "color": $hash2(["type", "attach", "red", "green", "blue", "alpha"], {"type": "color", "attach": ["black_matter"], "red": 0, "green": 0, "blue": 0, "alpha": 1})});
    $defs(self, '$default_params', $return_ivar("default_params"));
    $defs(self, '$new_default_params', function $$new_default_params(new_default) {
      var self = this;
      if (self.default_params == null) self.default_params = nil;

      return self.default_params['$merge!'](new_default)
    });
    
    $def(self, '$validation', function $$validation(atome_instance_var) {
      
      if ($truthy(atome_instance_var)) {
        return true
      } else {
        return nil
      }
    });
    return $def(self, '$add_essential_drm', function $$add_essential_drm(params) {
      var $a, essential_drm = nil;

      
      essential_drm = $hash2(["authorisation", "atome"], {"authorisation": $hash2(["read", "write"], {"read": [$$('Atome').$current_user()], "write": [$$('Atome').$current_user()]}), "atome": $hash2(["read", "write"], {"read": ["all"], "write": ["me"]})});
      return ($a = ["drm", ($truthy(params['$[]']("drm")) ? (essential_drm.$merge(params['$[]']("drm"))) : (essential_drm))], $send(params, '[]=', $a), $a[$a.length - 1]);
    });
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/renderer"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('private,[],each,send,to_proc');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    var $proto = self.$$prototype;

    $proto.atome = nil;
    
    self.$private();
    return $def(self, '$rendering', function $$rendering(element, params) {
      var user_proc = $$rendering.$$p || nil, self = this, render_engines = nil;

      $$rendering.$$p = null;
      
      ;
      render_engines = self.atome['$[]']("renderers");
      return $send(render_engines, 'each', [], function $$1(render_engine){var self = $$1.$$s == null ? this : $$1.$$s;

        
        if (render_engine == null) render_engine = nil;
        return $send(self, 'send', ["" + (render_engine) + "_" + (element), params], user_proc.$to_proc());}, {$$s: self});
    });
  })($nesting[0], null)
};

Opal.modules["atome/helpers/color_helper/color/rgb/metallic"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $module = Opal.module, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('private,__named_color,new,metallic');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting);

    
    $module($nesting[0], 'Metallic');
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      self.$private();
      return $def(self, '$metallic', function $$metallic(rgb, $a) {
        var $post_args, names, self = this;

        
        $post_args = $slice(arguments, 1);
        names = $post_args;
        return $send(self, '__named_color', [$$('Metallic'), $send(self, 'new', $to_a(rgb))].concat($to_a(names)));
      }, -2);
    })(Opal.get_singleton_class(self), $nesting);
    self.$metallic([153, 153, 153], "Aluminum");
    self.$metallic([217, 135, 25], "CoolCopper");
    self.$metallic([184, 115, 51], "Copper");
    self.$metallic([76, 76, 76], "Iron");
    self.$metallic([25, 25, 25], "Lead");
    self.$metallic([179, 179, 179], "Magnesium");
    self.$metallic([230, 230, 230], "Mercury");
    self.$metallic([128, 128, 128], "Nickel");
    self.$metallic([96, 0, 0], "PolySilicon", "Poly");
    self.$metallic([204, 204, 204], "Silver");
    self.$metallic([102, 102, 102], "Steel");
    self.$metallic([127, 127, 127], "Tin");
    return self.$metallic([51, 51, 51], "Tungsten");
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/helpers/color_helper/color/rgb/colors"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('private,__named_color,new,named,require');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting);

    
    (function(self, $parent_nesting) {
      
      
      self.$private();
      return $def(self, '$named', function $$named(rgb, $a) {
        var $post_args, names, self = this;

        
        $post_args = $slice(arguments, 1);
        names = $post_args;
        return $send(self, '__named_color', [self, $send(self, 'new', $to_a(rgb))].concat($to_a(names)));
      }, -2);
    })(Opal.get_singleton_class(self), $nesting);
    self.$named([240, 248, 255], "AliceBlue");
    self.$named([250, 235, 215], "AntiqueWhite");
    self.$named([0, 255, 255], "Aqua");
    self.$named([127, 255, 212], "Aquamarine");
    self.$named([240, 255, 255], "Azure");
    self.$named([245, 245, 220], "Beige");
    self.$named([255, 228, 196], "Bisque");
    self.$named([102, 51, 153], "RebeccaPurple", "BeccaPurple");
    self.$named([0, 0, 0], "Black");
    self.$named([255, 235, 205], "BlanchedAlmond");
    self.$named([0, 0, 255], "Blue");
    self.$named([138, 43, 226], "BlueViolet");
    self.$named([165, 42, 42], "Brown");
    self.$named([222, 184, 135], "BurlyWood", "Burlywood");
    self.$named([95, 158, 160], "CadetBlue");
    self.$named([255, 94, 208], "Carnation");
    self.$named([141, 0, 0], "Cayenne");
    self.$named([127, 255, 0], "Chartreuse");
    self.$named([210, 105, 30], "Chocolate");
    self.$named([255, 127, 80], "Coral");
    self.$named([100, 149, 237], "CornflowerBlue");
    self.$named([255, 248, 220], "Cornsilk");
    self.$named([220, 20, 60], "Crimson");
    self.$named([0, 255, 255], "Cyan");
    self.$named([0, 0, 139], "DarkBlue");
    self.$named([0, 139, 139], "DarkCyan");
    self.$named([184, 134, 11], "DarkGoldenRod", "DarkGoldenrod");
    self.$named([169, 169, 169], "DarkGray", "DarkGrey");
    self.$named([0, 100, 0], "DarkGreen");
    self.$named([189, 183, 107], "DarkKhaki");
    self.$named([139, 0, 139], "DarkMagenta");
    self.$named([85, 107, 47], "DarkOliveGreen", "DarkoliveGreen");
    self.$named([255, 140, 0], "DarkOrange");
    self.$named([153, 50, 204], "DarkOrchid");
    self.$named([139, 0, 0], "DarkRed");
    self.$named([233, 150, 122], "DarkSalmon", "Darksalmon");
    self.$named([143, 188, 143], "DarkSeaGreen");
    self.$named([72, 61, 139], "DarkSlateBlue");
    self.$named([47, 79, 79], "DarkSlateGray", "DarkSlateGrey");
    self.$named([0, 206, 209], "DarkTurquoise");
    self.$named([148, 0, 211], "DarkViolet");
    self.$named([255, 140, 0], "Darkorange");
    self.$named([255, 20, 147], "DeepPink");
    self.$named([0, 191, 191], "DeepSkyBlue");
    self.$named([105, 105, 105], "DimGray", "DimGrey");
    self.$named([30, 144, 255], "DodgerBlue");
    self.$named([209, 146, 117], "Feldspar");
    self.$named([178, 34, 34], "FireBrick", "Firebrick");
    self.$named([255, 250, 240], "FloralWhite");
    self.$named([34, 139, 34], "ForestGreen");
    self.$named([255, 0, 255], "Fuchsia");
    self.$named([220, 220, 220], "Gainsboro");
    self.$named([248, 248, 255], "GhostWhite");
    self.$named([255, 215, 0], "Gold");
    self.$named([218, 165, 32], "GoldenRod", "Goldenrod");
    self.$named([128, 128, 128], "Gray", "Grey");
    self.$named([10, 10, 10, 100.0], "Gray10", "Grey10");
    self.$named([20, 20, 20, 100.0], "Gray20", "Grey20");
    self.$named([30, 30, 30, 100.0], "Gray30", "Grey30");
    self.$named([40, 40, 40, 100.0], "Gray40", "Grey40");
    self.$named([50, 50, 50, 100.0], "Gray50", "Grey50");
    self.$named([60, 60, 60, 100.0], "Gray60", "Grey60");
    self.$named([70, 70, 70, 100.0], "Gray70", "Grey70");
    self.$named([80, 80, 80, 100.0], "Gray80", "Grey80");
    self.$named([90, 90, 90, 100.0], "Gray90", "Grey90");
    self.$named([0, 128, 0], "Green");
    self.$named([173, 255, 47], "GreenYellow");
    self.$named([240, 255, 240], "HoneyDew", "Honeydew");
    self.$named([255, 105, 180], "HotPink");
    self.$named([205, 92, 92], "IndianRed");
    self.$named([75, 0, 130], "Indigo");
    self.$named([255, 255, 240], "Ivory");
    self.$named([240, 230, 140], "Khaki");
    self.$named([230, 230, 250], "Lavender");
    self.$named([255, 240, 245], "LavenderBlush");
    self.$named([124, 252, 0], "LawnGreen");
    self.$named([255, 250, 205], "LemonChiffon");
    self.$named([173, 216, 230], "LightBlue");
    self.$named([240, 128, 128], "LightCoral");
    self.$named([224, 255, 255], "LightCyan");
    self.$named([250, 250, 210], "LightGoldenRodYellow", "LightGoldenrodYellow");
    self.$named([211, 211, 211], "LightGray", "LightGrey");
    self.$named([144, 238, 144], "LightGreen");
    self.$named([255, 182, 193], "LightPink");
    self.$named([255, 160, 122], "LightSalmon", "Lightsalmon");
    self.$named([32, 178, 170], "LightSeaGreen");
    self.$named([135, 206, 250], "LightSkyBlue");
    self.$named([132, 112, 255], "LightSlateBlue");
    self.$named([119, 136, 153], "LightSlateGray", "LightSlateGrey");
    self.$named([176, 196, 222], "LightSteelBlue", "LightsteelBlue");
    self.$named([255, 255, 224], "LightYellow");
    self.$named([0, 255, 0], "Lime");
    self.$named([50, 205, 50], "LimeGreen");
    self.$named([250, 240, 230], "Linen");
    self.$named([255, 0, 255], "Magenta");
    self.$named([128, 0, 0], "Maroon");
    self.$named([102, 205, 170], "MediumAquaMarine", "MediumAquamarine");
    self.$named([0, 0, 205], "MediumBlue");
    self.$named([186, 85, 211], "MediumOrchid");
    self.$named([147, 112, 219], "MediumPurple");
    self.$named([60, 179, 113], "MediumSeaGreen");
    self.$named([123, 104, 238], "MediumSlateBlue");
    self.$named([0, 250, 154], "MediumSpringGreen");
    self.$named([72, 209, 204], "MediumTurquoise");
    self.$named([199, 21, 133], "MediumVioletRed");
    self.$named([25, 25, 112], "MidnightBlue");
    self.$named([245, 255, 250], "MintCream");
    self.$named([255, 228, 225], "MistyRose");
    self.$named([255, 228, 181], "Moccasin");
    self.$named([255, 222, 173], "NavajoWhite");
    self.$named([0, 0, 128], "Navy");
    self.$named([253, 245, 230], "OldLace");
    self.$named([128, 128, 0], "Olive");
    self.$named([107, 142, 35], "OliveDrab", "Olivedrab");
    self.$named([255, 165, 0], "Orange");
    self.$named([255, 69, 0], "OrangeRed");
    self.$named([218, 112, 214], "Orchid");
    self.$named([238, 232, 170], "PaleGoldenRod", "PaleGoldenrod");
    self.$named([152, 251, 152], "PaleGreen");
    self.$named([175, 238, 238], "PaleTurquoise");
    self.$named([219, 112, 147], "PaleVioletRed");
    self.$named([255, 239, 213], "PapayaWhip");
    self.$named([255, 218, 185], "PeachPuff", "Peachpuff");
    self.$named([205, 133, 63], "Peru");
    self.$named([255, 192, 203], "Pink");
    self.$named([221, 160, 221], "Plum");
    self.$named([176, 224, 230], "PowderBlue");
    self.$named([128, 0, 128], "Purple");
    self.$named([255, 0, 0], "Red");
    self.$named([188, 143, 143], "RosyBrown");
    self.$named([65, 105, 225], "RoyalBlue");
    self.$named([139, 69, 19], "SaddleBrown");
    self.$named([250, 128, 114], "Salmon");
    self.$named([244, 164, 96], "SandyBrown");
    self.$named([46, 139, 87], "SeaGreen");
    self.$named([255, 245, 238], "SeaShell", "Seashell");
    self.$named([160, 82, 45], "Sienna");
    self.$named([192, 192, 192], "Silver");
    self.$named([135, 206, 235], "SkyBlue");
    self.$named([106, 90, 205], "SlateBlue");
    self.$named([112, 128, 144], "SlateGray", "SlateGrey");
    self.$named([255, 250, 250], "Snow");
    self.$named([0, 255, 127], "SpringGreen");
    self.$named([70, 130, 180], "SteelBlue");
    self.$named([210, 180, 140], "Tan");
    self.$named([0, 128, 128], "Teal");
    self.$named([216, 191, 216], "Thistle");
    self.$named([255, 99, 71], "Tomato");
    self.$named([64, 224, 208], "Turquoise");
    self.$named([238, 130, 238], "Violet");
    self.$named([208, 32, 144], "VioletRed");
    self.$named([245, 222, 179], "Wheat");
    self.$named([255, 255, 255], "White");
    self.$named([245, 245, 245], "WhiteSmoke");
    self.$named([255, 255, 0], "Yellow");
    return self.$named([154, 205, 50], "YellowGreen");
  })($$('Color'), null, $nesting);
  return self.$require("atome/helpers/color_helper/color/rgb/metallic");
};

Opal.modules["atome/helpers/color_helper/color/rgb"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $to_ary = Opal.to_ary, $send = Opal.send, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $rb_times = Opal.rb_times, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $rb_lt = Opal.rb_lt, $hash2 = Opal.hash2, $alias = Opal.alias, $eqeqeq = Opal.eqeqeq, $return_ivar = Opal.return_ivar, $to_a = Opal.to_a, $slice = Opal.slice, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,to_rgb,map,normalize,/,call,%,round,*,>,hex,red_p,green_p,blue_p,css_hsl,to_hsl,css_hsla,-,to_f,min,brightness,max,from_fraction,+,near_zero?,near_zero_or_less?,==,<,downcase,to_s,raise,**,to_xyz,[],mix_with,dup,r=,r,g=,g,b=,b,y,to_yiq,l,to_grayscale,normalize_percent,l=,s=,s,h=,h,flatten,empty?,===,to_lab,each,delta_e94,values_at,sqrt,class,-@,max_rgb_as_grayscale,html,instance_variable_set,private,new,to_proc,alias_method,scan,size,to_i,each_slice,join,fetch,__by_hex,html_hexify,from_html,__by_name,by_name,by_hex,union,keys,by_css,constants,length,const_set,names=,names,[]=,freeze,require');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RGB');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.r = $proto.g = $proto.b = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %.3f %.3f %s");
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_rgb()
    });
    
    $def(self, '$initialize', function $$initialize(r, g, b, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (r == null) r = 0;
      if (g == null) g = 0;
      if (b == null) b = 0;
      if (radix == null) radix = 255.0;
      $b = $send([r, g, b], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}), $a = $to_ary($b), (self.r = ($a[0] == null ? nil : $a[0])), (self.g = ($a[1] == null ? nil : $a[1])), (self.b = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(block)) {
        return block.$call(self)
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.r, self.g, self.b, "rg"])
    });
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.r, self.g, self.b, "RG"])
    });
    
    $def(self, '$hex', function $$hex() {
      var self = this, r = nil, g = nil, b = nil;

      
      r = $rb_times(self.r, 255).$round();
      if ($truthy($rb_gt(r, 255))) {
        r = 255
      };
      g = $rb_times(self.g, 255).$round();
      if ($truthy($rb_gt(g, 255))) {
        g = 255
      };
      b = $rb_times(self.b, 255).$round();
      if ($truthy($rb_gt(b, 255))) {
        b = 255
      };
      return "%02x%02x%02x"['$%']([r, g, b]);
    });
    
    $def(self, '$html', function $$html() {
      var self = this;

      return "#" + (self.$hex())
    });
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return "rgb(%3.2f%%, %3.2f%%, %3.2f%%)"['$%']([self.$red_p(), self.$green_p(), self.$blue_p()])
    });
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return "rgba(%3.2f%%, %3.2f%%, %3.2f%%, %3.2f)"['$%']([self.$red_p(), self.$green_p(), self.$blue_p(), alpha]);
    }, -1);
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    });
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    });
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this, c = nil, m = nil, y = nil, k = nil;

      
      c = $rb_minus(1.0, self.r.$to_f());
      m = $rb_minus(1.0, self.g.$to_f());
      y = $rb_minus(1.0, self.b.$to_f());
      k = [c, m, y].$min();
      k = $rb_minus(k, $rb_times(k, self.$brightness()));
      c = [1.0, [0.0, $rb_minus(c, k)].$max()].$min();
      m = [1.0, [0.0, $rb_minus(m, k)].$max()].$min();
      y = [1.0, [0.0, $rb_minus(y, k)].$max()].$min();
      k = [1.0, [0.0, k].$max()].$min();
      return $$$($$('Color'), 'CMYK').$from_fraction(c, m, y, k);
    });
    
    $def(self, '$to_rgb', function $$to_rgb(ignored) {
      var self = this;

      
      if (ignored == null) ignored = nil;
      return self;
    }, -1);
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this, y = nil, i = nil, q = nil;

      
      y = $rb_plus($rb_plus($rb_times(self.r, 0.299), $rb_times(self.g, 0.587)), $rb_times(self.b, 0.114));
      i = $rb_plus($rb_plus($rb_times(self.r, 0.596), $rb_times(self.g, -0.275)), $rb_times(self.b, -0.321));
      q = $rb_plus($rb_plus($rb_times(self.r, 0.212), $rb_times(self.g, -0.523)), $rb_times(self.b, 0.311));
      return $$$($$('Color'), 'YIQ').$from_fraction(y, i, q);
    });
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this, min = nil, max = nil, delta = nil, lum = nil, hue = nil, sat = nil, sixth = nil;

      
      min = [self.r, self.g, self.b].$min();
      max = [self.r, self.g, self.b].$max();
      delta = $rb_minus(max, min).$to_f();
      lum = $rb_divide($rb_plus(max, min), 2.0);
      if ($truthy($$('Color')['$near_zero?'](delta))) {
        
        hue = 0;
        sat = 0;
      } else {
        
        if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus(lum, 0.5)))) {
          sat = $rb_divide(delta, $rb_plus(max, min).$to_f())
        } else {
          sat = $rb_divide(delta, $rb_minus($rb_minus(2, max), min).$to_f())
        };
        sixth = $rb_divide(1, 6.0);
        if ($eqeq(self.r, max)) {
          
          hue = $rb_times(sixth, $rb_divide($rb_minus(self.g, self.b), delta));
          if ($truthy($rb_lt(self.g, self.b))) {
            hue = $rb_plus(hue, 1.0)
          };
        } else if ($eqeq(self.g, max)) {
          hue = $rb_plus($rb_times(sixth, $rb_divide($rb_minus(self.b, self.r), delta)), $rb_divide(1.0, 3.0))
        } else if ($eqeq(self.b, max)) {
          hue = $rb_plus($rb_times(sixth, $rb_divide($rb_minus(self.r, self.g), delta)), $rb_divide(2.0, 3.0))
        };
        if ($truthy($rb_lt(hue, 0))) {
          hue = $rb_plus(hue, 1)
        };
        if ($truthy($rb_gt(hue, 1))) {
          hue = $rb_minus(hue, 1)
        };
      };
      return $$$($$('Color'), 'HSL').$from_fraction(hue, sat, lum);
    });
    
    $def(self, '$to_xyz', function $$to_xyz(color_space) {
      var $a, $b, self = this, r = nil, g = nil, b = nil;

      
      if (color_space == null) color_space = "sRGB";
      if (!$eqeq(color_space.$to_s().$downcase(), "srgb")) {
        self.$raise($$('ArgumentError'), "Unsupported colour space " + (color_space) + ".")
      };
      $b = $send([self.r, self.g, self.b], 'map', [], function $$2(v){
        
        if (v == null) v = nil;
        if ($truthy($rb_gt(v, 0.04045))) {
          return $rb_times($rb_divide($rb_plus(v, 0.055), 1.055)['$**'](2.4), 100)
        } else {
          return $rb_times($rb_divide(v, 12.92), 100)
        };}), $a = $to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (g = ($a[1] == null ? nil : $a[1])), (b = ($a[2] == null ? nil : $a[2])), $b;
      return $hash2(["x", "y", "z"], {"x": $rb_plus($rb_plus($rb_times(r, 0.4124564), $rb_times(g, 0.3575761)), $rb_times(b, 0.1804375)), "y": $rb_plus($rb_plus($rb_times(r, 0.2126729), $rb_times(g, 0.7151522)), $rb_times(b, 0.072175)), "z": $rb_plus($rb_plus($rb_times(r, 0.0193339), $rb_times(g, 0.119192)), $rb_times(b, 0.9503041))});
    }, -1);
    
    $def(self, '$to_lab', function $$to_lab(color_space, reference_white) {
      var $a, $b, self = this, xyz = nil, xr = nil, yr = nil, zr = nil, epsilon = nil, kappa = nil, fx = nil, fy = nil, fz = nil;

      
      if (color_space == null) color_space = "sRGB";
      if (reference_white == null) reference_white = [95.047, 100.0, 108.883];
      xyz = self.$to_xyz();
      xr = $rb_divide(xyz['$[]']("x"), reference_white['$[]'](0));
      yr = $rb_divide(xyz['$[]']("y"), reference_white['$[]'](1));
      zr = $rb_divide(xyz['$[]']("z"), reference_white['$[]'](2));
      epsilon = $rb_divide(216, 24389.0);
      kappa = $rb_divide(24389, 27.0);
      $b = $send([xr, yr, zr], 'map', [], function $$3(t){
        
        if (t == null) t = nil;
        if ($truthy($rb_gt(t, epsilon))) {
          return t['$**']($rb_divide(1.0, 3))
        } else {
          return $rb_divide($rb_plus($rb_times(kappa, t), 16), 116.0)
        };}), $a = $to_ary($b), (fx = ($a[0] == null ? nil : $a[0])), (fy = ($a[1] == null ? nil : $a[1])), (fz = ($a[2] == null ? nil : $a[2])), $b;
      return $hash2(["L", "a", "b"], {"L": $rb_minus($rb_times(116, fy), 16), "a": $rb_times(500, $rb_minus(fx, fy)), "b": $rb_times(200, $rb_minus(fy, fz))});
    }, -1);
    
    $def(self, '$lighten_by', function $$lighten_by(percent) {
      var self = this;

      return self.$mix_with($$('White'), percent)
    });
    
    $def(self, '$darken_by', function $$darken_by(percent) {
      var self = this;

      return self.$mix_with($$('Black'), percent)
    });
    
    $def(self, '$mix_with', function $$mix_with(mask, opacity) {
      var self = this, rgb = nil;

      
      opacity = $rb_divide(opacity, 100.0);
      rgb = self.$dup();
      rgb['$r=']($rb_plus($rb_times(self.r, opacity), $rb_times(mask.$r(), $rb_minus(1, opacity))));
      rgb['$g=']($rb_plus($rb_times(self.g, opacity), $rb_times(mask.$g(), $rb_minus(1, opacity))));
      rgb['$b=']($rb_plus($rb_times(self.b, opacity), $rb_times(mask.$b(), $rb_minus(1, opacity))));
      return rgb;
    });
    
    $def(self, '$brightness', function $$brightness() {
      var self = this;

      return self.$to_yiq().$y()
    });
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction(self.$to_hsl().$l())
    });
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$adjust_brightness', function $$adjust_brightness(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$l=']($rb_times(hsl.$l(), percent));
      return hsl.$to_rgb();
    });
    
    $def(self, '$adjust_saturation', function $$adjust_saturation(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$s=']($rb_times(hsl.$s(), percent));
      return hsl.$to_rgb();
    });
    
    $def(self, '$adjust_hue', function $$adjust_hue(percent) {
      var self = this, hsl = nil;

      
      percent = self.$normalize_percent(percent);
      hsl = self.$to_hsl();
      hsl['$h=']($rb_times(hsl.$h(), percent));
      return hsl.$to_rgb();
    });
    
    $def(self, '$closest_match', function $$closest_match(color_list, threshold_distance) {
      var self = this, $ret_or_1 = nil, lab = nil, closest_distance = nil, best_match = nil;

      
      if (threshold_distance == null) threshold_distance = 1000.0;
      color_list = [color_list].$flatten(1);
      if ($truthy(color_list['$empty?']())) {
        return nil
      };
      threshold_distance = (($eqeqeq("jnd", ($ret_or_1 = threshold_distance)) || ($eqeqeq("just_noticeable", $ret_or_1))) ? (2.3) : (threshold_distance.$to_f()));
      lab = self.$to_lab();
      closest_distance = threshold_distance;
      best_match = nil;
      $send(color_list, 'each', [], function $$4(c){var self = $$4.$$s == null ? this : $$4.$$s, distance = nil;

        
        if (c == null) c = nil;
        distance = self.$delta_e94(lab, c.$to_lab());
        if ($truthy($rb_lt(distance, closest_distance))) {
          
          closest_distance = distance;
          return (best_match = c);
        } else {
          return nil
        };}, {$$s: self});
      return best_match;
    }, -2);
    
    $def(self, '$delta_e94', function $$delta_e94(color_1, color_2, weighting_type) {
      var $a, $b, self = this, k_1 = nil, k_2 = nil, k_L = nil, k_C = nil, k_H = nil, l_1 = nil, a_1 = nil, b_1 = nil, l_2 = nil, a_2 = nil, b_2 = nil, delta_a = nil, delta_b = nil, c_1 = nil, c_2 = nil, delta_L = nil, delta_C = nil, delta_H2 = nil, s_L = nil, s_C = nil, s_H = nil, composite_L = nil, composite_C = nil, composite_H = nil;

      
      if (weighting_type == null) weighting_type = "graphic_arts";
      
      switch (weighting_type) {
        case "graphic_arts":
          
          k_1 = 0.045;
          k_2 = 0.015;
          k_L = 1;
          break;
        case "textiles":
          
          k_1 = 0.048;
          k_2 = 0.014;
          k_L = 2;
          break;
        default:
          self.$raise($$('ArgumentError'), "Unsupported weighting type " + (weighting_type) + ".")
      };
      k_C = (k_H = 1);
      $b = color_1.$values_at("L", "a", "b"), $a = $to_ary($b), (l_1 = ($a[0] == null ? nil : $a[0])), (a_1 = ($a[1] == null ? nil : $a[1])), (b_1 = ($a[2] == null ? nil : $a[2])), $b;
      $b = color_2.$values_at("L", "a", "b"), $a = $to_ary($b), (l_2 = ($a[0] == null ? nil : $a[0])), (a_2 = ($a[1] == null ? nil : $a[1])), (b_2 = ($a[2] == null ? nil : $a[2])), $b;
      delta_a = $rb_minus(a_1, a_2);
      delta_b = $rb_minus(b_1, b_2);
      c_1 = $$('Math').$sqrt($rb_plus(a_1['$**'](2), b_1['$**'](2)));
      c_2 = $$('Math').$sqrt($rb_plus(a_2['$**'](2), b_2['$**'](2)));
      delta_L = $rb_minus(color_1['$[]']("L"), color_2['$[]']("L"));
      delta_C = $rb_minus(c_1, c_2);
      delta_H2 = $rb_minus($rb_plus(delta_a['$**'](2), delta_b['$**'](2)), delta_C['$**'](2));
      s_L = 1;
      s_C = $rb_plus(1, $rb_times(k_1, c_1));
      s_H = $rb_plus(1, $rb_times(k_2, c_1));
      composite_L = $rb_divide(delta_L, $rb_times(k_L, s_L))['$**'](2);
      composite_C = $rb_divide(delta_C, $rb_times(k_C, s_C))['$**'](2);
      composite_H = $rb_divide(delta_H2, $rb_times(k_H, s_H)['$**'](2));
      return $$('Math').$sqrt($rb_plus($rb_plus(composite_L, composite_C), composite_H));
    }, -3);
    
    $def(self, '$red', function $$red() {
      var self = this;

      return $rb_times(self.r, 255.0)
    });
    
    $def(self, '$red_p', function $$red_p() {
      var self = this;

      return $rb_times(self.r, 100.0)
    });
    
    $def(self, '$r', $return_ivar("r"));
    
    $def(self, '$red=', function $RGB_red$eq$5(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize($rb_divide(rr, 255.0)))
    });
    
    $def(self, '$red_p=', function $RGB_red_p$eq$6(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize($rb_divide(rr, 100.0)))
    });
    
    $def(self, '$r=', function $RGB_r$eq$7(rr) {
      var self = this;

      return (self.r = $$('Color').$normalize(rr))
    });
    
    $def(self, '$green', function $$green() {
      var self = this;

      return $rb_times(self.g, 255.0)
    });
    
    $def(self, '$green_p', function $$green_p() {
      var self = this;

      return $rb_times(self.g, 100.0)
    });
    
    $def(self, '$g', $return_ivar("g"));
    
    $def(self, '$green=', function $RGB_green$eq$8(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 255.0)))
    });
    
    $def(self, '$green_p=', function $RGB_green_p$eq$9(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 100.0)))
    });
    
    $def(self, '$g=', function $RGB_g$eq$10(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize(gg))
    });
    
    $def(self, '$blue', function $$blue() {
      var self = this;

      return $rb_times(self.b, 255.0)
    });
    
    $def(self, '$blue_p', function $$blue_p() {
      var self = this;

      return $rb_times(self.b, 100.0)
    });
    
    $def(self, '$b', $return_ivar("b"));
    
    $def(self, '$blue=', function $RGB_blue$eq$11(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize($rb_divide(bb, 255.0)))
    });
    
    $def(self, '$blue_p=', function $RGB_blue_p$eq$12(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize($rb_divide(bb, 100.0)))
    });
    
    $def(self, '$b=', function $RGB_b$eq$13(bb) {
      var self = this;

      return (self.b = $$('Color').$normalize(bb))
    });
    
    $def(self, '$+', function $RGB_$plus$14(other) {
      var self = this;

      return self.$class().$from_fraction($rb_plus(self.$r(), other.$r()), $rb_plus(self.$g(), other.$g()), $rb_plus(self.$b(), other.$b()))
    });
    
    $def(self, '$-', function $RGB_$minus$15(other) {
      var self = this;

      return $rb_plus(self, other['$-@']())
    });
    
    $def(self, '$max_rgb_as_grayscale', function $$max_rgb_as_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction([self.r, self.g, self.b].$max())
    });
    $alias(self, "max_rgb_as_greyscale", "max_rgb_as_grayscale");
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "RGB [" + (self.$html()) + "]"
    });
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$r(), self.$g(), self.$b()]
    });
    
    $def(self, '$-@', function $RGB_$minus$$16() {
      var self = this, rgb = nil;

      
      rgb = self.$dup();
      rgb.$instance_variable_set("@r", rgb.$r()['$-@']());
      rgb.$instance_variable_set("@g", rgb.$g()['$-@']());
      rgb.$instance_variable_set("@b", rgb.$b()['$-@']());
      return rgb;
    });
    self.$private();
    return $def(self, '$normalize_percent', function $$normalize_percent(percent) {
      
      
      percent = $rb_divide(percent, 100.0);
      percent = $rb_plus(percent, 1.0);
      percent = [percent, 2.0].$min();
      return [0.0, percent].$max();
    });
  })($$('Color'), null, $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$from_percentage', function $$from_percentage(r, g, b) {
      var block = $$from_percentage.$$p || nil, self = this;

      $$from_percentage.$$p = null;
      
      ;
      if (r == null) r = 0;
      if (g == null) g = 0;
      if (b == null) b = 0;
      return $send(self, 'new', [r, g, b, 100.0], block.$to_proc());
    }, -1);
    
    $def(self, '$from_fraction', function $$from_fraction(r, g, b) {
      var block = $$from_fraction.$$p || nil, self = this;

      $$from_fraction.$$p = null;
      
      ;
      if (r == null) r = 0.0;
      if (g == null) g = 0.0;
      if (b == null) b = 0.0;
      return $send(self, 'new', [r, g, b, 1.0], block.$to_proc());
    }, -1);
    
    $def(self, '$from_grayscale_fraction', function $$from_grayscale_fraction(l) {
      var block = $$from_grayscale_fraction.$$p || nil, self = this;

      $$from_grayscale_fraction.$$p = null;
      
      ;
      if (l == null) l = 0.0;
      return $send(self, 'new', [l, l, l, 1.0], block.$to_proc());
    }, -1);
    self.$alias_method("from_greyscale_fraction", "from_grayscale_fraction");
    
    $def(self, '$from_html', function $$from_html(html_colour) {
      var block = $$from_html.$$p || nil, self = this, h = nil;

      $$from_html.$$p = null;
      
      ;
      h = html_colour.$scan(/[0-9a-f]/i);
      
      switch (h.$size()) {
        case 3:
          return $send(self, 'new', $to_a($send(h, 'map', [], function $$17(v){
            
            if (v == null) v = nil;
            return $rb_times(v, 2).$to_i(16);})), block.$to_proc())
        case 6:
          return $send(self, 'new', $to_a($send(h.$each_slice(2), 'map', [], function $$18(v){
            
            if (v == null) v = nil;
            return v.$join().$to_i(16);})), block.$to_proc())
        default:
          return self.$raise($$('ArgumentError'), "Not a supported HTML colour type.")
      };
    });
    
    $def(self, '$by_hex', function $$by_hex(hex) {
      var block = $$by_hex.$$p || nil, self = this;

      $$by_hex.$$p = null;
      
      ;
      try {
        return $send(self.$__by_hex(), 'fetch', [self.$html_hexify(hex)], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;

          return self.$from_html(hex)}, {$$s: self})
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {
          try {
            if ($truthy(block)) {
              return block.$call()
            } else {
              return self.$raise()
            }
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };
    });
    
    $def(self, '$by_name', function $$by_name(name) {
      var block = $$by_name.$$p || nil, self = this;

      $$by_name.$$p = null;
      
      ;
      return $send(self.$__by_name(), 'fetch', [name.$to_s().$downcase()], block.$to_proc());
    });
    
    $def(self, '$by_css', function $$by_css(name_or_hex) {
      var block = $$by_css.$$p || nil, self = this;

      $$by_css.$$p = null;
      
      ;
      return $send(self, 'by_name', [name_or_hex], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;

        return $send(self, 'by_hex', [name_or_hex], block.$to_proc())}, {$$s: self});
    });
    return $def(self, '$extract_colors', function $$extract_colors(text, mode) {
      var self = this, regex = nil, $ret_or_1 = nil;

      
      if (mode == null) mode = "both";
      text = text.$downcase();
      regex = ($eqeqeq("name", ($ret_or_1 = mode)) ? ($$('Regexp').$union(self.$__by_name().$keys())) : ($eqeqeq("hex", $ret_or_1) ? ($$('Regexp').$union(self.$__by_hex().$keys())) : ($eqeqeq("both", $ret_or_1) ? ($$('Regexp').$union($rb_plus(self.$__by_hex().$keys(), self.$__by_name().$keys()))) : (nil))));
      return $send(text.$scan(regex), 'map', [], function $$21(match){var self = $$21.$$s == null ? this : $$21.$$s;

        
        if (match == null) match = nil;
        
        switch (mode) {
          case "name":
            return self.$by_name(match)
          case "hex":
            return self.$by_hex(match)
          case "both":
            return self.$by_css(match)
          default:
            return nil
        };}, {$$s: self});
    }, -2);
  })(Opal.get_singleton_class($$$($$('Color'), 'RGB')), $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$private();
    
    $def(self, '$__named_color', function $$__named_color(mod, rgb, $a) {
      var $post_args, names, self = this, used = nil;

      
      $post_args = $slice(arguments, 2);
      names = $post_args;
      used = $rb_minus(names, $send(mod.$constants(), 'map', [], "to_sym".$to_proc()));
      if ($truthy($rb_lt(used.$length(), names.$length()))) {
        self.$raise($$('ArgumentError'), "" + (names.$join(", ")) + " already defined in " + (mod))
      };
      $send(names, 'each', [], function $$22(n){
        
        if (n == null) n = nil;
        return mod.$const_set(n, rgb);});
      rgb['$names='](names);
      $send(rgb.$names(), 'each', [], function $$23(n){var $b, self = $$23.$$s == null ? this : $$23.$$s;

        
        if (n == null) n = nil;
        return ($b = [n, rgb], $send(self.$__by_name(), '[]=', $b), $b[$b.length - 1]);}, {$$s: self});
      self.$__by_hex()['$[]='](rgb.$hex(), rgb);
      return rgb.$freeze();
    }, -3);
    
    $def(self, '$__by_hex', function $$__by_hex() {
      var self = this, $ret_or_1 = nil;
      if (self.__by_hex == null) self.__by_hex = nil;

      return (self.__by_hex = ($truthy(($ret_or_1 = self.__by_hex)) ? ($ret_or_1) : ($hash2([], {}))))
    });
    
    $def(self, '$__by_name', function $$__by_name() {
      var self = this, $ret_or_1 = nil;
      if (self.__by_name == null) self.__by_name = nil;

      return (self.__by_name = ($truthy(($ret_or_1 = self.__by_name)) ? ($ret_or_1) : ($hash2([], {}))))
    });
    return $def(self, '$html_hexify', function $$html_hexify(hex) {
      var self = this, h = nil;

      
      h = hex.$to_s().$downcase().$scan(/[0-9a-f]/);
      
      switch (h.$size()) {
        case 3:
          return $send(h, 'map', [], function $$24(v){
            
            if (v == null) v = nil;
            return $rb_times(v, 2);}).$join()
        case 6:
          return h.$join()
        default:
          return self.$raise($$('ArgumentError'), "Not a supported HTML colour type.")
      };
    });
  })(Opal.get_singleton_class($$$($$('Color'), 'RGB')), $nesting);
  return self.$require("atome/helpers/color_helper/color/rgb/colors");
};

Opal.modules["atome/helpers/color_helper/color/cmyk"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $send = Opal.send, $to_ary = Opal.to_ary, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $to_a = Opal.to_a, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,to_cmyk,new,to_proc,map,normalize,/,call,%,html,to_rgb,css_rgb,css_rgba,css_hsl,to_hsl,css_hsla,from_fraction,adobe_cmyk_rgb,standard_cmyk_rgb,*,to_f,-,min,+,to_grayscale,cyan,magenta,yellow,black,to_yiq,c,m,y,k,private');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CMYK');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.c = $proto.m = $proto.y = $proto.k = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %.3f %.3f %.3f %s");
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_cmyk()
    });
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$from_fraction', function $$from_fraction(c, m, y, k) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (c == null) c = 0;
        if (m == null) m = 0;
        if (y == null) y = 0;
        if (k == null) k = 0;
        return $send(self, 'new', [c, m, y, k, 1.0], block.$to_proc());
      }, -1);
      return $def(self, '$from_percent', function $$from_percent(c, m, y, k) {
        var block = $$from_percent.$$p || nil, self = this;

        $$from_percent.$$p = null;
        
        ;
        if (c == null) c = 0;
        if (m == null) m = 0;
        if (y == null) y = 0;
        if (k == null) k = 0;
        return $send(self, 'new', [c, m, y, k], block.$to_proc());
      }, -1);
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(c, m, y, k, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (c == null) c = 0;
      if (m == null) m = 0;
      if (y == null) y = 0;
      if (k == null) k = 0;
      if (radix == null) radix = 100.0;
      $b = $send([c, m, y, k], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}), $a = $to_ary($b), (self.c = ($a[0] == null ? nil : $a[0])), (self.m = ($a[1] == null ? nil : $a[1])), (self.y = ($a[2] == null ? nil : $a[2])), (self.k = ($a[3] == null ? nil : $a[3])), $b;
      if ($truthy(block)) {
        return block.$call(self)
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.c, self.m, self.y, self.k, "k"])
    });
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.c, self.m, self.y, self.k, "K"])
    });
    
    $def(self, '$html', function $$html() {
      var self = this;

      return self.$to_rgb().$html()
    });
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return self.$to_rgb().$css_rgb()
    });
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return self.$to_rgb().$css_rgba(alpha);
    }, -1);
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    });
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    });
    
    $def(self, '$to_rgb', function $$to_rgb(use_adobe_method) {
      var self = this;

      
      if (use_adobe_method == null) use_adobe_method = false;
      if ($truthy(use_adobe_method)) {
        return $send($$$($$('Color'), 'RGB'), 'from_fraction', $to_a(self.$adobe_cmyk_rgb()))
      } else {
        return $send($$$($$('Color'), 'RGB'), 'from_fraction', $to_a(self.$standard_cmyk_rgb()))
      };
    }, -1);
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this, c = nil, m = nil, y = nil, g = nil;

      
      c = $rb_times(0.299, self.c.$to_f());
      m = $rb_times(0.587, self.m.$to_f());
      y = $rb_times(0.114, self.y.$to_f());
      g = $rb_minus(1.0, [1.0, $rb_plus($rb_plus($rb_plus(c, m), y), self.k)].$min());
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    });
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$to_cmyk', $return_self);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "CMYK [%.2f%%, %.2f%%, %.2f%%, %.2f%%]"['$%']([self.$cyan(), self.$magenta(), self.$yellow(), self.$black()])
    });
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this;

      return self.$to_rgb().$to_yiq()
    });
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this;

      return self.$to_rgb().$to_hsl()
    });
    
    $def(self, '$cyan', function $$cyan() {
      var self = this;

      return $rb_times(self.c, 100.0)
    });
    
    $def(self, '$c', $return_ivar("c"));
    
    $def(self, '$cyan=', function $CMYK_cyan$eq$2(cc) {
      var self = this;

      return (self.c = $$('Color').$normalize($rb_divide(cc, 100.0)))
    });
    
    $def(self, '$c=', function $CMYK_c$eq$3(cc) {
      var self = this;

      return (self.c = $$('Color').$normalize(cc))
    });
    
    $def(self, '$magenta', function $$magenta() {
      var self = this;

      return $rb_times(self.m, 100.0)
    });
    
    $def(self, '$m', $return_ivar("m"));
    
    $def(self, '$magenta=', function $CMYK_magenta$eq$4(mm) {
      var self = this;

      return (self.m = $$('Color').$normalize($rb_divide(mm, 100.0)))
    });
    
    $def(self, '$m=', function $CMYK_m$eq$5(mm) {
      var self = this;

      return (self.m = $$('Color').$normalize(mm))
    });
    
    $def(self, '$yellow', function $$yellow() {
      var self = this;

      return $rb_times(self.y, 100.0)
    });
    
    $def(self, '$y', $return_ivar("y"));
    
    $def(self, '$yellow=', function $CMYK_yellow$eq$6(yy) {
      var self = this;

      return (self.y = $$('Color').$normalize($rb_divide(yy, 100.0)))
    });
    
    $def(self, '$y=', function $CMYK_y$eq$7(kk) {
      var self = this;

      return (self.y = $$('Color').$normalize(kk))
    });
    
    $def(self, '$black', function $$black() {
      var self = this;

      return $rb_times(self.k, 100.0)
    });
    
    $def(self, '$k', $return_ivar("k"));
    
    $def(self, '$black=', function $CMYK_black$eq$8(kk) {
      var self = this;

      return (self.k = $$('Color').$normalize($rb_divide(kk, 100.0)))
    });
    
    $def(self, '$k=', function $CMYK_k$eq$9(kk) {
      var self = this;

      return (self.k = $$('Color').$normalize(kk))
    });
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$c(), self.$m(), self.$y(), self.$k()]
    });
    self.$private();
    
    $def(self, '$adobe_cmyk_rgb', function $$adobe_cmyk_rgb() {
      var self = this;

      return $send([self.c, self.m, self.y], 'map', [], function $$10(v){var self = $$10.$$s == null ? this : $$10.$$s;
        if (self.k == null) self.k = nil;

        
        if (v == null) v = nil;
        return $rb_minus(1.0, [1.0, $rb_plus(v, self.k)].$min());}, {$$s: self})
    });
    return $def(self, '$standard_cmyk_rgb', function $$standard_cmyk_rgb() {
      var self = this;

      return $send([self.c, self.m, self.y], 'map', [], function $$11(v){var self = $$11.$$s == null ? this : $$11.$$s;

        
        if (v == null) v = nil;
        return $rb_minus(1.0, $rb_plus($rb_times(v, $rb_minus(1.0, self.$k())), self.$k()));}, {$$s: self})
    });
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/helpers/color_helper/color/grayscale"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, $def = Opal.def, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $alias = Opal.alias, $rb_plus = Opal.rb_plus, $return_ivar = Opal.return_ivar, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,normalize,/,call,to_grayscale,%,min,round,*,private,to_255,gray,css_hsl,to_hsl,css_hsla,-,to_f,from_fraction,g,+,max,gray=,class,-@,dup,instance_variable_set');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GrayScale');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.g = nil;
    
    self.$include($$('Color'));
    $const_set($nesting[0], 'PDF_FORMAT_STR', "%.3f %s");
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$from_fraction', function $$from_fraction(g) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (g == null) g = 0;
        return $send(self, 'new', [g, 1.0], block.$to_proc());
      }, -1);
      return $def(self, '$from_percent', function $$from_percent(g) {
        var block = $$from_percent.$$p || nil, self = this;

        $$from_percent.$$p = null;
        
        ;
        if (g == null) g = 0;
        return $send(self, 'new', [g], block.$to_proc());
      }, -1);
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(g, radix) {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if (g == null) g = 0;
      if (radix == null) radix = 100.0;
      self.g = $$('Color').$normalize($rb_divide(g, radix));
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_grayscale()
    });
    
    $def(self, '$pdf_fill', function $$pdf_fill() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.g, "g"])
    });
    
    $def(self, '$pdf_stroke', function $$pdf_stroke() {
      var self = this;

      return $$('PDF_FORMAT_STR')['$%']([self.g, "G"])
    });
    
    $def(self, '$to_255', function $$to_255() {
      var self = this;

      return [$rb_times(self.g, 255).$round(), 255].$min()
    });
    self.$private("to_255");
    
    $def(self, '$html', function $$html() {
      var self = this, gs = nil;

      
      gs = "%02x"['$%'](self.$to_255());
      return "#" + ($rb_times(gs, 3));
    });
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return "rgb(%3.2f%%, %3.2f%%, %3.2f%%)"['$%']([self.$gray(), self.$gray(), self.$gray()])
    });
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return "rgba(%3.2f%%, %3.2f%%, %3.2f%%, %1.2f)"['$%']([self.$gray(), self.$gray(), self.$gray(), alpha]);
    }, -1);
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return self.$to_hsl().$css_hsl()
    });
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return self.$to_hsl().$css_hsla()
    });
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this, k = nil;

      
      k = $rb_minus(1.0, self.g.$to_f());
      return $$$($$('Color'), 'CMYK').$from_fraction(0, 0, 0, k);
    });
    
    $def(self, '$to_rgb', function $$to_rgb(ignored) {
      var self = this;

      
      if (ignored == null) ignored = true;
      return $$$($$('Color'), 'RGB').$from_fraction(self.$g(), self.$g(), self.$g());
    }, -1);
    
    $def(self, '$to_grayscale', $return_self);
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$lighten_by', function $$lighten_by(percent) {
      var self = this, g = nil;

      
      g = [$rb_plus(self.g, $rb_times(self.g, $rb_divide(percent, 100.0))), 1.0].$min();
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    });
    
    $def(self, '$darken_by', function $$darken_by(percent) {
      var self = this, g = nil;

      
      g = [$rb_minus(self.g, $rb_times(self.g, $rb_divide(percent, 100.0))), 0.0].$max();
      return $$$($$('Color'), 'GrayScale').$from_fraction(g);
    });
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this, y = nil, i = nil, q = nil;

      
      y = self.g;
      i = $rb_plus($rb_plus($rb_times(self.g, 0.596), $rb_times(self.g, -0.275)), $rb_times(self.g, -0.321));
      q = $rb_plus($rb_plus($rb_times(self.g, 0.212), $rb_times(self.g, -0.523)), $rb_times(self.g, 0.311));
      return $$$($$('Color'), 'YIQ').$from_fraction(y, i, q);
    });
    
    $def(self, '$to_hsl', function $$to_hsl() {
      var self = this;

      return $$$($$('Color'), 'HSL').$from_fraction(0, 0, self.g)
    });
    
    $def(self, '$brightness', $return_ivar("g"));
    
    $def(self, '$gray', function $$gray() {
      var self = this;

      return $rb_times(self.g, 100.0)
    });
    $alias(self, "grey", "gray");
    
    $def(self, '$g', $return_ivar("g"));
    
    $def(self, '$gray=', function $GrayScale_gray$eq$1(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize($rb_divide(gg, 100.0)))
    });
    $alias(self, "grey=", "gray=");
    
    $def(self, '$g=', function $GrayScale_g$eq$2(gg) {
      var self = this;

      return (self.g = $$('Color').$normalize(gg))
    });
    
    $def(self, '$+', function $GrayScale_$plus$3(other) {
      var self = this;

      return self.$class().$from_fraction($rb_plus(self.$g(), other.$to_grayscale().$g()))
    });
    
    $def(self, '$-', function $GrayScale_$minus$4(other) {
      var self = this;

      return $rb_plus(self, other['$-@']())
    });
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "Gray [%.2f%%]"['$%']([self.$gray()])
    });
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$g()]
    });
    return $def(self, '$-@', function $GrayScale_$minus$$5() {
      var self = this, gs = nil;

      
      gs = self.$dup();
      gs.$instance_variable_set("@g", self.$g()['$-@']());
      return gs;
    });
  })($$('Color'), null, $nesting);
  return $const_set($$('Color'), 'GreyScale', $$$($$('Color'), 'GrayScale'));
};

Opal.modules["atome/helpers/color_helper/color/hsl"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $slice = Opal.slice, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $return_ivar = Opal.return_ivar, $alias = Opal.alias, $rb_times = Opal.rb_times, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $to_ary = Opal.to_ary, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,to_hsl,normalize,/,call,html,to_rgb,css_rgb,css_rgba,%,hue,saturation,luminosity,near_zero_or_less?,l,near_one_or_more?,near_zero?,s,from_grayscale_fraction,+,compute_fvd_rgb,to_yiq,to_cmyk,from_fraction,to_greyscale,*,<,>,-,luminosity=,map,zip,to_a,coerce,class,h,private,fvd_mix_sat_lum,hue_to_rgb,rotate_hue,to_f');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HSL');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.l = $proto.h = $proto.s = nil;
    
    self.$include($$('Color'));
    (function(self, $parent_nesting) {
      
      return $def(self, '$from_fraction', function $$from_fraction(h, s, l) {
        var block = $$from_fraction.$$p || nil, self = this;

        $$from_fraction.$$p = null;
        
        ;
        if (h == null) h = 0.0;
        if (s == null) s = 0.0;
        if (l == null) l = 0.0;
        return $send(self, 'new', [h, s, l, 1.0, 1.0], block.$to_proc());
      }, -1)
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_hsl()
    });
    
    $def(self, '$initialize', function $$initialize(h, s, l, radix1, radix2) {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if (h == null) h = 0;
      if (s == null) s = 0;
      if (l == null) l = 0;
      if (radix1 == null) radix1 = 360.0;
      if (radix2 == null) radix2 = 100.0;
      self.h = $$('Color').$normalize($rb_divide(h, radix1));
      self.s = $$('Color').$normalize($rb_divide(s, radix2));
      self.l = $$('Color').$normalize($rb_divide(l, radix2));
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$html', function $$html() {
      var self = this;

      return self.$to_rgb().$html()
    });
    
    $def(self, '$css_rgb', function $$css_rgb() {
      var self = this;

      return self.$to_rgb().$css_rgb()
    });
    
    $def(self, '$css_rgba', function $$css_rgba(alpha) {
      var self = this;

      
      if (alpha == null) alpha = 1;
      return self.$to_rgb().$css_rgba(alpha);
    }, -1);
    
    $def(self, '$css_hsl', function $$css_hsl() {
      var self = this;

      return "hsl(%3.2f, %3.2f%%, %3.2f%%)"['$%']([self.$hue(), self.$saturation(), self.$luminosity()])
    });
    
    $def(self, '$css_hsla', function $$css_hsla() {
      var self = this;

      return "hsla(%3.2f, %3.2f%%, %3.2f%%, %3.2f)"['$%']([self.$hue(), self.$saturation(), self.$luminosity(), 1])
    });
    
    $def(self, '$to_rgb', function $$to_rgb($a) {
      var $post_args, $fwd_rest, self = this;

      
      $post_args = $slice(arguments);
      $fwd_rest = $post_args;
      if ($truthy($$('Color')['$near_zero_or_less?'](self.$l()))) {
        return $$$($$$($$('Color'), 'RGB'), 'Black')
      } else if ($truthy($$('Color')['$near_one_or_more?'](self.$l()))) {
        return $$$($$$($$('Color'), 'RGB'), 'White')
      } else if ($truthy($$('Color')['$near_zero?'](self.$s()))) {
        return $$$($$('Color'), 'RGB').$from_grayscale_fraction(self.$l())
      } else {
        return $send($$$($$('Color'), 'RGB'), 'new', $to_a($rb_plus(self.$compute_fvd_rgb(), [1.0])))
      };
    }, -1);
    
    $def(self, '$to_yiq', function $$to_yiq() {
      var self = this;

      return self.$to_rgb().$to_yiq()
    });
    
    $def(self, '$to_cmyk', function $$to_cmyk() {
      var self = this;

      return self.$to_rgb().$to_cmyk()
    });
    
    $def(self, '$brightness', $return_ivar("l"));
    
    $def(self, '$to_greyscale', function $$to_greyscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$from_fraction(self.l)
    });
    $alias(self, "to_grayscale", "to_greyscale");
    
    $def(self, '$hue', function $$hue() {
      var self = this;

      return $rb_times(self.h, 360.0)
    });
    
    $def(self, '$h', $return_ivar("h"));
    
    $def(self, '$hue=', function $HSL_hue$eq$1(hh) {
      var self = this;

      
      hh = $rb_divide(hh, 360.0);
      if ($truthy($rb_lt(hh, 0.0))) {
        hh = $rb_plus(hh, 1.0)
      };
      if ($truthy($rb_gt(hh, 1.0))) {
        hh = $rb_minus(hh, 1.0)
      };
      return (self.h = $$('Color').$normalize(hh));
    });
    
    $def(self, '$h=', function $HSL_h$eq$2(hh) {
      var self = this;

      return (self.h = $$('Color').$normalize(hh))
    });
    
    $def(self, '$saturation', function $$saturation() {
      var self = this;

      return $rb_times(self.s, 100.0)
    });
    
    $def(self, '$s', $return_ivar("s"));
    
    $def(self, '$saturation=', function $HSL_saturation$eq$3(ss) {
      var self = this;

      return (self.s = $$('Color').$normalize($rb_divide(ss, 100.0)))
    });
    
    $def(self, '$s=', function $HSL_s$eq$4(ss) {
      var self = this;

      return (self.s = $$('Color').$normalize(ss))
    });
    
    $def(self, '$luminosity', function $$luminosity() {
      var self = this;

      return $rb_times(self.l, 100.0)
    });
    $alias(self, "lightness", "luminosity");
    
    $def(self, '$l', $return_ivar("l"));
    
    $def(self, '$luminosity=', function $HSL_luminosity$eq$5(ll) {
      var self = this;

      return (self.l = $$('Color').$normalize($rb_divide(ll, 100.0)))
    });
    $alias(self, "lightness=", "luminosity=");
    
    $def(self, '$l=', function $HSL_l$eq$6(ll) {
      var self = this;

      return (self.l = $$('Color').$normalize(ll))
    });
    
    $def(self, '$to_hsl', $return_self);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "HSL [%.2f deg, %.2f%%, %.2f%%]"['$%']([self.$hue(), self.$saturation(), self.$luminosity()])
    });
    
    $def(self, '$mix_with', function $$mix_with(color, mix_percent) {
      var self = this, v = nil;

      
      if (mix_percent == null) mix_percent = 0.5;
      v = $send(self.$to_a().$zip(self.$coerce(color).$to_a()), 'map', [], function $$7($mlhs_tmp1){var $a, $b, x = nil, y = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (y = ($a[1] == null ? nil : $a[1])), $b;
        return $rb_plus($rb_times($rb_minus(y, x), mix_percent), x);}, {$$has_top_level_mlhs_arg: true});
      return $send(self.$class(), 'from_fraction', $to_a(v));
    }, -2);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$h(), self.$s(), self.$l()]
    });
    self.$private();
    
    $def(self, '$compute_fvd_rgb', function $$compute_fvd_rgb() {
      var $a, $b, self = this, t1 = nil, t2 = nil;

      
      $b = self.$fvd_mix_sat_lum(), $a = $to_ary($b), (t1 = ($a[0] == null ? nil : $a[0])), (t2 = ($a[1] == null ? nil : $a[1])), $b;
      return $send([$rb_plus(self.$h(), $rb_divide(1, 3.0)), self.$h(), $rb_minus(self.$h(), $rb_divide(1, 3.0))], 'map', [], function $$8(v){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (v == null) v = nil;
        return self.$hue_to_rgb(self.$rotate_hue(v), t1, t2);}, {$$s: self});
    });
    
    $def(self, '$fvd_mix_sat_lum', function $$fvd_mix_sat_lum() {
      var self = this, t = nil;

      
      t = ($truthy($$('Color')['$near_zero_or_less?']($rb_minus(self.$l(), 0.5))) ? ($rb_times(self.$l(), $rb_plus(1.0, self.$s().$to_f()))) : ($rb_minus($rb_plus(self.$l(), self.$s()), $rb_times(self.$l(), self.$s().$to_f()))));
      return [$rb_minus($rb_times(2.0, self.$l()), t), t];
    });
    
    $def(self, '$rotate_hue', function $$rotate_hue(h) {
      
      
      if ($truthy($$('Color')['$near_zero_or_less?'](h))) {
        h = $rb_plus(h, 1.0)
      };
      if ($truthy($$('Color')['$near_one_or_more?'](h))) {
        h = $rb_minus(h, 1.0)
      };
      return h;
    });
    return $def(self, '$hue_to_rgb', function $$hue_to_rgb(h, t1, t2) {
      
      if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(6.0, h), 1.0)))) {
        return $rb_plus(t1, $rb_times($rb_times($rb_minus(t2, t1), h), 6.0))
      } else if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(2.0, h), 1.0)))) {
        return t2
      } else if ($truthy($$('Color')['$near_zero_or_less?']($rb_minus($rb_times(3.0, h), 2.0)))) {
        return $rb_plus(t1, $rb_times($rb_times($rb_minus(t2, t1), $rb_minus($rb_divide(2, 3.0), h)), 6.0))
      } else {
        return t1
      }
    });
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/helpers/color_helper/color/yiq"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $send = Opal.send, $defs = Opal.defs, $to_ary = Opal.to_ary, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $def = Opal.def, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $alias = Opal.alias, $rb_times = Opal.rb_times, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,new,to_proc,map,normalize,/,call,to_yiq,to_grayscale,%,*,y,i,q');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'YIQ');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.y = $proto.i = $proto.q = nil;
    
    self.$include($$('Color'));
    $defs(self, '$from_fraction', function $$from_fraction(y, i, q) {
      var block = $$from_fraction.$$p || nil, self = this;

      $$from_fraction.$$p = null;
      
      ;
      if (y == null) y = 0;
      if (i == null) i = 0;
      if (q == null) q = 0;
      return $send(self, 'new', [y, i, q, 1.0], block.$to_proc());
    }, -1);
    
    $def(self, '$initialize', function $$initialize(y, i, q, radix) {
      var block = $$initialize.$$p || nil, $a, $b, self = this;

      $$initialize.$$p = null;
      
      ;
      if (y == null) y = 0;
      if (i == null) i = 0;
      if (q == null) q = 0;
      if (radix == null) radix = 100.0;
      $b = $send([y, i, q], 'map', [], function $$1(v){
        
        if (v == null) v = nil;
        return $$('Color').$normalize($rb_divide(v, radix));}), $a = $to_ary($b), (self.y = ($a[0] == null ? nil : $a[0])), (self.i = ($a[1] == null ? nil : $a[1])), (self.q = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(block)) {
        return block.$call()
      } else {
        return nil
      };
    }, -1);
    
    $def(self, '$coerce', function $$coerce(other) {
      
      return other.$to_yiq()
    });
    
    $def(self, '$to_yiq', $return_self);
    
    $def(self, '$brightness', $return_ivar("y"));
    
    $def(self, '$to_grayscale', function $$to_grayscale() {
      var self = this;

      return $$$($$('Color'), 'GrayScale').$new(self.y)
    });
    $alias(self, "to_greyscale", "to_grayscale");
    
    $def(self, '$y', $return_ivar("y"));
    
    $def(self, '$y=', function $YIQ_y$eq$2(yy) {
      var self = this;

      return (self.y = $$('Color').$normalize(yy))
    });
    
    $def(self, '$i', $return_ivar("i"));
    
    $def(self, '$i=', function $YIQ_i$eq$3(ii) {
      var self = this;

      return (self.i = $$('Color').$normalize(ii))
    });
    
    $def(self, '$q', $return_ivar("q"));
    
    $def(self, '$q=', function $YIQ_q$eq$4(qq) {
      var self = this;

      return (self.q = $$('Color').$normalize(qq))
    });
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "YIQ [%.2f%%, %.2f%%, %.2f%%]"['$%']([$rb_times(self.y, 100), $rb_times(self.i, 100), $rb_times(self.q, 100)])
    });
    return $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$y(), self.$i(), self.$q()]
    });
  })($$('Color'), null, $nesting)
};

Opal.modules["atome/helpers/color_helper/color/css"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $send = Opal.send, $return_val = Opal.return_val, $defs = Opal.defs, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('by_name');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'CSS');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $defs(self, '$[]', function $CSS_$$$1(name) {
      
      return $send($$$($$('Color'), 'RGB'), 'by_name', [name], $return_val(nil))
    })
  })($$('Color'), $nesting)
};

Opal.modules["atome/helpers/color_helper/color"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $const_set = Opal.const_set, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $rb_le = Opal.rb_le, $rb_lt = Opal.rb_lt, $rb_minus = Opal.rb_minus, $rb_gt = Opal.rb_gt, $to_ary = Opal.to_ary, $alias = Opal.alias, $rb_ge = Opal.rb_ge, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeqeq = Opal.eqeqeq, $to_a = Opal.to_a, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('equivalent?,first,names,names=,uniq,sort,map,compact,flatten,Array,to_proc,alias_method,<=,abs,<,near_zero?,-,>,near_one?,kind_of?,all?,zip,to_a,coerce,near?,near_zero_or_less?,near_one_or_more?,normalize,end,begin,>=,to_i,normalize_to_range,normalize_byte,normalize_word,require,warn,const_defined?,const_get,upcase,to_s,===,new,==,size,from_html,to_hsl');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Color');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set($nesting[0], 'COLOR_VERSION', "1.8");
    $klass($nesting[0], null, 'RGB');
    $klass($nesting[0], null, 'CMYK');
    $klass($nesting[0], null, 'HSL');
    $klass($nesting[0], null, 'GrayScale');
    $klass($nesting[0], null, 'YIQ');
    $const_set($nesting[0], 'COLOR_EPSILON', 1.0e-05);
    $const_set($nesting[0], 'COLOR_TOLERANCE', 0.0001);
    
    $def(self, '$==', function $Color_$eq_eq$1(other) {
      var self = this;

      return $$('Color')['$equivalent?'](self, other)
    });
    
    $def(self, '$name', function $$name() {
      var self = this;

      return self.$names().$first()
    });
    
    $def(self, '$names', function $$names() {
      var $a, self = this;
      if (self.names == null) self.names = nil;

      
      if (!$truthy((($a = self['names'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        self['$names='](nil)
      };
      return self.names;
    });
    
    $def(self, '$names=', function $Color_names$eq$2(n) {
      var self = this;

      return (self.names = $send($send(self.$Array(n).$flatten().$compact(), 'map', [], "to_s".$to_proc()), 'map', [], "downcase".$to_proc()).$sort().$uniq())
    });
    return self.$alias_method("name=", "names=");
  })($nesting[0], $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$near_zero?', function $near_zero$ques$3(value) {
      
      return $rb_le(value.$abs(), $$$($$('Color'), 'COLOR_EPSILON'))
    });
    
    $def(self, '$near_zero_or_less?', function $near_zero_or_less$ques$4(value) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = $rb_lt(value, 0.0)))) {
        return $ret_or_1
      } else {
        return self['$near_zero?'](value)
      }
    });
    
    $def(self, '$near_one?', function $near_one$ques$5(value) {
      var self = this;

      return self['$near_zero?']($rb_minus(value, 1.0))
    });
    
    $def(self, '$near_one_or_more?', function $near_one_or_more$ques$6(value) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = $rb_gt(value, 1.0)))) {
        return $ret_or_1
      } else {
        return self['$near_one?'](value)
      }
    });
    
    $def(self, '$near?', function $near$ques$7(x, y) {
      
      return $rb_le($rb_minus(x, y).$abs(), $$$($$('Color'), 'COLOR_TOLERANCE'))
    });
    
    $def(self, '$equivalent?', function $equivalent$ques$8(a, b) {
      var self = this;

      
      if (!($truthy(a['$kind_of?']($$('Color'))) && ($truthy(b['$kind_of?']($$('Color')))))) {
        return false
      };
      return $send(a.$to_a().$zip(a.$coerce(b).$to_a()), 'all?', [], function $$9($mlhs_tmp1){var $a, $b, self = $$9.$$s == null ? this : $$9.$$s, x = nil, y = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (y = ($a[1] == null ? nil : $a[1])), $b;
        return self['$near?'](x, y);}, {$$s: self, $$has_top_level_mlhs_arg: true});
    });
    
    $def(self, '$coerce', function $$coerce(a, b) {
      
      return a.$coerce(b)
    });
    
    $def(self, '$normalize', function $$normalize(value) {
      var self = this;

      if ($truthy(self['$near_zero_or_less?'](value))) {
        return 0.0
      } else if ($truthy(self['$near_one_or_more?'](value))) {
        return 1.0
      } else {
        return value
      }
    });
    $alias(self, "normalize_fractional", "normalize");
    
    $def(self, '$normalize_to_range', function $$normalize_to_range(value, range) {
      
      
      if ($truthy($rb_lt(range.$end(), range.$begin()))) {
        range = Opal.Range.$new(range.$end(), range.$begin(), false)
      };
      if ($truthy($rb_le(value, range.$begin()))) {
        return range.$begin()
      } else if ($truthy($rb_ge(value, range.$end()))) {
        return range.$end()
      } else {
        return value
      };
    });
    
    $def(self, '$normalize_byte', function $$normalize_byte(value) {
      var self = this;

      return self.$normalize_to_range(value, $range(0, 255, false)).$to_i()
    });
    $alias(self, "normalize_8bit", "normalize_byte");
    
    $def(self, '$normalize_word', function $$normalize_word(value) {
      var self = this;

      return self.$normalize_to_range(value, $range(0, 65535, false)).$to_i()
    });
    return $alias(self, "normalize_16bit", "normalize_word");
  })(Opal.get_singleton_class($$('Color')), $nesting);
  self.$require("atome/helpers/color_helper/color/rgb");
  self.$require("atome/helpers/color_helper/color/cmyk");
  self.$require("atome/helpers/color_helper/color/grayscale");
  self.$require("atome/helpers/color_helper/color/hsl");
  self.$require("atome/helpers/color_helper/color/yiq");
  self.$require("atome/helpers/color_helper/color/css");
  return (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$const_missing', function $$const_missing(name) {
      var $yield = $$const_missing.$$p || nil, self = this;

      $$const_missing.$$p = null;
      
      switch (name) {
        case "VERSION":
        case "VERSION":
        case "COLOR_TOOLS_VERSION":
        case "COLOR_TOOLS_VERSION":
          
          self.$warn("Color::" + (name) + " has been deprecated. Use Color::COLOR_VERSION instead.");
          return $$$($$('Color'), 'COLOR_VERSION');
        default:
          if ($truthy($$$($$('Color'), 'RGB')['$const_defined?'](name))) {
            
            self.$warn("Color::" + (name) + " has been deprecated. Use Color::RGB::" + (name) + " instead.");
            return $$$($$('Color'), 'RGB').$const_get(name);
          } else {
            return $send2(self, $find_super(self, 'const_missing', $$const_missing, false, true), 'const_missing', [name], $yield)
          }
      }
    });
    return $def(self, '$new', function $new$10(values, mode) {
      var self = this, color = nil, $ret_or_1 = nil;

      
      if (mode == null) mode = "rgb";
      self.$warn("Color.new has been deprecated. Use Color::" + (mode.$to_s().$upcase()) + ".new instead.");
      color = ($eqeqeq("hsl", ($ret_or_1 = mode)) ? ($send($$$($$('Color'), 'HSL'), 'new', $to_a(values))) : ($eqeqeq("rgb", $ret_or_1) ? (((values = [values].$flatten()), ($eqeq(values.$size(), 1) ? ($send($$$($$('Color'), 'RGB'), 'from_html', $to_a(values))) : ($send($$$($$('Color'), 'RGB'), 'new', $to_a(values)))))) : ($eqeqeq("cmyk", $ret_or_1) ? ($send($$$($$('Color'), 'CMYK'), 'new', $to_a(values))) : (nil))));
      return color.$to_hsl();
    }, -2);
  })(Opal.get_singleton_class($$('Color')), $nesting);
};

Opal.modules["atome/extensions/atome"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('generator,key?,build_particle,[],to_proc,build_atome,build_sanitizer,build_option,build_render,batch,grab,attach,counter,atomes,box,circle,matrix,define_method,default_params,send,dispatch');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$new', function $Object_new$1(params) {
      var bloc = $Object_new$1.$$p || nil, generator = nil, atome_return = nil, $ret_or_1 = nil;

      $Object_new$1.$$p = null;
      
      ;
      generator = $$('Genesis').$generator();
      if ($truthy(params['$key?']("particle"))) {
        return $send(generator, 'build_particle', [params['$[]']("particle"), $hash2(["render", "return", "store", "type"], {"render": params['$[]']("render"), "return": params['$[]']("return"), "store": params['$[]']("store"), "type": params['$[]']("type")})], bloc.$to_proc())
      } else if ($truthy(params['$key?']("atome"))) {
        
        atome_return = ($truthy(($ret_or_1 = params['$[]']("return"))) ? ($ret_or_1) : (params['$[]']("atome")));
        return $send(generator, 'build_atome', [params['$[]']("atome")], bloc.$to_proc());
      } else if ($truthy(params['$key?']("sanitizer"))) {
        return $send(generator, 'build_sanitizer', [params['$[]']("sanitizer")], bloc.$to_proc())
      } else if ($truthy(params['$key?']("pre"))) {
        return $send(generator, 'build_option', ["pre_render_" + (params['$[]']("pre"))], bloc.$to_proc())
      } else if ($truthy(params['$key?']("post"))) {
        return $send(generator, 'build_option', ["post_render_" + (params['$[]']("post"))], bloc.$to_proc())
      } else if ($truthy(params['$key?']("browser"))) {
        return $send(generator, 'build_render', ["browser_" + (params['$[]']("browser"))], bloc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$batch', function $$batch(atomes) {
      var self = this;

      return self.$grab("black_matter").$batch(atomes)
    });
    
    $def(self, '$identity_generator', function $$identity_generator(type) {
      var self = this;

      
      if (type == null) type = "element";
      return "" + (self.$attach()['$[]'](0)) + "_" + (type) + "_" + ($$('Universe').$counter());
    }, -1);
    
    $def(self, '$grab', function $$grab(atome_to_get) {
      
      return $$('Universe').$atomes()['$[]'](atome_to_get)
    });
    
    $def(self, '$box', function $$box(params) {
      var proc = $$box.$$p || nil, self = this;

      $$box.$$p = null;
      
      ;
      if (params == null) params = $hash2([], {});
      return $send(self.$grab("view"), 'box', [params], proc.$to_proc());
    }, -1);
    
    $def(self, '$circle', function $$circle(params) {
      var proc = $$circle.$$p || nil, self = this;

      $$circle.$$p = null;
      
      ;
      if (params == null) params = $hash2([], {});
      return $send(self.$grab("view"), 'circle', [params], proc.$to_proc());
    }, -1);
    
    $def(self, '$matrix', function $$matrix(params) {
      var proc = $$matrix.$$p || nil, self = this;

      $$matrix.$$p = null;
      
      ;
      if (params == null) params = $hash2([], {});
      return $send(self.$grab("view"), 'matrix', [params], proc.$to_proc());
    }, -1);
    
    $def(self, '$atome_method_for_object', function $$atome_method_for_object(element) {
      var $yield = $$atome_method_for_object.$$p || nil, self = this;

      $$atome_method_for_object.$$p = null;
      return $send($$('Object'), 'define_method', [element], function $$2(params){var user_proc = $$2.$$p || nil, self = $$2.$$s == null ? this : $$2.$$s, default_parent = nil;

        $$2.$$p = null;
        
        ;
        if (params == null) params = nil;
        default_parent = $$('Essentials').$default_params()['$[]'](element)['$[]']("attach")['$[]'](0);
        return $send(self.$grab(default_parent), 'send', [element, params], user_proc.$to_proc());}, {$$s: self})
    });
    
    $def(self, '$atome_method_for_batch', function $$atome_method_for_batch(element) {
      var $yield = $$atome_method_for_batch.$$p || nil, self = this;

      $$atome_method_for_batch.$$p = null;
      return $send($$('Batch'), 'define_method', [element], function $$3(params){var user_proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s;

        $$3.$$p = null;
        
        ;
        if (params == null) params = nil;
        return $send(self, 'dispatch', [element, [params]], user_proc.$to_proc());}, {$$s: self})
    });
    return $def(self, '$particle_method_for_batch', function $$particle_method_for_batch(element) {
      var $yield = $$particle_method_for_batch.$$p || nil, self = this;

      $$particle_method_for_batch.$$p = null;
      return $send($$('Batch'), 'define_method', [element], function $$4(params){var user_proc = $$4.$$p || nil, self = $$4.$$s == null ? this : $$4.$$s;

        $$4.$$p = null;
        
        ;
        if (params == null) params = nil;
        return $send(self, 'dispatch', [element, [params]], user_proc.$to_proc());}, {$$s: self})
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/extensions/mathematic"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $rb_divide = Opal.rb_divide, $def = Opal.def, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('/,value,*,-,+');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    
    $def(self, '$/', function $Atome_$slash$1(val) {
      var self = this;

      return $rb_divide(self.$value(), val)
    });
    
    $def(self, '$*', function $Atome_$$2(val) {
      var self = this;

      return $rb_times(self.$value(), val)
    });
    
    $def(self, '$-', function $Atome_$minus$3(val) {
      var self = this;

      return $rb_minus(self.$value(), val)
    });
    return $def(self, '$+', function $Atome_$plus$4(val) {
      var self = this;

      return $rb_plus(self.$value(), val)
    });
  })($nesting[0], null)
};

Opal.modules["atome/atome"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $eqeq = Opal.eqeq, $not = Opal.not, $hash = Opal.hash, $slice = Opal.slice, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('include,private,each_value,key?,atomes,[],puts,[]=,collapse,define_method,==,is_a?,instance_exec,to_proc,sanitize,create_particle,send,particle_creation,!,detached,atome_common,run_optional_proc,to_sym,atome_parsing,atome_catcher,new,get_optional_method,instance_variable_get,public,attr_accessor,attr_reader,security_pass,store_code_bloc,instance_variable_set,rendering,broadcasting,store_value,connected');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.atome = $proto.property = $proto.real_atome = nil;
    
    self.$include($$('Essentials'));
    self.$private();
    
    $def(self, '$initialize', function $$initialize(atomes) {
      var atomes_proc = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if (atomes == null) atomes = $hash2([], {});
      return $send(atomes, 'each_value', [], function $$1(elements){var self = $$1.$$s == null ? this : $$1.$$s;

        
        if (elements == null) elements = nil;
        if ($truthy($$('Universe').$atomes()['$key?'](elements['$[]']("id")))) {
          return self.$puts("The id " + (elements['$[]']("id")) + " is already taken, you must change it")
        } else {
          
          self.broadcast = $hash2([], {});
          if ($truthy(atomes_proc)) {
            elements['$[]=']("code", atomes_proc)
          };
          self.atome = elements;
          return self.$collapse();
        };}, {$$s: self});
    }, -1);
    
    $def(self, '$new_particle', function $$new_particle(element, store, render) {
      var method_proc = $$new_particle.$$p || nil, self = this;

      $$new_particle.$$p = null;
      
      ;
      return $send($$('Atome'), 'define_method', [element], function $$2(params){var user_proc = $$2.$$p || nil, self = $$2.$$s == null ? this : $$2.$$s;
        if (self.atome == null) self.atome = nil;

        $$2.$$p = null;
        
        ;
        if (params == null) params = nil;
        if (($truthy(params) || ($eqeq(params, false)))) {
          
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          };
          params = $send(self, 'sanitize', [element, params], user_proc.$to_proc());
          self.$create_particle(element, store, render);
          return $send(self, 'send', ["set_" + (element), params], user_proc.$to_proc());
        } else if ($eqeq(element, "batch")) {
          return self.atome['$[]']("batch")
        } else {
          return self.atome['$[]'](element)
        };}, {$$arity: -1, $$s: self});
    });
    
    $def(self, '$additional_particle_methods', function $$additional_particle_methods(element, store, render) {
      var method_proc = $$additional_particle_methods.$$p || nil, self = this;

      $$additional_particle_methods.$$p = null;
      
      ;
      return $send($$('Atome'), 'define_method', ["" + (element) + "="], function $$3(params){var user_proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s;

        $$3.$$p = null;
        
        ;
        if (params == null) params = nil;
        if ($truthy(method_proc['$is_a?']($$('Proc')))) {
          $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
        };
        params = self.$sanitize(element, params);
        return $send(self, 'particle_creation', [element, params, store, render], user_proc.$to_proc());}, {$$arity: -1, $$s: self});
    });
    
    $def(self, '$atome_parsing', function $$atome_parsing(element, params) {
      var user_proc = $$atome_parsing.$$p || nil, self = this, current_atome = nil, $ret_or_1 = nil;

      $$atome_parsing.$$p = null;
      
      ;
      params = self.$sanitize(element, params);
      current_atome = self.$send(element);
      if (($truthy(current_atome) && ($not(($truthy(($ret_or_1 = self.atome['$[]']("add"))) ? (self.atome['$[]']("add")['$[]'](element)) : ($ret_or_1)))))) {
        
        self.$detached(current_atome);
        self.atome['$[]='](element, []);
      };
      params = self.$atome_common(element, params);
      $send(self, 'run_optional_proc', [(("pre_render_") + (self.atome['$[]']("type"))).$to_sym(), self, params], user_proc.$to_proc());
      $send(self, 'run_optional_proc', [(("post_render_") + (self.atome['$[]']("type"))).$to_sym(), self, params], user_proc.$to_proc());
      return $send(self, 'send', ["set_" + (element), params], user_proc.$to_proc());
    });
    
    $def(self, '$atome_catcher', function $$atome_catcher(atome_catch) {
      
      return atome_catch
    });
    
    $def(self, '$new_atome', function $$new_atome(element) {
      var method_proc = $$new_atome.$$p || nil, self = this;

      $$new_atome.$$p = null;
      
      ;
      $send($$('Atome'), 'define_method', [element], function $$4(params){var user_proc = $$4.$$p || nil, self = $$4.$$s == null ? this : $$4.$$s;
        if (self.atome == null) self.atome = nil;

        $$4.$$p = null;
        
        ;
        if (params == null) params = nil;
        if ($truthy(params)) {
          
          if ($truthy(method_proc['$is_a?']($$('Proc')))) {
            $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
          };
          return $send(self, 'atome_parsing', [element, params], user_proc.$to_proc());
        } else {
          return self.$atome_catcher(self.atome['$[]'](element))
        };}, {$$arity: -1, $$s: self});
      return $send($$('Atome'), 'define_method', ["set_" + (element)], function $$5(params){var user_proc = $$5.$$p || nil, self = $$5.$$s == null ? this : $$5.$$s, new_atome = nil;

        $$5.$$p = null;
        
        ;
        if (params == null) params = nil;
        new_atome = $send($$('Atome'), 'new', [$hash(element, params)], user_proc.$to_proc());
        return self.$atome_catcher(new_atome);}, {$$s: self});
    });
    
    $def(self, '$new_render_engine', function $$new_render_engine(renderer_name) {
      var method_proc = $$new_render_engine.$$p || nil, self = this;

      $$new_render_engine.$$p = null;
      
      ;
      return $send($$('Atome'), 'define_method', [renderer_name], function $$6(params){var user_proc = $$6.$$p || nil, self = $$6.$$s == null ? this : $$6.$$s;

        $$6.$$p = null;
        
        ;
        if (params == null) params = nil;
        if ($truthy(method_proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [params, user_proc], method_proc.$to_proc())
        } else {
          return nil
        };}, {$$arity: -1, $$s: self});
    });
    
    $def(self, '$run_optional_proc', function $$run_optional_proc(proc_name, $a, $b) {
      var user_proc = $$run_optional_proc.$$p || nil, $post_args, atome, params, self = this, option_found = nil;

      $$run_optional_proc.$$p = null;
      
      ;
      $post_args = $slice(arguments, 1);
      
      if ($post_args.length > 1) atome = $post_args.shift();if (atome == null) atome = self;
      
      params = $post_args.shift();if (params == null) params = nil;
      option_found = $$('Universe').$get_optional_method(proc_name);
      if ($truthy(option_found['$is_a?']($$('Proc')))) {
        return $send(atome, 'instance_exec', [params, user_proc, atome], option_found.$to_proc())
      } else {
        return nil
      };
    }, -3);
    
    $def(self, '$store_value', function $$store_value(element) {
      var $a, self = this, params = nil;

      
      params = self.$instance_variable_get("@" + (element));
      return ($a = [element, params], $send(self.atome, '[]=', $a), $a[$a.length - 1]);
    });
    self.$public();
    self.$attr_accessor("property", "value", "real_atome", "user_proc");
    self.$attr_reader("atome", "structure");
    
    $def(self, '$set', function $$set(value) {
      var $a, self = this;

      return ($a = [self.property, value], $send(self.real_atome, '[]=', $a), $a[$a.length - 1])
    });
    
    $def(self, '$particle_creation', function $$particle_creation(element, params, store, render) {
      var user_proc = $$particle_creation.$$p || nil, self = this;

      $$particle_creation.$$p = null;
      
      ;
      if (!$truthy(self.$security_pass(element, params))) {
        return false
      };
      if ($truthy(user_proc)) {
        $send(self, 'store_code_bloc', [element], user_proc.$to_proc())
      };
      if ($truthy(store)) {
        self.$instance_variable_set("@" + (element), params)
      };
      $send(self, 'run_optional_proc', ["pre_render_" + (element), self, params], user_proc.$to_proc());
      if ($truthy(render)) {
        $send(self, 'rendering', [element, params], user_proc.$to_proc())
      };
      $send(self, 'run_optional_proc', ["post_render_" + (element), self, params], user_proc.$to_proc());
      self.$broadcasting(element);
      if ($truthy(store)) {
        self.$store_value(element)
      };
      return self;
    });
    
    $def(self, '$create_particle', function $$create_particle(element, store, render) {
      var $yield = $$create_particle.$$p || nil, self = this;

      $$create_particle.$$p = null;
      return $send($$('Atome'), 'define_method', ["set_" + (element)], function $$7(params){var user_proc = $$7.$$p || nil, self = $$7.$$s == null ? this : $$7.$$s;

        $$7.$$p = null;
        
        ;
        if (params == null) params = nil;
        return $send(self, 'particle_creation', [element, params, store, render], user_proc.$to_proc());}, {$$s: self})
    });
    
    $def(self, '$get', function $$get(element) {
      var self = this;

      return self.atome['$[]'](element)
    });
    return $$('Universe').$connected();
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/helpers/callbacks"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $rb_lt = Opal.rb_lt, $rb_ge = Opal.rb_ge, $hash2 = Opal.hash2, $hash = Opal.hash, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('private,attr_accessor,public,is_a?,instance_exec,to_proc,[],split,gsub,[]=,each_value,<,>=,left,top,play_active_proc,browser_object,style,==,atome');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.atome = $proto.drag_start_proc = $proto.drag_move_proc = $proto.drag_end_proc = $proto.drop_action_proc = $proto.enter_action_proc = $proto.leave_action_proc = $proto.sort_proc = $proto.animation_start_proc = $proto.animation_stop_proc = nil;
    
    self.$private();
    self.$attr_accessor("drag_start_proc", "drag_move_proc", "drag_end_proc", "drop_action_proc", "over_action_proc", "play_start_proc", "play_active_proc", "play_end_proc", "animation_start_proc", "animation_active_proc", "animation_stop_proc");
    self.$public();
    
    $def(self, '$schedule_callback', function $$schedule_callback(proc) {
      var self = this;

      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      }
    });
    
    $def(self, '$read_callback', function $$read_callback(file, proc) {
      var self = this, file_content = nil;

      
      file_content = file.$split("</head><body>")['$[]'](1).$split("</body></html>")['$[]'](0);
      file_content = file_content.$gsub("&gt;", ">");
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [file_content], proc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$time_callback', function $$time_callback(current_time, markers) {
      var self = this;

      
      self.atome['$[]=']("time", current_time);
      return $send(markers, 'each_value', [], function $$1(marker){var self = $$1.$$s == null ? this : $$1.$$s, code_found = nil;

        
        if (marker == null) marker = nil;
        if (($truthy($rb_ge(current_time, marker['$[]']("begin"))) && ($truthy($rb_lt(current_time, marker['$[]']("end")))))) {
          
          code_found = marker['$[]']("code");
          if ($truthy(code_found['$is_a?']($$('Proc')))) {
            return $send(self, 'instance_exec', [current_time], code_found.$to_proc())
          } else {
            return nil
          };
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$drag_start_callback', function $$drag_start_callback(page_x, page_y, left_val, top_val) {
      var self = this, proc = nil;

      
      self.atome['$[]=']("left", left_val);
      self.atome['$[]=']("top", top_val);
      proc = self.drag_start_proc;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [$hash2(["pageX", "pageY", "left", "top"], {"pageX": page_x, "pageY": page_y, "left": left_val, "top": top_val})], proc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$drag_move_callback', function $$drag_move_callback(page_x, page_y, left_val, top_val) {
      var self = this, proc = nil;

      
      proc = self.drag_move_proc;
      self.atome['$[]=']("left", left_val);
      self.atome['$[]=']("top", top_val);
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [$hash2(["pageX", "pageY", "left", "top"], {"pageX": page_x, "pageY": page_y, "left": left_val, "top": top_val})], proc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$drag_end_callback', function $$drag_end_callback(page_x, page_y, left_val, top_val) {
      var self = this, proc = nil;

      
      self.$left(left_val);
      self.$top(top_val);
      proc = self.drag_end_proc;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [$hash2(["pageX", "pageY", "left", "top"], {"pageX": page_x, "pageY": page_y, "left": left_val, "top": top_val})], proc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$drop_action_callback', function $$drop_action_callback(data_found, _full_event) {
      var self = this, proc = nil;

      
      proc = self.drop_action_proc;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [data_found], proc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$enter_action_callback', function $$enter_action_callback(data_found, _full_event) {
      var self = this, proc = nil;

      
      proc = self.enter_action_proc;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [data_found], proc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$leave_action_callback', function $$leave_action_callback(data_found) {
      var self = this, proc = nil;

      
      proc = self.leave_action_proc;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [data_found], proc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$sort_callback', function $$sort_callback(atome) {
      var self = this, sort_proc = nil;

      
      sort_proc = self.sort_proc;
      if ($truthy(sort_proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [atome], sort_proc.$to_proc())
      } else {
        return nil
      };
    });
    
    $def(self, '$browser_animate_callback', function $$browser_animate_callback(particle_found, value, animation_hash, original_particle, animation_atome) {
      var $a, self = this, anim_proc = nil, play_proc = nil;

      
      anim_proc = animation_hash['$[]']("code");
      if ($truthy(anim_proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [$hash(original_particle, value)], anim_proc.$to_proc())
      };
      play_proc = animation_atome.$play_active_proc();
      if ($truthy(play_proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [$hash(self.atome['$[]'](particle_found), value)], play_proc.$to_proc())
      };
      if ($truthy(self.$browser_object())) {
        self.$browser_object().$style()['$[]='](particle_found, value)
      };
      return ($a = [original_particle, value], $send(self.atome, '[]=', $a), $a[$a.length - 1]);
    });
    
    $def(self, '$play_start_callback', function $$play_start_callback(_particle_found, _start_value, animation_hash, original_particle, atome_found) {
      var self = this, value = nil, start_proc = nil;

      
      value = animation_hash['$[]']("begin")['$[]'](original_particle);
      if ($eqeq(value, "self")) {
        value = atome_found.$atome()['$[]'](original_particle)
      };
      start_proc = self.animation_start_proc;
      self.atome['$[]='](original_particle, value);
      if ($truthy(start_proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [$hash(original_particle, value)], start_proc.$to_proc())
      } else {
        return nil
      };
    });
    return $def(self, '$play_stop_callback', function $$play_stop_callback(_particle_found, _end_value, animation_hash, original_particle, _atome_found) {
      var self = this, value = nil, end_proc = nil;

      
      value = animation_hash['$[]']("end")['$[]'](original_particle);
      end_proc = self.animation_stop_proc;
      self.atome['$[]='](original_particle, value);
      if ($truthy(end_proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [$hash(original_particle, value)], end_proc.$to_proc())
      } else {
        return nil
      };
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/generators/atome"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,create_color_hash,==,length,split,merge!,merge');
  
  self.$new($hash2(["atome", "type"], {"atome": "color", "type": "hash"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "color"})], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = self.$create_color_hash(params)
    };
    return params;}, {$$s: self});
  self.$new($hash2(["atome"], {"atome": "image"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "image"})], function $$2(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      
      if ($eqeq(params.$split(".").$length(), 1)) {
        params = "" + (params) + ".png"
      };
      params = $hash2(["path"], {"path": "./medias/images/" + (params)});
    };
    return params;});
  self.$new($hash2(["atome"], {"atome": "video"}));
  self.$new($hash2(["atome", "type"], {"atome": "shadow", "type": "hash"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "shadow"})], function $$3(params){var default_params = nil, new_params = nil;

    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = $hash2([], {})
    };
    default_params = $hash2(["red", "green", "blue", "alpha", "blur", "left", "top"], {"red": 0, "green": 0, "blue": 0, "alpha": 1, "blur": 3, "left": 3, "top": 3});
    new_params = default_params['$merge!'](params);
    return new_params;});
  self.$new($hash2(["atome"], {"atome": "shape"}));
  self.$new($hash2(["atome"], {"atome": "code"}));
  self.$new($hash2(["atome"], {"atome": "audio"}));
  self.$new($hash2(["atome"], {"atome": "element"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "element"})], function $$4(params){var default_params = nil;

    
    if (params == null) params = nil;
    default_params = $hash2(["data"], {"data": ""});
    return default_params['$merge!'](params);});
  self.$new($hash2(["atome"], {"atome": "web"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "web"})], function $$5(params){var temp_default = nil;

    
    if (params == null) params = nil;
    temp_default = $hash2(["path"], {"path": "https://www.youtube.com/embed/usQDazZKWAk"});
    params = temp_default.$merge(params);
    return params;});
  self.$new($hash2(["atome"], {"atome": "collector"}));
  self.$new($hash2(["atome"], {"atome": "animation"}));
  self.$new($hash2(["atome", "type"], {"atome": "text", "type": "hash"}));
  return $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "text"})], function $$6(params){
    
    if (params == null) params = nil;
    if (!$truthy(params['$instance_of?']($$('Hash')))) {
      params = $hash2(["data"], {"data": params})
    };
    return params;});
};

Opal.modules["atome/presets/atome"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send, $hash = Opal.hash, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[],default_params,[]=,identity_generator,merge,atome_common,new,to_proc');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.atome = nil;
    
    
    $def(self, '$atome_common', function $$atome_common(atome_type, params) {
      var self = this, essential_params = nil, $ret_or_1 = nil, $ret_or_2 = nil;

      
      essential_params = ($truthy(($ret_or_1 = $$('Essentials').$default_params()['$[]'](atome_type))) ? ($ret_or_1) : ($hash2([], {})));
      essential_params['$[]=']("type", ($truthy(($ret_or_1 = essential_params['$[]']("type"))) ? ($ret_or_1) : ("element")));
      essential_params['$[]=']("renderers", ($truthy(($ret_or_1 = essential_params['$[]']("renderers"))) ? ($ret_or_1) : (self.atome['$[]']("renderers"))));
      essential_params['$[]=']("id", ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : (self.$identity_generator(atome_type))));
      essential_params['$[]=']("attach", ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = params['$[]']("attach"))) ? ($ret_or_2) : ([self.atome['$[]']("id")])))) ? ($ret_or_1) : (["view"])));
      return essential_params.$merge(params);
    });
    
    $def(self, '$box', function $$box(params) {
      var bloc = $$box.$$p || nil, self = this, atome_type = nil;

      $$box.$$p = null;
      
      ;
      if (params == null) params = $hash2([], {});
      atome_type = "box";
      params = self.$atome_common(atome_type, params);
      return $send($$('Atome'), 'new', [$hash(atome_type, params)], bloc.$to_proc());
    }, -1);
    return $def(self, '$circle', function $$circle(params) {
      var bloc = $$circle.$$p || nil, self = this, atome_type = nil;

      $$circle.$$p = null;
      
      ;
      if (params == null) params = $hash2([], {});
      atome_type = "circle";
      params = self.$atome_common(atome_type, params);
      return $send($$('Atome'), 'new', [$hash(atome_type, params)], bloc.$to_proc());
    }, -1);
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/generators/communication"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.7.3 */

Opal.modules["atome/genesis/generators/effect"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new');
  
  self.$new($hash2(["particle"], {"particle": "smooth"}));
  return self.$new($hash2(["particle"], {"particle": "blur"}));
};

Opal.modules["atome/genesis/generators/event"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $send = Opal.send, $eqeq = Opal.eqeq, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,==,[]=,store_value');
  
  self.$new($hash2(["particle", "type", "store"], {"particle": "touch", "type": "hash", "store": false}));
  $send(self, 'new', [$hash2(["post"], {"post": "touch"})], function $$1(params, user_bloc){var self = $$1.$$s == null ? this : $$1.$$s;
    if (self.touch == null) self.touch = nil;

    
    if (params == null) params = nil;
    if (user_bloc == null) user_bloc = nil;
    if ($eqeq(self.touch, nil)) {
      self.touch = $hash2([], {})
    };
    self.touch['$[]='](params, user_bloc);
    return self.$store_value("touch");}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "play"})], function $$2(){var $a, self = $$2.$$s == null ? this : $$2.$$s;
    if (self.atome == null) self.atome = nil;

    return ($a = ["pause", "false"], $send(self.atome, '[]=', $a), $a[$a.length - 1])}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "time"}));
  $send(self, 'new', [$hash2(["particle"], {"particle": "pause"})], function $$3(){var $a, self = $$3.$$s == null ? this : $$3.$$s;
    if (self.atome == null) self.atome = nil;

    return ($a = ["play", "false"], $send(self.atome, '[]=', $a), $a[$a.length - 1])}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "on"}));
  self.$new($hash2(["particle"], {"particle": "fullscreen"}));
  self.$new($hash2(["particle"], {"particle": "mute"}));
  self.$new($hash2(["particle"], {"particle": "drag"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "drag"})], function $$4(params){
    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      params = $hash2(["move"], {"move": true})
    };
    return params;});
  self.$new($hash2(["particle"], {"particle": "drop"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "drop"})], function $$5(params){
    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      params = $hash2(["action"], {"action": true})
    };
    return params;});
  self.$new($hash2(["particle"], {"particle": "over"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "over"})], function $$6(params, user_proc){var self = $$6.$$s == null ? this : $$6.$$s;

    
    if (params == null) params = nil;
    if (user_proc == null) user_proc = nil;
    if ($eqeq(params, true)) {
      params = "enter"
    };
    
    switch (params) {
      case "enter":
        self.enter_action_proc = user_proc
        break;
      case "leave":
        self.leave_action_proc = user_proc
        break;
      default:
        nil
    };
    return params;}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "sort"})], function $$7(_value, sort_proc){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (_value == null) _value = nil;
    if (sort_proc == null) sort_proc = nil;
    return (self.sort_proc = sort_proc);}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "targets"}));
  self.$new($hash2(["particle"], {"particle": "start"}));
  $send(self, 'new', [$hash2(["pre"], {"pre": "start"})], function $$8(_value, user_proc){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (_value == null) _value = nil;
    if (user_proc == null) user_proc = nil;
    return (self.animation_start_proc = user_proc);}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "stop"}));
  $send(self, 'new', [$hash2(["pre"], {"pre": "stop"})], function $$9(_value, user_proc){var self = $$9.$$s == null ? this : $$9.$$s;

    
    if (_value == null) _value = nil;
    if (user_proc == null) user_proc = nil;
    return (self.animation_stop_proc = user_proc);}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "begin"}));
  self.$new($hash2(["particle"], {"particle": "end"}));
  self.$new($hash2(["particle"], {"particle": "duration"}));
  self.$new($hash2(["particle"], {"particle": "mass"}));
  self.$new($hash2(["particle"], {"particle": "damping"}));
  self.$new($hash2(["particle"], {"particle": "stiffness"}));
  self.$new($hash2(["particle"], {"particle": "velocity"}));
  self.$new($hash2(["particle"], {"particle": "repeat"}));
  self.$new($hash2(["particle"], {"particle": "ease"}));
  return self.$new($hash2(["particle"], {"particle": "unbind"}));
};

Opal.modules["atome/genesis/generators/geometry"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $send = Opal.send, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $rb_times = Opal.rb_times, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('new,[],atome,/,>,width,height,*');
  
  self.$new($hash2(["particle"], {"particle": "width"}));
  self.$new($hash2(["particle"], {"particle": "height"}));
  return $send(self, 'new', [$hash2(["particle"], {"particle": "size"})], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, atome_width = nil, atome_height = nil, aspect_ratio = nil;

    
    if (params == null) params = nil;
    atome_width = self.$atome()['$[]']("width");
    atome_height = self.$atome()['$[]']("height");
    aspect_ratio = $rb_divide(atome_width, atome_height);
    if ($truthy($rb_gt(atome_width, atome_height))) {
      
      self.$width(params);
      return self.$height($rb_divide(params, aspect_ratio));
    } else {
      
      self.$width($rb_times(params, aspect_ratio));
      return self.$height(params);
    };}, {$$s: self});
};

Opal.modules["atome/genesis/generators/identity"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $neqeq = Opal.neqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,instance_of?,each,grab,[],atome,[]=,<<,type,detach_atome,!=,update_atome_id,add_to_atomes,each_with_index,particles,merge,monitor,send');
  
  self.$new($hash2(["particle"], {"particle": "attach"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "attach"})], function $$1(parents_ids){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (parents_ids == null) parents_ids = nil;
    if ($truthy(parents_ids['$instance_of?']($$('Atome')))) {
      parents_ids = parents_ids
    };
    if (!$truthy(parents_ids['$instance_of?']($$('Array')))) {
      parents_ids = [parents_ids]
    };
    $send(parents_ids, 'each', [], function $$2(parents_id){var self = $$2.$$s == null ? this : $$2.$$s, parents_found = nil, current_type = nil, parent_type_container = nil;

      
      if (parents_id == null) parents_id = nil;
      if ($truthy(parents_id['$instance_of?']($$('Atome')))) {
        parents_id = parents_id
      };
      parents_found = self.$grab(parents_id);
      current_type = self.$atome()['$[]']("type");
      if (!$truthy(parents_found.$atome()['$[]'](current_type))) {
        parents_found.$atome()['$[]='](current_type, [])
      };
      parent_type_container = ($truthy(parents_found.$atome()['$[]'](current_type)['$instance_of?']($$('Array'))) ? (parents_found.$atome()['$[]'](current_type)) : ([parents_found.$atome()['$[]'](current_type)['$[]']("id")]));
      parent_type_container['$<<'](self.$atome()['$[]']("id"));
      if (!$truthy(parents_found.$atome()['$[]']("attached"))) {
        parents_found.$atome()['$[]=']("attached", [])
      };
      return parents_found.$atome()['$[]']("attached")['$<<'](self.$atome()['$[]']("id"));}, {$$s: self});
    return parents_ids;}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "attached"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "attached"})], function $$3(children_ids){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (children_ids == null) children_ids = nil;
    if ($truthy(children_ids['$instance_of?']($$('Atome')))) {
      children_ids = children_ids
    };
    if (!$truthy(children_ids['$instance_of?']($$('Array')))) {
      children_ids = [children_ids]
    };
    return $send(children_ids, 'each', [], function $$4(child_id){var $a, self = $$4.$$s == null ? this : $$4.$$s, child_found = nil, parents_found = nil, child_found_type = nil, child_type_container = nil;
      if (self.atome == null) self.atome = nil;

      
      if (child_id == null) child_id = nil;
      if ($truthy(child_id['$instance_of?']($$('Atome')))) {
        child_id = child_id
      };
      child_found = self.$grab(child_id);
      parents_found = self.atome['$[]']("id");
      child_found_type = child_found.$type();
      if (!$truthy(self.atome['$[]'](child_found_type))) {
        self.atome['$[]='](child_found_type, [])
      };
      child_type_container = ($truthy(self.atome['$[]'](child_found_type)['$instance_of?']($$('Array'))) ? (self.atome['$[]'](child_found_type)) : ([self.atome['$[]'](child_found_type)['$[]']("id")]));
      child_type_container['$<<'](child_id);
      return ($a = ["attach", [parents_found]], $send(child_found.$atome(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});}, {$$s: self});
  self.$new($hash2(["particle", "store"], {"particle": "detached", "store": false}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "detached"})], function $$5(values){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (values == null) values = nil;
    if ($truthy(values['$instance_of?']($$('Array')))) {
      $send(values, 'each', [], function $$6(value){var self = $$6.$$s == null ? this : $$6.$$s;

        
        if (value == null) value = nil;
        return self.$detach_atome(value);}, {$$s: self})
    } else {
      
      self.$detach_atome(values);
      values = [values];
    };
    return values;}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "type"}));
  self.$new($hash2(["particle"], {"particle": "id"}));
  $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "id"})], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s;
    if (self.atome == null) self.atome = nil;

    
    if (params == null) params = nil;
    if ($neqeq(self.atome['$[]']("id"), params)) {
      $$('Universe').$update_atome_id(params, self, self.atome['$[]']("id"))
    } else {
      $$('Universe').$add_to_atomes(params, self)
    };
    return params;}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "name"}));
  self.$new($hash2(["particle"], {"particle": "active"}));
  self.$new($hash2(["particle", "type"], {"particle": "intricate", "type": "array"}));
  return $send(self, 'new', [$hash2(["particle"], {"particle": "clones"})], function $$8(clones_found){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (clones_found == null) clones_found = nil;
    return $send(clones_found, 'each_with_index', [], function $$9(clone_found, index){var $a, self = $$9.$$s == null ? this : $$9.$$s, particles_intricated = nil, $ret_or_1 = nil, clone_id = nil, original_id = nil, cloned_atome = nil;

      
      if (clone_found == null) clone_found = nil;
      if (index == null) index = nil;
      particles_intricated = ($truthy(($ret_or_1 = clone_found['$[]']("intricate"))) ? ($ret_or_1) : (($a = ["intricate", []], $send(clone_found, '[]=', $a), $a[$a.length - 1])));
      clone_id = "" + (self.$particles()['$[]']("id")) + "_clone_" + (index);
      original_id = self.$atome()['$[]']("id");
      clone_found['$[]=']("id", clone_id);
      clone_found = self.$particles().$merge(clone_found);
      cloned_atome = $$('Atome').$new($hash2(["clone"], {"clone": clone_found}));
      return $send(cloned_atome, 'monitor', [$hash2(["atomes", "particles"], {"atomes": [original_id], "particles": particles_intricated})], function $$10(_atome, particle, value){
        
        if (_atome == null) _atome = nil;
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        return cloned_atome.$send(particle, value);});}, {$$s: self});}, {$$s: self});
};

Opal.modules["atome/genesis/generators/material"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,each,send,puts,particle_to_remove_decision,classes,[],[]=,|,id,delete');
  
  $send(self, 'new', [$hash2(["particle"], {"particle": "red"})], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "green"})], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "blue"})], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "alpha"})], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

    return self}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "diffusion"})], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;

    return self}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "visual"}));
  self.$new($hash2(["particle"], {"particle": "overflow"}));
  self.$new($hash2(["particle"], {"particle": "edit"}));
  self.$new($hash2(["particle"], {"particle": "style"}));
  $send(self, 'new', [$hash2(["pre"], {"pre": "style"})], function $$6(styles_send, _user_proc){var self = $$6.$$s == null ? this : $$6.$$s;

    
    if (styles_send == null) styles_send = nil;
    if (_user_proc == null) _user_proc = nil;
    return $send(styles_send, 'each', [], function $$7(particle_send, value){var self = $$7.$$s == null ? this : $$7.$$s;

      
      if (particle_send == null) particle_send = nil;
      if (value == null) value = nil;
      return self.$send(particle_send, value);}, {$$s: self});}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "hide"}));
  $send(self, 'new', [$hash2(["particle"], {"particle": "remove"})], function $$8(particle_to_remove){var self = $$8.$$s == null ? this : $$8.$$s;

    
    if (particle_to_remove == null) particle_to_remove = nil;
    
    switch (particle_to_remove) {
      case "color":
        return self.$send(particle_to_remove, "black")
      case "shadow":
        return self.$puts("code to write")
      default:
        return self.$particle_to_remove_decision(particle_to_remove)
    };}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "classes"})], function $$9(value){var $a, self = $$9.$$s == null ? this : $$9.$$s, $logical_op_recvr_tmp_1 = nil, $ret_or_1 = nil, $binary_op_recvr_tmp_1 = nil;

    
    if (value == null) value = nil;
    
    $logical_op_recvr_tmp_1 = $$('Universe').$classes();
    if ($truthy(($ret_or_1 = $logical_op_recvr_tmp_1['$[]'](value)))) {
      $ret_or_1
    } else {
      $logical_op_recvr_tmp_1['$[]='](value, [])
    };;
    
    $binary_op_recvr_tmp_1 = $$('Universe').$classes();
    return ($a = [value, $binary_op_recvr_tmp_1['$[]'](value)['$|']([self.$id()])], $send($binary_op_recvr_tmp_1, '[]=', $a), $a[$a.length - 1]);;}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "remove_classes"})], function $$10(value){var self = $$10.$$s == null ? this : $$10.$$s;

    
    if (value == null) value = nil;
    return $$('Universe').$classes()['$[]'](value).$delete(self.$id());}, {$$s: self});
  return self.$new($hash2(["particle"], {"particle": "opacity"}));
};

Opal.modules["atome/genesis/generators/spatial"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,is_a?,instance_exec,to_proc');
  
  $send(self, 'new', [$hash2(["particle", "type"], {"particle": "left", "type": "integer"})], function $$1(_params, user_proc){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (_params == null) _params = nil;
    if (user_proc == null) user_proc = nil;
    if ($truthy(user_proc['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [], user_proc.$to_proc())
    } else {
      return nil
    };}, {$$s: self});
  self.$new($hash2(["particle", "type"], {"particle": "right", "type": "integer"}));
  self.$new($hash2(["particle", "type"], {"particle": "top", "type": "integer"}));
  self.$new($hash2(["particle", "type"], {"particle": "bottom", "type": "integer"}));
  self.$new($hash2(["particle", "type"], {"particle": "rotate", "type": "integer"}));
  self.$new($hash2(["particle", "type"], {"particle": "direction", "type": "string"}));
  self.$new($hash2(["particle", "type"], {"particle": "center", "type": "string"}));
  return self.$new($hash2(["particle", "type"], {"particle": "depth", "type": "integer"}));
};

Opal.modules["atome/genesis/generators/time"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,new');
  
  generator = $$('Genesis').$generator();
  return self.$new($hash2(["particle", "type"], {"particle": "markers", "type": "hash"}));
};

Opal.modules["atome/genesis/generators/utility"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new,[],is_a?,instance_exec,to_proc,==,tag,rendering,delete,each,grab,atome,type,<<,[]=,materials,instance_of?,send,to_s,split,union,renderer_list');
  
  self.$new($hash2(["particle"], {"particle": "renderers"}));
  self.$new($hash2(["particle"], {"particle": "code"}));
  $send(self, 'new', [$hash2(["particle"], {"particle": "run"})], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, code_found = nil;
    if (self.atome == null) self.atome = nil;

    
    if (params == null) params = nil;
    code_found = self.atome['$[]']("code");
    if ($truthy(code_found['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [params], code_found.$to_proc())
    } else {
      return nil
    };}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "broadcast"}));
  self.$new($hash2(["particle"], {"particle": "data"}));
  $send(self, 'new', [$hash2(["particle", "render"], {"particle": "delete", "render": false})], function $$2(params){var user_proc = $$2.$$p || nil, self = $$2.$$s == null ? this : $$2.$$s, id_found = nil, parents_found = nil, materials_found = nil;
    if (self.atome == null) self.atome = nil;

    $$2.$$p = null;
    
    ;
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      if (($truthy(self.$tag()) && ($truthy(self.$tag()['$[]']("persistent"))))) {
        return nil
      } else {
        
        $send(self, 'rendering', ["delete", params], user_proc.$to_proc());
        id_found = self.atome['$[]']("id");
        $$('Universe').$delete(id_found);
        parents_found = self.atome['$[]']("attach");
        return $send(parents_found, 'each', [], function $$4(parent_id_found){var $a, self = $$4.$$s == null ? this : $$4.$$s, parent_found = nil, previous_parent_type_child = nil, previous_parent_attached_child = nil, new_type_container = nil, new_attached_container = nil;

          
          if (parent_id_found == null) parent_id_found = nil;
          parent_found = self.$grab(parent_id_found);
          if (!$truthy(parent_found)) {
            return nil
          };
          previous_parent_type_child = parent_found.$atome()['$[]'](self.$type());
          previous_parent_attached_child = parent_found.$atome()['$[]']("attached");
          new_type_container = [];
          $send(previous_parent_type_child, 'each', [], function $$5(atome_found){
            
            if (atome_found == null) atome_found = nil;
            if ($eqeq(atome_found, id_found)) {
              return nil
            } else {
              return new_type_container['$<<'](atome_found)
            };});
          parent_found.$atome()['$[]='](self.$type(), new_type_container);
          new_attached_container = [];
          $send(previous_parent_attached_child, 'each', [], function $$6(atome_found){
            
            if (atome_found == null) atome_found = nil;
            if ($eqeq(atome_found, id_found)) {
              return nil
            } else {
              return new_attached_container['$<<'](atome_found)
            };});
          return ($a = ["attached", new_attached_container], $send(parent_found.$atome(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
      }
    } else if ($eqeq(params, "materials")) {
      return $send(self.$materials(), 'each', [], function $$7(atome_id_found){var self = $$7.$$s == null ? this : $$7.$$s;

        
        if (atome_id_found == null) atome_id_found = nil;
        return self.$grab(atome_id_found).$delete(true);}, {$$s: self})
    } else if ($truthy(params['$[]']("id"))) {
      
      if ($eqeq(params['$[]']("recursive"), true)) {
        
        materials_found = self.$grab(params['$[]']("id")).$materials();
        $send(materials_found, 'each', [], function $$8(atome_id_found){var self = $$8.$$s == null ? this : $$8.$$s;

          
          if (atome_id_found == null) atome_id_found = nil;
          return self.$grab(atome_id_found).$delete(true);}, {$$s: self});
      };
      return self.$grab(params['$[]']("id")).$delete(true);
    } else if ($truthy(params['$instance_of?']($$('Hash')))) {
      return $send(params, 'each', [], function $$9(param, value){var $a, self = $$9.$$s == null ? this : $$9.$$s;

        
        if (param == null) param = nil;
        if (value == null) value = nil;
        return ($a = [value, nil], $send(self.$atome()['$[]'](param), '[]=', $a), $a[$a.length - 1]);}, {$$s: self})
    } else {
      return self.$send(params, 0)
    };}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "clear"}));
  $send(self, 'new', [$hash2(["post"], {"post": "clear"})], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s, attached_found = nil;
    if (self.atome == null) self.atome = nil;

    
    attached_found = [];
    $send(self.atome['$[]']("attached"), 'each', [], function $$11(attached_id_found){
      
      if (attached_id_found == null) attached_id_found = nil;
      return attached_found['$<<'](attached_id_found);});
    return $send(attached_found, 'each', [], function $$12(child_id_found){var self = $$12.$$s == null ? this : $$12.$$s, child_found = nil;

      
      if (child_id_found == null) child_id_found = nil;
      child_found = self.$grab(child_id_found);
      if ($truthy(child_found)) {
        return child_found.$delete(true)
      } else {
        return nil
      };}, {$$s: self});}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "path"}));
  $send(self, 'new', [$hash2(["particle"], {"particle": "schedule"})], function $$13(date, proc){var self = $$13.$$s == null ? this : $$13.$$s, delimiters = nil, format_date = nil;

    
    if (date == null) date = nil;
    if (proc == null) proc = nil;
    date = date.$to_s();
    delimiters = [",", " ", ":", "-"];
    format_date = date.$split($$('Regexp').$union(delimiters));
    return $send($$('Universe').$renderer_list(), 'each', [], function $$14(renderer){var self = $$14.$$s == null ? this : $$14.$$s;

      
      if (renderer == null) renderer = nil;
      return $send(self, 'send', ["" + (renderer) + "_schedule", format_date], proc.$to_proc());}, {$$s: self});}, {$$s: self});
  $send(self, 'new', [$hash2(["particle"], {"particle": "read"})], function $$15(file, proc){var self = $$15.$$s == null ? this : $$15.$$s;

    
    if (file == null) file = nil;
    if (proc == null) proc = nil;
    return $send($$('Universe').$renderer_list(), 'each', [], function $$16(renderer){var self = $$16.$$s == null ? this : $$16.$$s;

      
      if (renderer == null) renderer = nil;
      return $send(self, 'send', ["" + (renderer) + "_reader", file], proc.$to_proc());}, {$$s: self});}, {$$s: self});
  self.$new($hash2(["particle"], {"particle": "cursor"}));
  self.$new($hash2(["particle"], {"particle": "preset"}));
  self.$new($hash2(["particle", "type"], {"particle": "relations", "type": "hash"}));
  self.$new($hash2(["particle", "render", "type"], {"particle": "tag", "render": false, "type": "hash"}));
  self.$new($hash2(["particle", "render"], {"particle": "batch", "render": false}));
  return $send(self, 'new', [$hash2(["sanitizer"], {"sanitizer": "batch"})], function $$17(params){
    
    if (params == null) params = nil;
    return $$('Batch').$new(params);});
};

Opal.modules["atome/helpers/utilities"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $eqeq = Opal.eqeq, $gvars = Opal.gvars, $defs = Opal.defs, $def = Opal.def, $send = Opal.send, $return_val = Opal.return_val, $truthy = Opal.truthy, $hash2 = Opal.hash2, $slice = Opal.slice, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('private,==,to_json,atome_js,send,each,get_sanitizer_method,is_a?,instance_exec,to_proc,instance_variable_get,each_value,include?,[],public,atome,[]=,grab,length,merge,attr_accessor,instance_variable_set,<<,real_atome,property,puts,store_code_bloc,particle_list,delete,collapse,value,each_with_index,instance_of?,new,concat');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.atome = $proto.broadcast = nil;
    
    self.$private();
    $defs(self, '$controller_sender', function $$controller_sender(message) {
      var self = this, json_msg = nil;
      if ($gvars.host == null) $gvars.host = nil;

      
      if ($eqeq($gvars.host, "browser")) {
        return nil
      };
      json_msg = message.$to_json();
      return self.$atome_js().controller_sender(json_msg);
    });
    
    $def(self, '$response_listener', function $$response_listener(hashed_msg) {
      var self = this, js_action = nil, js_body = nil;

      
      js_action = hashed_msg["action"];
      js_body = hashed_msg["body"];
      return self.$send(js_action, js_body);
    });
    $defs(self, '$controller_listener', function $$controller_listener() {
      var self = this;
      if ($gvars.host == null) $gvars.host = nil;

      
      if ($eqeq($gvars.host, "browser")) {
        return nil
      };
      return self.$atome_js().controller_listener();
    });
    
    $def(self, '$collapse', function $$collapse() {
      var self = this;

      return $send(self.atome, 'each', [], function $$1(element, value){var self = $$1.$$s == null ? this : $$1.$$s;

        
        if (element == null) element = nil;
        if (value == null) value = nil;
        return self.$send(element, value);}, {$$s: self})
    });
    
    $def(self, '$security_pass', $return_val(true));
    
    $def(self, '$sanitize', function $$sanitize(element, params) {
      var user_proc = $$sanitize.$$p || nil, self = this, bloc_found = nil;

      $$sanitize.$$p = null;
      
      ;
      bloc_found = $$('Universe').$get_sanitizer_method(element);
      if ($truthy(bloc_found['$is_a?']($$('Proc')))) {
        params = $send(self, 'instance_exec', [params, user_proc], bloc_found.$to_proc())
      };
      return params;
    });
    
    $def(self, '$history', function $$history(property, value) {
      
      return "historize : " + (property) + " " + (value)
    });
    
    $def(self, '$broadcasting', function $$broadcasting(element) {
      var self = this, params = nil;

      
      params = self.$instance_variable_get("@" + (element));
      return $send(self.broadcast, 'each_value', [], function $$2(particle_monitored){var self = $$2.$$s == null ? this : $$2.$$s, code_found = nil;

        
        if (particle_monitored == null) particle_monitored = nil;
        if ($truthy(particle_monitored['$[]']("particles")['$include?'](element))) {
          
          code_found = particle_monitored['$[]']("code");
          if ($truthy(code_found['$is_a?']($$('Proc')))) {
            return $send(self, 'instance_exec', [self, element, params], code_found.$to_proc())
          } else {
            return nil
          };
        } else {
          return nil
        };}, {$$s: self});
    });
    self.$public();
    
    $def(self, '$monitor', function $$monitor(params) {
      var proc_monitoring = $$monitor.$$p || nil, $a, self = this, monitoring = nil, $logical_op_recvr_tmp_1 = nil, $ret_or_1 = nil;

      $$monitor.$$p = null;
      
      ;
      if (params == null) params = nil;
      if ($truthy(params)) {
        
        monitoring = (($logical_op_recvr_tmp_1 = self.$atome()), ($truthy(($ret_or_1 = $logical_op_recvr_tmp_1['$[]']("monitor"))) ? ($ret_or_1) : (($a = ["monitor", $hash2([], {})], $send($logical_op_recvr_tmp_1, '[]=', $a), $a[$a.length - 1]))));
        return $send(params['$[]']("atomes"), 'each', [], function $$3(atome_id){var $b, self = $$3.$$s == null ? this : $$3.$$s, target_broadcaster = nil, monitor_id = nil;

          
          if (atome_id == null) atome_id = nil;
          target_broadcaster = self.$grab(atome_id).$instance_variable_get("@broadcast");
          monitor_id = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : ("monitor" + (target_broadcaster.$length())));
          monitoring['$[]='](monitor_id, params.$merge($hash2(["code"], {"code": proc_monitoring})));
          return ($b = [monitor_id, $hash2(["particles", "code"], {"particles": params['$[]']("particles"), "code": proc_monitoring})], $send(target_broadcaster, '[]=', $b), $b[$b.length - 1]);}, {$$s: self});
      } else {
        return self.$atome()['$[]']("monitor")
      };
    }, -1);
    
    $def(self, '$store_code_bloc', function $$store_code_bloc(element) {
      var user_proc = $$store_code_bloc.$$p || nil, self = this;

      $$store_code_bloc.$$p = null;
      
      ;
      $$('Object').$attr_accessor("" + (element) + "_code");
      return self.$instance_variable_set("@" + (element) + "_code", user_proc);
    });
    
    $def(self, '$particles', function $$particles(particles_found) {
      var self = this;

      
      if (particles_found == null) particles_found = nil;
      if ($truthy(particles_found)) {
        return $send(particles_found, 'each', [], function $$4(particle_found, value_found){var $a, self = $$4.$$s == null ? this : $$4.$$s;

          
          if (particle_found == null) particle_found = nil;
          if (value_found == null) value_found = nil;
          return ($a = [particle_found, value_found], $send(self.$atome(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self})
      } else {
        return self.$atome()
      };
    }, -1);
    
    $def(self, '$<<', function $Atome_$lt$lt$5(particle) {
      var self = this;

      return self.$real_atome()['$[]'](self.$property())['$<<'](particle)
    });
    
    $def(self, '$add_to_integer', function $$add_to_integer(_atome_found, _particle_found) {
      var _user_proc = $$add_to_integer.$$p || nil, self = this;

      $$add_to_integer.$$p = null;
      
      ;
      return self.$puts("there's no interest to add anything to an integer!");
    });
    
    $def(self, '$add_to_float', function $$add_to_float(_atome_found, _particle_found) {
      var _user_proc = $$add_to_float.$$p || nil, self = this;

      $$add_to_float.$$p = null;
      
      ;
      return self.$puts("there's no interest to add anything to an integer!");
    });
    
    $def(self, '$add_to_bignum', function $$add_to_bignum(_atome_found, _particle_found) {
      var _user_proc = $$add_to_bignum.$$p || nil, self = this;

      $$add_to_bignum.$$p = null;
      
      ;
      return self.$puts("there's no interest to add anything to an integer!");
    });
    
    $def(self, '$add_to_string', function $$add_to_string(_atome_found, _particle_found) {
      var _user_proc = $$add_to_string.$$p || nil, self = this;

      $$add_to_string.$$p = null;
      
      ;
      return self.$puts("there's no interest to add anything to an string!");
    });
    
    $def(self, '$add_to_hash', function $$add_to_hash(particle, values) {
      var user_proc = $$add_to_hash.$$p || nil, self = this;

      $$add_to_hash.$$p = null;
      
      ;
      self.atome['$[]']("add")['$[]='](particle, true);
      if ($truthy(user_proc)) {
        $send(self, 'store_code_bloc', [particle], user_proc.$to_proc())
      };
      return $send(values, 'each', [], function $$6(value_id, value){var $a, self = $$6.$$s == null ? this : $$6.$$s;
        if (self.atome == null) self.atome = nil;

        
        if (value_id == null) value_id = nil;
        if (value == null) value = nil;
        return ($a = [value_id, value], $send(self.atome['$[]'](particle), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
    });
    
    $def(self, '$add_to_array', function $$add_to_array(particle, value) {
      var _user_proc = $$add_to_array.$$p || nil, self = this;

      $$add_to_array.$$p = null;
      
      ;
      self.atome['$[]']("add")['$[]='](particle, true);
      return self.atome['$[]'](particle)['$<<'](value);
    });
    
    $def(self, '$add_to_atome', function $$add_to_atome(atome_type, particle_found) {
      var user_proc = $$add_to_atome.$$p || nil, self = this;

      $$add_to_atome.$$p = null;
      
      ;
      self.atome['$[]']("add")['$[]='](atome_type, particle_found);
      return $send(self, 'send', [atome_type, particle_found], user_proc.$to_proc());
    });
    
    $def(self, '$add', function $$add(particles) {
      var user_proc = $$add.$$p || nil, self = this;

      $$add.$$p = null;
      
      ;
      if (!$truthy(self.atome['$[]']("add"))) {
        self.atome['$[]=']("add", $hash2([], {}))
      };
      return $send(particles, 'each', [], function $$7(particle, value){var self = $$7.$$s == null ? this : $$7.$$s, particle_type = nil, $ret_or_1 = nil;
        if (self.atome == null) self.atome = nil;

        
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        particle_type = ($truthy(($ret_or_1 = $$('Universe').$particle_list()['$[]'](particle))) ? ($ret_or_1) : ("atome"));
        $send(self, 'send', ["add_to_" + (particle_type), particle, value], user_proc.$to_proc());
        return self.atome['$[]']("add").$delete(particle);}, {$$s: self});
    });
    
    $def(self, '$substract', function $$substract(_particles) {
      var _user_proc = $$substract.$$p || nil, self = this;

      $$substract.$$p = null;
      
      ;
      return self.$puts("write code here to remove add elements");
    });
    
    $def(self, '$refresh', function $$refresh() {
      var self = this;

      return self.$collapse()
    });
    
    $def(self, '$each', function $$each() {
      var proc = $$each.$$p || nil, self = this;

      $$each.$$p = null;
      
      ;
      return $send(self.$value(), 'each', [], function $$8(val){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (val == null) val = nil;
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [val], proc.$to_proc())
        } else {
          return nil
        };}, {$$s: self});
    });
    
    $def(self, '$include?', function $Atome_include$ques$9(value) {
      var self = this;

      return self['$include?'](value)
    });
    
    $def(self, '$each_with_index', function $$each_with_index($a) {
      var block = $$each_with_index.$$p || nil, $post_args, args, self = this;

      $$each_with_index.$$p = null;
      
      ;
      $post_args = $slice(arguments);
      args = $post_args;
      return $send(self.$value(), 'each_with_index', [], block.$to_proc());
    }, -1);
    
    $def(self, '$[]', function $Atome_$$$10(range) {
      var self = this;

      if ($truthy(self['$instance_of?']($$('Atome')))) {
        return self.$value()['$[]'](range)
      } else if ($truthy(self.$value()['$[]'](range)['$instance_of?']($$('Array')))) {
        return $$('Batch').$new(self.$value()['$[]'](range))
      } else {
        return nil
      }
    });
    
    $def(self, '$[]=', function $Atome_$$$eq$11(params, value) {
      var $a, self = this;

      return ($a = [params, value], $send(self, '[]=', $a), $a[$a.length - 1])
    });
    
    $def(self, '$set', function $$set(params) {
      var self = this;

      return $send(params, 'each', [], function $$12(particle, value){var self = $$12.$$s == null ? this : $$12.$$s;

        
        if (particle == null) particle = nil;
        if (value == null) value = nil;
        return self.$send(particle, value);}, {$$s: self})
    });
    
    $def(self, '$particle_to_remove_decision', function $$particle_to_remove_decision(particle_to_remove) {
      var self = this;

      if ($truthy(particle_to_remove['$instance_of?']($$('Hash')))) {
        return $send(particle_to_remove, 'each', [], function $$13(particle_found, value){var self = $$13.$$s == null ? this : $$13.$$s;

          
          if (particle_found == null) particle_found = nil;
          if (value == null) value = nil;
          return self.$send("remove_" + (particle_found), value);}, {$$s: self})
      } else {
        return self.$send(particle_to_remove, 0)
      }
    });
    
    $def(self, '$materials', function $$materials() {
      var self = this, images_found = nil, $ret_or_1 = nil, videos_found = nil, shapes_found = nil, web_found = nil, texts_found = nil;

      
      images_found = ($truthy(($ret_or_1 = self.$atome()['$[]']("image"))) ? ($ret_or_1) : ([]));
      videos_found = ($truthy(($ret_or_1 = self.$atome()['$[]']("video"))) ? ($ret_or_1) : ([]));
      shapes_found = ($truthy(($ret_or_1 = self.$atome()['$[]']("shape"))) ? ($ret_or_1) : ([]));
      web_found = ($truthy(($ret_or_1 = self.$atome()['$[]']("web"))) ? ($ret_or_1) : ([]));
      texts_found = ($truthy(($ret_or_1 = self.$atome()['$[]']("text"))) ? ($ret_or_1) : ([]));
      return images_found.$concat(videos_found).$concat(shapes_found).$concat(web_found).$concat(texts_found);
    });
    
    $def(self, '$physical', function $$physical() {
      var self = this, types = nil, atomes_found = nil;

      
      types = ["text", "image", "video", "shape", "web"];
      atomes_found = [];
      $send(types, 'each', [], function $$14(type){var self = $$14.$$s == null ? this : $$14.$$s, ids_found = nil;

        
        if (type == null) type = nil;
        ids_found = self.$send(type);
        if (!$truthy(ids_found)) {
          return nil
        };
        return $send(ids_found, 'each', [], function $$15(id_found){
          
          if (id_found == null) id_found = nil;
          return atomes_found['$<<'](id_found);});}, {$$s: self});
      return atomes_found;
    });
    return $def(self, '$detach_atome', function $$detach_atome(atome_id_to_detach) {
      var self = this, atome_to_detach = nil, atome_type_found = nil, atome_id_found = nil;

      
      atome_to_detach = self.$grab(atome_id_to_detach);
      if (!$truthy(atome_to_detach)) {
        return nil
      };
      atome_type_found = atome_to_detach.$atome()['$[]']("type");
      atome_id_found = atome_to_detach.$atome()['$[]']("id");
      self.atome['$[]'](atome_type_found).$delete(atome_id_found);
      return self.atome['$[]']("attached").$delete(atome_id_to_detach);
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/renderers/browser/effect"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $eqeqeq = Opal.eqeqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,===,each,<<,to_s,join,[]=,style,send');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["browser_smooth"], function $$1(value){var $a, self = $$1.$$s == null ? this : $$1.$$s, format_params = nil, $ret_or_1 = nil, properties = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    format_params = ($eqeqeq($$('Array'), ($ret_or_1 = value)) ? (((properties = []), $send(value, 'each', [], function $$2(param){
      
      if (param == null) param = nil;
      return properties['$<<']("" + (param) + "px");}), properties.$join(" ").$to_s())) : ($eqeqeq($$('Integer'), $ret_or_1) ? ("" + (value) + "px") : (value)));
    return ($a = ["border-radius", format_params], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  return $send(generator, 'build_render', ["browser_blur"], function $$3(value){var self = $$3.$$s == null ? this : $$3.$$s;
    if (self.browser_type == null) self.browser_type = nil;
    if (self.browser_object == null) self.browser_object = nil;
    if (self.atome == null) self.atome = nil;

    
    if (value == null) value = nil;
    return $$('BrowserHelper').$send("browser_blur_" + (self.browser_type), self.browser_object, value, self.atome);}, {$$s: self});
};

Opal.modules["atome/renderers/browser/event"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $neqeq = Opal.neqeq, $slice = Opal.slice, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,attribute,send,!=,currentTime=,[],currentTime,is_a?,instance_exec,to_proc,pause,on,atome,atome_js,muted,browser_object,unmuted,each');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["browser_touch"], function $$1(value, proc){var self = $$1.$$s == null ? this : $$1.$$s, atome_id = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (proc == null) proc = nil;
    atome_id = self.browser_object.$attribute("id");
    return $$('BrowserHelper').$send("browser_touch_" + (value), atome_id, self, proc);}, {$$s: self});
  $send(generator, 'build_render', ["browser_over"], function $$2(value, proc){var self = $$2.$$s == null ? this : $$2.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (proc == null) proc = nil;
    return $$('BrowserHelper').$send("browser_over_" + (value), self.browser_object, self, proc);}, {$$s: self});
  $send(generator, 'build_render', ["browser_play"], function $$3(value, proc){var self = $$3.$$s == null ? this : $$3.$$s;
    if (self.browser_object == null) self.browser_object = nil;
    if (self.atome == null) self.atome = nil;

    
    if (value == null) value = nil;
    if (proc == null) proc = nil;
    if ($neqeq(value, true)) {
      self.browser_object['$currentTime='](value)
    };
    return $$('BrowserHelper').$send("browser_play_" + (self.atome['$[]']("type")), value, self.browser_object, self.atome, self, proc);}, {$$s: self});
  $send(generator, 'build_render', ["browser_time"], function $$4($a, $b){var $post_args, value, _proc, $c, self = $$4.$$s == null ? this : $$4.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    $post_args = $slice(arguments);
    
    if ($post_args.length > 1) value = $post_args.shift();if (value == null) value = nil;
    
    _proc = $post_args.shift();if (_proc == null) _proc = nil;
    if ($truthy(value)) {
      return ($c = [value], $send(self.browser_object, 'currentTime=', $c), $c[$c.length - 1])
    } else {
      return self.browser_object.$currentTime()
    };}, {$$arity: -2, $$s: self});
  $send(generator, 'build_render', ["browser_pause"], function $$5(_value, proc){var self = $$5.$$s == null ? this : $$5.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (_value == null) _value = nil;
    if (proc == null) proc = nil;
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [self.browser_object.$currentTime()], proc.$to_proc())
    };
    return self.browser_object.$pause();}, {$$s: self});
  $send(generator, 'build_render', ["on"], function $$6(value, proc){var self = $$6.$$s == null ? this : $$6.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (proc == null) proc = nil;
    return $send(self.browser_object, 'on', [value], function $$7(e){var self = $$7.$$s == null ? this : $$7.$$s;

      
      if (e == null) e = nil;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [e], proc.$to_proc())
      } else {
        return nil
      };}, {$$s: self});}, {$$s: self});
  $send(generator, 'build_render', ["fullscreen"], function $$8(_value, _proc){var self = $$8.$$s == null ? this : $$8.$$s, atome_id = nil;

    
    if (_value == null) _value = nil;
    if (_proc == null) _proc = nil;
    atome_id = self.$atome()['$[]']("id");
    return self.$atome_js().fullscreen(atome_id);}, {$$s: self});
  $send(generator, 'build_render', ["mute"], function $$9(value, _proc){var self = $$9.$$s == null ? this : $$9.$$s;

    
    if (value == null) value = nil;
    if (_proc == null) _proc = nil;
    if ($truthy(value)) {
      return self.$browser_object().$muted()
    } else {
      return self.$browser_object().$unmuted()
    };}, {$$s: self});
  $send(generator, 'build_render', ["browser_drag"], function $$10(options, proc){var self = $$10.$$s == null ? this : $$10.$$s;

    
    if (options == null) options = nil;
    if (proc == null) proc = nil;
    return $send(options, 'each', [], function $$11(method, params){var self = $$11.$$s == null ? this : $$11.$$s, atome_id = nil;
      if (self.atome == null) self.atome = nil;

      
      if (method == null) method = nil;
      if (params == null) params = nil;
      atome_id = self.atome['$[]']("id");
      return $$('BrowserHelper').$send("browser_drag_" + (method), params, atome_id, self, proc);}, {$$s: self});}, {$$s: self});
  $send(generator, 'build_render', ["browser_drop"], function $$12(options, proc){var self = $$12.$$s == null ? this : $$12.$$s;

    
    if (options == null) options = nil;
    if (proc == null) proc = nil;
    return $send(options, 'each', [], function $$13(method, params){var self = $$13.$$s == null ? this : $$13.$$s, atome_id = nil;
      if (self.atome == null) self.atome = nil;

      
      if (method == null) method = nil;
      if (params == null) params = nil;
      atome_id = self.atome['$[]']("id");
      return $$('BrowserHelper').$send("browser_drop_" + (method), params, atome_id, self, proc);}, {$$s: self});}, {$$s: self});
  $send(generator, 'build_render', ["browser_sort"], function $$14(options, _proc){var self = $$14.$$s == null ? this : $$14.$$s;
    if (self.atome == null) self.atome = nil;

    
    if (options == null) options = nil;
    if (_proc == null) _proc = nil;
    return self.$atome_js().sort(options, self.atome['$[]']("id"), self);}, {$$s: self});
  return $send(generator, 'build_render', ["browser_unbind"], function $$15(options, _proc){var self = $$15.$$s == null ? this : $$15.$$s, id_found = nil;

    
    if (options == null) options = nil;
    if (_proc == null) _proc = nil;
    id_found = self.$atome()['$[]']("id");
    
//const el = document.getElementById(id_found);
interact('#'+id_found).unset(options);
;}, {$$s: self});
};

Opal.modules["atome/renderers/browser/geometry"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,[]=,value_parse,style');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["browser_width"], function $$1(value){var $a, self = $$1.$$s == null ? this : $$1.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    return ($a = ["width", $$('BrowserHelper').$value_parse(value)], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  return $send(generator, 'build_render', ["browser_height"], function $$2(value){var $a, self = $$2.$$s == null ? this : $$2.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    return ($a = ["height", $$('BrowserHelper').$value_parse(value)], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
};

Opal.modules["atome/renderers/browser/identity"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $eqeq = Opal.eqeq, $neqeq = Opal.neqeq, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,==,inner_html,sub,id,inner_html=,!=,[],id=,browser_object,send,user_proc,each,instance_variable_get,grab,instance_of?,value,remove_class,remove,browser_document');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["browser_id"], function $$1(params){var $a, self = $$1.$$s == null ? this : $$1.$$s, prev_content = nil, new_content = nil;
    if (self.browser_type == null) self.browser_type = nil;
    if (self.browser_object == null) self.browser_object = nil;
    if (self.atome == null) self.atome = nil;

    
    if (params == null) params = nil;
    if ($eqeq(self.browser_type, "style")) {
      
      prev_content = self.browser_object.$inner_html();
      new_content = prev_content.$sub(self.browser_object.$id(), params);
      self.browser_object['$inner_html='](new_content);
    };
    if ($neqeq(self.atome['$[]']("id"), params)) {
      return ($a = [params], $send(self.$browser_object(), 'id=', $a), $a[$a.length - 1])
    } else {
      return nil
    };}, {$$s: self});
  $send(generator, 'build_render', ["browser_type"], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s;

    
    if (params == null) params = nil;
    return self.$send("browser_" + (params), self.$user_proc());}, {$$s: self});
  $send(generator, 'build_render', ["browser_attach"], function $$3(parents_found){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (parents_found == null) parents_found = nil;
    return $send(parents_found, 'each', [], function $$4(parent_found){var self = $$4.$$s == null ? this : $$4.$$s;
      if (self.browser_type == null) self.browser_type = nil;
      if (self.browser_object == null) self.browser_object = nil;
      if (self.atome == null) self.atome = nil;

      
      if (parent_found == null) parent_found = nil;
      return $$('BrowserHelper').$send("browser_attach_" + (self.browser_type), parent_found, self.browser_object, self.atome);}, {$$s: self});}, {$$s: self});
  $send(generator, 'build_render', ["browser_attached"], function $$5(children_found){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (children_found == null) children_found = nil;
    return $send(children_found, 'each', [], function $$6(child_found){var self = $$6.$$s == null ? this : $$6.$$s, children_browser_type = nil;
      if (self.browser_object == null) self.browser_object = nil;
      if (self.atome == null) self.atome = nil;

      
      if (child_found == null) child_found = nil;
      children_browser_type = self.$grab(child_found).$instance_variable_get("@browser_type");
      return $$('BrowserHelper').$send("browser_attached_" + (children_browser_type), children_found, self.browser_object, self.atome);}, {$$s: self});}, {$$s: self});
  return $send(generator, 'build_render', ["browser_detached"], function $$7(values, _user_proc){var self = $$7.$$s == null ? this : $$7.$$s;

    
    if (values == null) values = nil;
    if (_user_proc == null) _user_proc = nil;
    return $send(values, 'each', [], function $$8(value){var $a, self = $$8.$$s == null ? this : $$8.$$s;
      if (self.browser_object == null) self.browser_object = nil;

      
      if (value == null) value = nil;
      if ($truthy(value['$instance_of?']($$('Atome')))) {
        value = value.$value()
      };
      if ($eqeq(self.$grab(value).$instance_variable_get("@browser_type"), "style")) {
        return self.browser_object.$remove_class(value)
      } else {
        return ($a = $$('BrowserHelper').$browser_document()['$[]'](value), ($a === nil || $a == null) ? nil : $a.$remove())
      };}, {$$s: self});}, {$$s: self});
};

Opal.modules["atome/renderers/browser/material"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,*,[]=,[],send,value_parse,style,browser_object,==,attributes,add_class,remove_class,new');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["red"], function $$1(value){var $a, self = $$1.$$s == null ? this : $$1.$$s, red = nil, green = nil, blue = nil, alpha = nil, color_updated = nil;
    if (self.atome == null) self.atome = nil;

    
    if (value == null) value = nil;
    red = $rb_times(($a = ["red", value], $send(self.atome, '[]=', $a), $a[$a.length - 1]), 255);
    green = $rb_times(self.atome['$[]']("green"), 255);
    blue = $rb_times(self.atome['$[]']("blue"), 255);
    alpha = self.atome['$[]']("alpha");
    color_updated = "rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")";
    $$('BrowserHelper').$send("browser_colorize_" + (self.atome['$[]']("type")), color_updated, self.atome);
    return self;}, {$$s: self});
  $send(generator, 'build_render', ["green"], function $$2(value){var $a, self = $$2.$$s == null ? this : $$2.$$s, red = nil, green = nil, blue = nil, alpha = nil, color_updated = nil;
    if (self.atome == null) self.atome = nil;

    
    if (value == null) value = nil;
    self;
    red = $rb_times(self.atome['$[]']("red"), 255);
    green = $rb_times(($a = ["green", value], $send(self.atome, '[]=', $a), $a[$a.length - 1]), 255);
    blue = $rb_times(self.atome['$[]']("blue"), 255);
    alpha = self.atome['$[]']("alpha");
    color_updated = "rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")";
    $$('BrowserHelper').$send("browser_colorize_" + (self.atome['$[]']("type")), color_updated, self.atome);
    return self;}, {$$s: self});
  $send(generator, 'build_render', ["blue"], function $$3(value){var $a, self = $$3.$$s == null ? this : $$3.$$s, red = nil, green = nil, blue = nil, alpha = nil, color_updated = nil;
    if (self.atome == null) self.atome = nil;

    
    if (value == null) value = nil;
    red = $rb_times(self.atome['$[]']("red"), 255);
    green = $rb_times(self.atome['$[]']("green"), 255);
    blue = $rb_times(($a = ["blue", value], $send(self.atome, '[]=', $a), $a[$a.length - 1]), 255);
    alpha = self.atome['$[]']("alpha");
    color_updated = "rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")";
    $$('BrowserHelper').$send("browser_colorize_" + (self.atome['$[]']("type")), color_updated, self.atome);
    return self;}, {$$s: self});
  $send(generator, 'build_render', ["alpha"], function $$4(value){var $a, self = $$4.$$s == null ? this : $$4.$$s, red = nil, green = nil, blue = nil, alpha = nil, color_updated = nil;
    if (self.atome == null) self.atome = nil;

    
    if (value == null) value = nil;
    red = $rb_times(self.atome['$[]']("red"), 255);
    green = $rb_times(self.atome['$[]']("green"), 255);
    blue = $rb_times(self.atome['$[]']("blue"), 255);
    alpha = ($a = ["alpha", value], $send(self.atome, '[]=', $a), $a[$a.length - 1]);
    color_updated = "rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ")";
    $$('BrowserHelper').$send("browser_colorize_" + (self.atome['$[]']("type")), color_updated, self.atome);
    return self;}, {$$s: self});
  $send(generator, 'build_render', ["visual"], function $$5(value){var $a, self = $$5.$$s == null ? this : $$5.$$s;

    
    if (value == null) value = nil;
    value = $$('BrowserHelper').$value_parse(value['$[]']("size"));
    return ($a = ["font-size", value], $send(self.$browser_object().$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(generator, 'build_render', ["browser_edit"], function $$6(value){var $a, self = $$6.$$s == null ? this : $$6.$$s, caret_color = nil, user_select = nil, selection_color = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if ($eqeq(value, true)) {
      
      caret_color = "white";
      user_select = "text";
      selection_color = "blue";
    } else {
      
      caret_color = "transparent";
      user_select = "none";
      selection_color = "transparent";
    };
    self.browser_object.$attributes()['$[]=']("contenteditable", value);
    self.browser_object.$style()['$[]=']("caret-color", caret_color);
    self.browser_object.$style()['$[]=']("webkit-user-select", user_select);
    self.browser_object.$style()['$[]=']("-moz-user-select", user_select);
    return ($a = ["user-select", user_select], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(generator, 'build_render', ["browser_hide"], function $$7(value){var $a, self = $$7.$$s == null ? this : $$7.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    return ($a = ["display", "none"], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  $send(generator, 'build_render', ["browser_classes"], function $$8(value, _user_proc){var self = $$8.$$s == null ? this : $$8.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.browser_object.$add_class(value);}, {$$s: self});
  $send(generator, 'build_render', ["browser_remove_classes"], function $$9(value, _user_proc){var self = $$9.$$s == null ? this : $$9.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return self.browser_object.$remove_class(value);}, {$$s: self});
  return $send(self, 'new', [$hash2(["browser"], {"browser": "opacity"})], function $$10(value){var $a, self = $$10.$$s == null ? this : $$10.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    return ($a = ["opacity", value], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
};

Opal.modules["atome/renderers/browser/spatial"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $hash2 = Opal.hash2, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,new,send,[],build_render,==,[]=,style,remove_class,add_class');
  
  generator = $$('Genesis').$generator();
  $send(self, 'new', [$hash2(["browser", "type"], {"browser": "left", "type": "integer"})], function $$1(value, _user_proc){var self = $$1.$$s == null ? this : $$1.$$s;
    if (self.atome == null) self.atome = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return $$('BrowserHelper').$send("browser_left_" + (self.atome['$[]']("type")), value, self.browser_object, self.atome);}, {$$s: self});
  $send(generator, 'build_render', ["browser_right"], function $$2(value, _user_proc){var self = $$2.$$s == null ? this : $$2.$$s;
    if (self.atome == null) self.atome = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return $$('BrowserHelper').$send("browser_right_" + (self.atome['$[]']("type")), value, self.browser_object, self.atome);}, {$$s: self});
  $send(generator, 'build_render', ["browser_top"], function $$3(value, _user_proc){var self = $$3.$$s == null ? this : $$3.$$s;
    if (self.atome == null) self.atome = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return $$('BrowserHelper').$send("browser_top_" + (self.atome['$[]']("type")), value, self.browser_object, self.atome);}, {$$s: self});
  $send(generator, 'build_render', ["browser_bottom"], function $$4(value, _user_proc){var self = $$4.$$s == null ? this : $$4.$$s;
    if (self.atome == null) self.atome = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    return $$('BrowserHelper').$send("browser_bottom_" + (self.atome['$[]']("type")), value, self.browser_object, self.atome);}, {$$s: self});
  $send(generator, 'build_render', ["browser_rotate"], function $$5(value, _user_proc){var $a, self = $$5.$$s == null ? this : $$5.$$s;
    if (self.browser_type == null) self.browser_type = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($eqeq(self.browser_type, "style")) {
      return nil
    } else {
      return ($a = ["transform", "rotate(" + (value) + "deg)"], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$s: self});
  $send(generator, 'build_render', ["browser_center"], function $$6(value, _user_proc){var $a, self = $$6.$$s == null ? this : $$6.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    
    switch (value) {
      case "horizontal":
        
        self.browser_object.$remove_class("center");
        self.browser_object.$remove_class("center_vertical");
        self.browser_object.$add_class("center_horizontal");
        self.browser_object.$style()['$[]=']("bottom", "auto");
        self.browser_object.$style()['$[]=']("right", "auto");
        self.browser_object.$style()['$[]=']("top", "0px");
        return ($a = ["left", "50%"], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);
      case "vertical":
        
        self.browser_object.$remove_class("center");
        self.browser_object.$remove_class("center_horizontal");
        self.browser_object.$add_class("center_vertical");
        self.browser_object.$style()['$[]=']("bottom", "auto");
        self.browser_object.$style()['$[]=']("right", "auto");
        self.browser_object.$style()['$[]=']("left", "0px");
        return ($a = ["top", "50%"], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);
      default:
        
        self.browser_object.$remove_class("center_vertical");
        self.browser_object.$remove_class("center_horizontal");
        self.browser_object.$add_class("center");
        self.browser_object.$style()['$[]=']("bottom", "auto");
        self.browser_object.$style()['$[]=']("right", "auto");
        self.browser_object.$style()['$[]=']("left", "50%");
        return ($a = ["top", "50%"], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);
    };}, {$$s: self});
  return $send(self, 'new', [$hash2(["browser"], {"browser": "depth"})], function $$7(value){var $a, self = $$7.$$s == null ? this : $$7.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    return ($a = ["z-index", value], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
};

Opal.modules["atome/renderers/browser/atome"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $const_set = Opal.const_set, $return_val = Opal.return_val, $def = Opal.def, $send = Opal.send, $hash2 = Opal.hash2, $rb_times = Opal.rb_times, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,[],append_to,DOM,atome,div,browser_document,remove,id,<<,head,*,img,text,iframe,[]=,attributes,video');
  
  $const_set($nesting[0], 'DOM', "nil");
  
  $def(self, '$parents', $return_val(nil));
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["browser_shape"], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, id_found = nil;
    if (self.atome == null) self.atome = nil;

    
    self.browser_type = "div";
    id_found = self.atome['$[]']("id");
    $send(self, 'DOM', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

      return self.$div($hash2(["id"], {"id": id_found})).$atome()}, {$$s: self}).$append_to($$('BrowserHelper').$browser_document()['$[]']("user_view"));
    return (self.browser_object = $$('BrowserHelper').$browser_document()['$[]'](id_found));}, {$$s: self});
  $send(generator, 'build_render', ["browser_color"], function $$3(_value){var $a, self = $$3.$$s == null ? this : $$3.$$s, id_found = nil, type_found = nil, red_found = nil, blue_found = nil, green_found = nil, alpha_found = nil;
    if (self.atome == null) self.atome = nil;

    
    if (_value == null) _value = nil;
    self.browser_type = "style";
    id_found = self.atome['$[]']("id");
    type_found = self.atome['$[]']("type");
    ($a = $$('BrowserHelper').$browser_document()['$[]'](self.$id()), ($a === nil || $a == null) ? nil : $a.$remove());
    red_found = self.atome['$[]']("red");
    blue_found = self.atome['$[]']("blue");
    green_found = self.atome['$[]']("green");
    alpha_found = self.atome['$[]']("alpha");
    $$('BrowserHelper').$browser_document().$head()['$<<']($$('Browser').$DOM("<style atome='" + (type_found) + "'\n" + "  id='" + (id_found) + "'>." + (id_found) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + ",\n" + "  " + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}</style>"));
    return (self.browser_object = $$('BrowserHelper').$browser_document()['$[]'](id_found));}, {$$s: self});
  $send(generator, 'build_render', ["browser_shadow"], function $$4(_value){var $a, self = $$4.$$s == null ? this : $$4.$$s, id_found = nil, type_found = nil, red_found = nil, blue_found = nil, green_found = nil, alpha_found = nil, blur = nil, left = nil, top = nil, inset = nil;
    if (self.atome == null) self.atome = nil;

    
    if (_value == null) _value = nil;
    self.browser_type = "style";
    id_found = self.atome['$[]']("id");
    type_found = self.atome['$[]']("type");
    ($a = $$('BrowserHelper').$browser_document()['$[]'](self.$id()), ($a === nil || $a == null) ? nil : $a.$remove());
    red_found = self.atome['$[]']("red");
    blue_found = self.atome['$[]']("blue");
    green_found = self.atome['$[]']("green");
    alpha_found = self.atome['$[]']("alpha");
    blur = self.atome['$[]']("blur");
    left = self.atome['$[]']("left");
    top = self.atome['$[]']("top");
    inset = self.atome['$[]']("direction");
    $$('BrowserHelper').$browser_document().$head()['$<<']($$('Browser').$DOM("<style atome='" + (type_found) + "'\n" + "  id='" + (id_found) + "'>." + (id_found) + "{box-shadow: " + (left) + "px " + (top) + "px " + (blur) + "px " + (inset) + " rgba(" + ($rb_times(red_found, 255)) + ",\n" + "  " + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}</style>"));
    return (self.browser_object = $$('BrowserHelper').$browser_document()['$[]'](id_found));}, {$$s: self});
  $send(generator, 'build_render', ["browser_image"], function $$5(_user_prc){var self = $$5.$$s == null ? this : $$5.$$s, id_found = nil;
    if (self.atome == null) self.atome = nil;

    
    if (_user_prc == null) _user_prc = nil;
    self.browser_type = "div";
    id_found = self.atome['$[]']("id");
    $send(self, 'DOM', [], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

      return self.$img($hash2(["id"], {"id": id_found})).$atome()}, {$$s: self}).$append_to($$('BrowserHelper').$browser_document()['$[]']("user_view"));
    return (self.browser_object = $$('BrowserHelper').$browser_document()['$[]'](id_found));}, {$$s: self});
  $send(generator, 'build_render', ["browser_text"], function $$7(_value, _user_proc){var self = $$7.$$s == null ? this : $$7.$$s, id_found = nil;
    if (self.atome == null) self.atome = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    id_found = self.atome['$[]']("id");
    $send(self, 'DOM', [], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;

      return self.$div($hash2(["id"], {"id": id_found})).$atome().$text()}, {$$s: self}).$append_to($$('BrowserHelper').$browser_document()['$[]']("user_view"));
    self.browser_object = $$('BrowserHelper').$browser_document()['$[]'](id_found);
    return (self.browser_type = "div");}, {$$s: self});
  $send(generator, 'build_render', ["browser_web"], function $$9(){var $a, self = $$9.$$s == null ? this : $$9.$$s, id_found = nil;
    if (self.atome == null) self.atome = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    self.browser_type = "div";
    id_found = self.atome['$[]']("id");
    $send(self, 'DOM', [], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

      return self.$iframe($hash2(["id"], {"id": id_found})).$atome()}, {$$s: self}).$append_to($$('BrowserHelper').$browser_document()['$[]']("user_view"));
    self.browser_object = $$('BrowserHelper').$browser_document()['$[]'](id_found);
    self.browser_object.$attributes()['$[]=']("allow", "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture");
    return ($a = ["allowfullscreen", true], $send(self.browser_object.$attributes(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  return $send(generator, 'build_render', ["browser_video"], function $$11(_value, _user_proc){var self = $$11.$$s == null ? this : $$11.$$s, id_found = nil;
    if (self.atome == null) self.atome = nil;

    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    self.browser_type = "div";
    id_found = self.atome['$[]']("id");
    $send(self, 'DOM', [], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s;

      return self.$video($hash2(["id", "autoplay", "loop", "muted"], {"id": id_found, "autoplay": false, "loop": false, "muted": false})).$atome()}, {$$s: self}).$append_to($$('BrowserHelper').$browser_document()['$[]']("user_view"));
    return (self.browser_object = $$('BrowserHelper').$browser_document()['$[]'](id_found));}, {$$s: self});
};

Opal.modules["atome/renderers/browser/utility"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,==,remove,browser_object,send,[],atome_js,[]=,style');
  
  generator = $$('Genesis').$generator();
  generator.$build_render("browser_bloc");
  generator.$build_render("browser_render");
  $send(generator, 'build_render', ["browser_delete"], function $$1(params){var $a, self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    if ($eqeq(params, true)) {
      return ($a = self.$browser_object(), ($a === nil || $a == null) ? nil : $a.$remove())
    } else {
      return nil
    };}, {$$s: self});
  $send(generator, 'build_render', ["browser_path"], function $$2(value){var self = $$2.$$s == null ? this : $$2.$$s;
    if (self.atome == null) self.atome = nil;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    return $$('BrowserHelper').$send("browser_path_" + (self.atome['$[]']("type")), value, self.browser_object, self.atome);}, {$$s: self});
  $send(generator, 'build_render', ["browser_data"], function $$3(data){var self = $$3.$$s == null ? this : $$3.$$s, type_found = nil;
    if (self.atome == null) self.atome = nil;

    
    if (data == null) data = nil;
    type_found = self.atome['$[]']("type");
    return $$('BrowserHelper').$send("browser_data_" + (type_found), data, self);}, {$$s: self});
  $send(generator, 'build_render', ["browser_schedule"], function $$4(format_date, proc){var self = $$4.$$s == null ? this : $$4.$$s, years = nil, months = nil, days = nil, hours = nil, minutes = nil, seconds = nil;

    
    if (format_date == null) format_date = nil;
    if (proc == null) proc = nil;
    years = format_date['$[]'](0);
    months = format_date['$[]'](1);
    days = format_date['$[]'](2);
    hours = format_date['$[]'](3);
    minutes = format_date['$[]'](4);
    seconds = format_date['$[]'](5);
    return self.$atome_js().schedule(years, months, days, hours, minutes, seconds, self, proc);}, {$$s: self});
  $send(generator, 'build_render', ["browser_reader"], function $$5(file, proc){var self = $$5.$$s == null ? this : $$5.$$s;

    
    if (file == null) file = nil;
    if (proc == null) proc = nil;
    return self.$atome_js().reader(file, self, proc);}, {$$s: self});
  $send(generator, 'build_render', ["browser_cursor"], function $$6(value){var $a, self = $$6.$$s == null ? this : $$6.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    return ($a = ["cursor", value], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
  return $send(generator, 'build_render', ["browser_overflow"], function $$7(value){var $a, self = $$7.$$s == null ? this : $$7.$$s;
    if (self.browser_object == null) self.browser_object = nil;

    
    if (value == null) value = nil;
    return ($a = ["overflow", value], $send(self.browser_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
};

Opal.modules["atome/renderers/browser/time"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.7.3 */

Opal.modules["atome/renderers/browser/helpers/browser_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $defs = Opal.defs, $return_val = Opal.return_val, $send = Opal.send, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('window,append_to,[],browser_document,add_class,each,browser_object,grab,instance_of?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'BrowserHelper');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$browser_document', function $$browser_document() {
      
      return $$('Browser').$window()
    });
    $defs(self, '$browser_attach_', $return_val(nil));
    $defs(self, '$browser_attach_div', function $$browser_attach_div(parents, html_object, _atome) {
      var self = this;

      return html_object.$append_to(self.$browser_document()['$[]'](parents))
    });
    $defs(self, '$browser_attach_style', function $$browser_attach_style(parents, _html_object, atome) {
      var self = this;

      return self.$browser_document()['$[]'](parents).$add_class(atome['$[]']("id"))
    });
    $defs(self, '$browser_attached_div', function $$browser_attached_div(children, _html_object, atome) {
      var self = this;

      return $send(children, 'each', [], function $$1(child_found){var self = $$1.$$s == null ? this : $$1.$$s, html_child = nil;

        
        if (child_found == null) child_found = nil;
        html_child = self.$grab(child_found).$browser_object();
        return html_child.$append_to(self.$browser_document()['$[]'](atome['$[]']("id")));}, {$$s: self})
    });
    $defs(self, '$browser_attached_style', function $$browser_attached_style(children, _html_object, atome) {
      var self = this;

      return self.$browser_document()['$[]'](atome['$[]']("id")).$add_class(children)
    });
    return $defs(self, '$value_parse', function $$value_parse(value) {
      
      if ($truthy(value['$instance_of?']($$('String')))) {
        return value
      } else {
        return "" + (value) + "px"
      }
    });
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/browser/helpers/animation_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $hash2 = Opal.hash2, $defs = Opal.defs, $eqeqeq = Opal.eqeqeq, $send = Opal.send, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('===,[],atome,grab,atome_js,anim_value_analysis,anim_convertor,send_anim_to_js,[]=,delete,each,sanitize_anim_params,anim_pop_motion_converter,play_active_proc=,begin_animation');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'BrowserHelper');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$anim_convertor', function $$anim_convertor(value) {
      
      return $hash2(["left", "right", "top", "bottom", "smooth", "left_add", "right_add", "width", "height"], {"left": ["left", "" + (value) + "px"], "right": ["right", "" + (value) + "px"], "top": ["top", "" + (value) + "px"], "bottom": ["bottom", "" + (value) + "px"], "smooth": ["border-radius", "" + (value) + "px"], "left_add": ["transform", "translateX(" + (value) + "px)"], "right_add": ["transform", "translateY(" + (value) + "px)"], "width": ["width", "" + (value) + "px"], "height": ["height", "" + (value) + "px"]})
    });
    $defs(self, '$anim_value_analysis', function $$anim_value_analysis(value, particle_found, atome_found) {
      var self = this, $ret_or_1 = nil;

      
      if ($eqeqeq("self", ($ret_or_1 = value))) {
        value = atome_found.$atome()['$[]'](particle_found)
      } else if ($eqeqeq($$('Integer'), $ret_or_1)) {
        value
      } else {
        
        value = self.$grab(value).$atome()['$[]'](particle_found);
        value;
      };
      return value;
    });
    $defs(self, '$send_anim_to_js', function $$send_anim_to_js(animation, atome_hash, atome_found, atome_id, animation_atome) {
      var self = this, animated_particle = nil, start_value = nil, end_value = nil, original_particle = nil;

      
      animated_particle = animation['$[]'](0);
      start_value = animation['$[]'](1);
      end_value = animation['$[]'](2);
      original_particle = animation['$[]'](3);
      return self.$atome_js().animate(animated_particle, atome_hash['$[]']("duration"), atome_hash['$[]']("damping"), atome_hash['$[]']("ease"), atome_hash['$[]']("mass"), atome_hash['$[]']("repeat"), atome_hash['$[]']("stiffness"), atome_hash['$[]']("velocity"), start_value, end_value, atome_id, atome_found, atome_hash, original_particle, animation_atome);
    });
    $defs(self, '$sanitize_anim_params', function $$sanitize_anim_params(value, particle_found, atome_hash, atome_found, atome_id, animation_atome) {
      var self = this, start_value = nil, end_value = nil, animated_particle = nil, animation = nil;

      
      start_value = self.$anim_value_analysis(value, particle_found, atome_found);
      start_value = $$('BrowserHelper').$anim_convertor(start_value)['$[]'](particle_found)['$[]'](1);
      end_value = self.$anim_value_analysis(atome_hash['$[]']("end")['$[]'](particle_found), particle_found, atome_found);
      end_value = $$('BrowserHelper').$anim_convertor(end_value)['$[]'](particle_found)['$[]'](1);
      animated_particle = $$('BrowserHelper').$anim_convertor(value)['$[]'](particle_found)['$[]'](0);
      animation = [animated_particle, start_value, end_value, particle_found];
      return self.$send_anim_to_js(animation, atome_hash, atome_found, atome_id, animation_atome);
    });
    $defs(self, '$anim_pop_motion_converter', function $$anim_pop_motion_converter(atome_hash, atome_found, atome_id, animation_atome) {
      var self = this;

      
      atome_hash['$[]=']("dampingRatio", atome_hash.$delete("damping"));
      return $send(atome_hash['$[]']("begin"), 'each', [], function $$1(particle_found, value){var self = $$1.$$s == null ? this : $$1.$$s;

        
        if (particle_found == null) particle_found = nil;
        if (value == null) value = nil;
        return self.$sanitize_anim_params(value, particle_found, atome_hash, atome_found, atome_id, animation_atome);}, {$$s: self});
    });
    $defs(self, '$begin_animation', function $$begin_animation(atome_hash, atome_found, atome_id, animation_atome) {
      var self = this;

      return self.$anim_pop_motion_converter(atome_hash, atome_found, atome_id, animation_atome)
    });
    return $defs(self, '$browser_play_animation', function $$browser_play_animation(_options, _browser_object, atome_hash, animation_atome, proc) {
      var self = this;

      
      if (!$truthy(atome_hash['$[]']("targets"))) {
        atome_hash['$[]=']("targets", ["eDen"])
      };
      animation_atome['$play_active_proc='](proc);
      return $send(atome_hash['$[]']("targets"), 'each', [], function $$2(target){var self = $$2.$$s == null ? this : $$2.$$s, atome_found = nil, atome_id = nil;

        
        if (target == null) target = nil;
        atome_found = self.$grab(target);
        atome_id = atome_found.$atome()['$[]']("id");
        return self.$begin_animation(atome_hash, atome_found, atome_id, animation_atome);}, {$$s: self});
    });
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/browser/helpers/color_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $defs = Opal.defs, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[]');
  return (function($base) {
    var self = $module($base, 'BrowserHelper');

    
    
    $defs(self, '$browser_colorize_color', function $$browser_colorize_color(color_updated, atome) {
      
      return document.getElementById(atome['$[]']("id")).sheet.cssRules[0].style.backgroundColor = color_updated
    });
    $defs(self, '$browser_colorize_shadow', function $$browser_colorize_shadow(color_updated, atome) {
      var left = nil, top = nil, blur = nil, direction = nil, shadow_updated = nil;

      
      left = atome['$[]']("left");
      top = atome['$[]']("top");
      blur = atome['$[]']("blur");
      direction = atome['$[]']("direction");
      shadow_updated = "" + (left) + "px " + (top) + "px " + (blur) + "px " + (color_updated) + " " + (direction);
      return document.getElementById(atome['$[]']("id")).sheet.cssRules[0].style.boxShadow = shadow_updated;
    });
    $defs(self, '$browser_left_color', $return_val(nil));
    $defs(self, '$browser_right_color', $return_val(nil));
    $defs(self, '$browser_top_color', $return_val(nil));
    return $defs(self, '$browser_bottom_color', $return_val(nil));
  })($nesting[0])
};

Opal.modules["atome/renderers/browser/helpers/drag_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $defs = Opal.defs, $send = Opal.send, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('drag_move_proc=,atome_js,alert,!=,to_n,drag_start_proc=,drag_end_proc=');
  return (function($base) {
    var self = $module($base, 'BrowserHelper');

    
    
    $defs(self, '$browser_drag_move', function $$browser_drag_move(params, atome_id, atome, proc) {
      var self = this;

      
      atome['$drag_move_proc='](proc);
      return self.$atome_js().drag(params, atome_id, atome);
    });
    $defs(self, '$browser_drag_end', function $$browser_drag_end(params, atome_id, atome, proc) {
      var self = this;

      return self.$alert("kool")
    });
    $defs(self, '$browser_drag_lock', function $$browser_drag_lock(params, atome_id, atome, _proc) {
      var self = this;

      return self.$atome_js().lock(params, atome_id, atome)
    });
    $defs(self, '$browser_drag_remove', function $$browser_drag_remove(params, atome_id, atome, _proc) {
      var self = this;

      
      params = params['$!='](true);
      return self.$atome_js().remove(params, atome_id, atome);
    });
    $defs(self, '$browser_drag_snap', function $$browser_drag_snap(params, atome_id, atome, _proc) {
      var self = this;

      return self.$atome_js().snap(params.$to_n(), atome_id, atome)
    });
    $defs(self, '$browser_drag_inertia', function $$browser_drag_inertia(params, atome_id, atome, _proc) {
      var self = this;

      return self.$atome_js().inertia(params, atome_id, atome)
    });
    $defs(self, '$browser_drag_constraint', function $$browser_drag_constraint(params, atome_id, atome, _proc) {
      var self = this;

      return self.$atome_js().constraint(params.$to_n(), atome_id, atome)
    });
    $defs(self, '$browser_drag_start', function $$browser_drag_start(_params, _atome_id, atome, proc) {
      var $a;

      return ($a = [proc], $send(atome, 'drag_start_proc=', $a), $a[$a.length - 1])
    });
    return $defs(self, '$browser_drag_end', function $$browser_drag_end(_params, _atome_id, atome, proc) {
      var $a;

      return ($a = [proc], $send(atome, 'drag_end_proc=', $a), $a[$a.length - 1])
    });
  })($nesting[0])
};

Opal.modules["atome/renderers/browser/helpers/drop_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('drop_action_proc=,atome_js');
  return (function($base) {
    var self = $module($base, 'BrowserHelper');

    
    return $defs(self, '$browser_drop_action', function $$browser_drop_action(params, atome_id, atome, proc) {
      var self = this;

      
      atome['$drop_action_proc='](proc);
      return self.$atome_js().drop(params, atome_id, atome);
    })
  })($nesting[0])
};

Opal.modules["atome/renderers/browser/helpers/effect_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $send = Opal.send, $rb_times = Opal.rb_times, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[],[]=,*,style');
  return (function($base) {
    var self = $module($base, 'BrowserHelper');

    
    
    $defs(self, '$browser_blur_style', function $$browser_blur_style(_browser_object, value, atome) {
      var $a, b_left = nil, b_top = nil, b_blur = nil, b_red = nil, b_green = nil, b_blue = nil, b_direction = nil, b_alpha = nil, shadow_updated = nil;

      
      b_left = "" + (atome['$[]']("left")) + "px";
      b_top = "" + (atome['$[]']("top")) + "px";
      b_blur = "" + (($a = ["blur", value], $send(atome, '[]=', $a), $a[$a.length - 1])) + "px";
      b_red = $rb_times(atome['$[]']("red"), 255);
      b_green = $rb_times(atome['$[]']("green"), 255);
      b_blue = $rb_times(atome['$[]']("blue"), 255);
      b_direction = atome['$[]']("direction");
      b_alpha = atome['$[]']("alpha");
      shadow_updated = "" + (b_left) + " " + (b_top) + " " + (b_blur) + " rgba(" + (b_red) + ", " + (b_green) + ", " + (b_blue) + ", " + (b_alpha) + ") " + (b_direction);
      return document.getElementById(atome['$[]']("id")).sheet.cssRules[0].style.boxShadow = shadow_updated;
    });
    return $defs(self, '$browser_blur_div', function $$browser_blur_div(browser_object, value, _atome) {
      var $a;

      return ($a = ["filter", "blur(" + (value) + "px)"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
  })($nesting[0])
};

Opal.modules["atome/renderers/browser/helpers/event_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('is_a?,instance_exec,to_proc,on,enter_action_callback,leave_action_callback');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'BrowserHelper');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$touch_helper_callback', function $$touch_helper_callback(event, atome, proc) {
      
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(atome, 'instance_exec', [event], proc.$to_proc())
      } else {
        return nil
      }
    });
    $defs(self, '$browser_touch_true', function $$browser_touch_true(browser_object, atome, proc) {
      
      
    interact('#'+browser_object)
  .on('tap', function (event) {
Opal.BrowserHelper.$touch_helper_callback(event,atome,proc);
  })

    });
    $defs(self, '$browser_touch_long', function $$browser_touch_long(browser_object, atome, proc) {
      
      
    interact('#'+browser_object)
  .on('hold', function (event) {
Opal.BrowserHelper.$touch_helper_callback(event,atome,proc);
  })

    });
    $defs(self, '$browser_touch_double', function $$browser_touch_double(browser_object, atome, proc) {
      
      
    interact('#'+browser_object)
  .on('doubletap', function (event) {
Opal.BrowserHelper.$touch_helper_callback(event,atome,proc);
  })

    });
    $defs(self, '$browser_touch_down', function $$browser_touch_down(browser_object, atome, proc) {
      
      
    interact('#'+browser_object)
  .on('down', function (event) {
Opal.BrowserHelper.$touch_helper_callback(event,atome,proc);
  })


    });
    $defs(self, '$browser_touch_up', function $$browser_touch_up(browser_object, atome, proc) {
      
      
    interact('#'+browser_object)
  .on('up', function (event) {
Opal.BrowserHelper.$touch_helper_callback(event,atome,proc);
  })

    });
    $defs(self, '$browser_over_enter', function $$browser_over_enter(browser_object, atome) {
      
      return $send(browser_object, 'on', ["mouseenter"], function $$1(event){
        
        if (event == null) event = nil;
        return atome.$enter_action_callback(event);})
    });
    return $defs(self, '$browser_over_leave', function $$browser_over_leave(browser_object, atome) {
      
      return $send(browser_object, 'on', ["mouseout"], function $$2(event){
        
        if (event == null) event = nil;
        return atome.$leave_action_callback(event);})
    });
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/browser/helpers/image_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $send = Opal.send, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[]=,style');
  return (function($base) {
    var self = $module($base, 'BrowserHelper');

    
    
    $defs(self, '$browser_left_image', function $$browser_left_image(value, browser_object, _atome) {
      var $a;

      return ($a = ["left", "" + (value) + "px"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_right_image', function $$browser_right_image(value, browser_object, _atome) {
      var $a;

      return ($a = ["right", "" + (value) + "px"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_top_image', function $$browser_top_image(value, browser_object, _atome) {
      var $a;

      return ($a = ["top", "" + (value) + "px"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_bottom_image', function $$browser_bottom_image(value, browser_object, _atome) {
      var $a;

      return ($a = ["bottom", "" + (value) + "px"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    return $defs(self, '$browser_path_image', function $$browser_path_image(value, browser_object, _atome) {
      var $a;

      return ($a = ["src", value], $send(browser_object, '[]=', $a), $a[$a.length - 1])
    });
  })($nesting[0])
};

Opal.modules["atome/renderers/browser/helpers/shadow_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $send = Opal.send, $rb_times = Opal.rb_times, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[]=,[],*');
  return (function($base) {
    var self = $module($base, 'BrowserHelper');

    
    
    $defs(self, '$browser_left_shadow', function $$browser_left_shadow(value, _browser_object, atome) {
      var $a, ls_left = nil, ls_top = nil, ls_blur = nil, red = nil, green = nil, blue = nil, direction = nil, alpha = nil, shadow_updated = nil;

      
      ls_left = "" + (($a = ["left", value], $send(atome, '[]=', $a), $a[$a.length - 1])) + "px";
      ls_top = "" + (atome['$[]']("top")) + "px";
      ls_blur = "" + (atome['$[]']("blur")) + "px";
      red = $rb_times(atome['$[]']("red"), 255);
      green = $rb_times(atome['$[]']("green"), 255);
      blue = $rb_times(atome['$[]']("blue"), 255);
      direction = atome['$[]']("direction");
      alpha = atome['$[]']("alpha");
      shadow_updated = "" + (ls_left) + " " + (ls_top) + " " + (ls_blur) + " rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ") " + (direction);
      return document.getElementById(atome['$[]']("id")).sheet.cssRules[0].style.boxShadow = shadow_updated;
    });
    return $defs(self, '$browser_top_shadow', function $$browser_top_shadow(value, _browser_object, atome) {
      var $a, rs_left = nil, rs_top = nil, rs_blur = nil, red = nil, green = nil, blue = nil, direction = nil, alpha = nil, shadow_updated = nil;

      
      rs_left = "" + (atome['$[]']("left")) + "px";
      rs_top = "" + (($a = ["top", value], $send(atome, '[]=', $a), $a[$a.length - 1])) + "px";
      rs_blur = "" + (atome['$[]']("blur")) + "px";
      red = $rb_times(atome['$[]']("red"), 255);
      green = $rb_times(atome['$[]']("green"), 255);
      blue = $rb_times(atome['$[]']("blue"), 255);
      direction = atome['$[]']("direction");
      alpha = atome['$[]']("alpha");
      shadow_updated = "" + (rs_left) + "px " + (rs_top) + "px " + (rs_blur) + "px rgba(" + (red) + ", " + (green) + ", " + (blue) + ", " + (alpha) + ") " + (direction);
      return document.getElementById(atome['$[]']("id")).sheet.cssRules[0].style.boxShadow = shadow_updated;
    });
  })($nesting[0])
};

Opal.modules["atome/renderers/browser/helpers/shape_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $send = Opal.send, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[]=,value_parse,style');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'BrowserHelper');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$browser_left_shape', function $$browser_left_shape(value, browser_object, _atome) {
      var $a;

      return ($a = ["left", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_right_shape', function $$browser_right_shape(value, browser_object, _atome) {
      var $a;

      return ($a = ["right", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_top_shape', function $$browser_top_shape(value, browser_object, _atome) {
      var $a;

      return ($a = ["top", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    return $defs(self, '$browser_bottom_shape', function $$browser_bottom_shape(value, browser_object, _atome) {
      var $a;

      return ($a = ["bottom", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/browser/helpers/text_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $send = Opal.send, $defs = Opal.defs, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[]=,value_parse,style,gsub,inner_html=,browser_object');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'BrowserHelper');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$browser_left_text', function $$browser_left_text(value, browser_object, _atome) {
      var $a;

      return ($a = ["left", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_right_text', function $$browser_right_text(value, browser_object, _atome) {
      var $a;

      return ($a = ["right", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_top_text', function $$browser_top_text(value, browser_object, _atome) {
      var $a;

      return ($a = ["top", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_bottom_text', function $$browser_bottom_text(value, browser_object, _atome) {
      var $a;

      return ($a = ["bottom", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_data_text', function $$browser_data_text(value, atome_send) {
      var $a;

      
      value = value.$gsub(/\n/, "<br/>");
      return ($a = [value], $send(atome_send.$browser_object(), 'inner_html=', $a), $a[$a.length - 1]);
    });
    $defs(self, '$browser_data_shape', $return_val(nil));
    $defs(self, '$browser_data_color', $return_val(nil));
    return $defs(self, '$browser_data_find', $return_val(nil));
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/browser/helpers/video_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $send = Opal.send, $defs = Opal.defs, $truthy = Opal.truthy, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[]=,style,[],each_value,+,length,play,on,currentTime,time_callback,prevent,is_a?,instance_exec,to_proc');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'BrowserHelper');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$browser_left_video', function $$browser_left_video(value, browser_object, _atome) {
      var $a;

      return ($a = ["left", "" + (value) + "px"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_right_video', function $$browser_right_video(value, browser_object, _atome) {
      var $a;

      return ($a = ["right", "" + (value) + "px"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_top_video', function $$browser_top_video(value, browser_object, _atome) {
      var $a;

      return ($a = ["top", "" + (value) + "px"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_bottom_video', function $$browser_bottom_video(value, browser_object, _atome) {
      var $a;

      return ($a = ["bottom", "" + (value) + "px"], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_path_video', function $$browser_path_video(value, browser_object, _atome) {
      var $a;

      return ($a = ["src", value], $send(browser_object, '[]=', $a), $a[$a.length - 1])
    });
    return $defs(self, '$browser_play_video', function $$browser_play_video(_value, browser_object_found, atome_hash, atome_object, proc) {
      var $a, markers = nil, $ret_or_1 = nil, video_callback = nil, play_callback = nil;

      
      markers = ($truthy(($ret_or_1 = atome_hash['$[]']("markers"))) ? ($ret_or_1) : (($a = ["markers", $hash2([], {})], $send(atome_hash, '[]=', $a), $a[$a.length - 1])));
      $send(markers, 'each_value', [], function $$1(value){var $b;

        
        if (value == null) value = nil;
        if (!$truthy(value['$[]']("end"))) {
          value['$[]=']("end", $rb_plus(value['$[]']("begin"), 0.25))
        };
        if ($truthy(value['$[]']("label"))) {
          return nil
        } else {
          return ($b = ["label", "label_" + (atome_hash['$[]']("markers").$length())], $send(value, '[]=', $b), $b[$b.length - 1])
        };});
      browser_object_found.$play();
      video_callback = atome_hash['$[]']("code");
      play_callback = proc;
      return $send(browser_object_found, 'on', ["timeupdate"], function $$2(e){var current_time = nil;

        
        if (e == null) e = nil;
        current_time = browser_object_found.$currentTime();
        atome_object.$time_callback(current_time, markers);
        e.$prevent();
        if ($truthy(video_callback['$is_a?']($$('Proc')))) {
          $send(atome_object, 'instance_exec', [current_time], video_callback.$to_proc())
        };
        if ($truthy(play_callback['$is_a?']($$('Proc')))) {
          return $send(atome_object, 'instance_exec', [current_time], play_callback.$to_proc())
        } else {
          return nil
        };});
    });
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/browser/helpers/web_helper"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $send = Opal.send, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[]=,value_parse,style');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'BrowserHelper');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$browser_left_web', function $$browser_left_web(value, browser_object, _atome) {
      var $a;

      return ($a = ["left", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_right_web', function $$browser_right_web(value, browser_object, _atome) {
      var $a;

      return ($a = ["right", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_top_web', function $$browser_top_web(value, browser_object, _atome) {
      var $a;

      return ($a = ["top", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    $defs(self, '$browser_bottom_web', function $$browser_bottom_web(value, browser_object, _atome) {
      var $a;

      return ($a = ["bottom", $$('BrowserHelper').$value_parse(value)], $send(browser_object.$style(), '[]=', $a), $a[$a.length - 1])
    });
    return $defs(self, '$browser_path_web', function $$browser_path_web(value, browser_object, _atome) {
      var $a;

      return ($a = ["src", value], $send(browser_object, '[]=', $a), $a[$a.length - 1])
    });
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/browser/browser"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,attr_accessor,[],real_atome,property');
  
  self.$require("atome/renderers/browser/effect");
  self.$require("atome/renderers/browser/event");
  self.$require("atome/renderers/browser/geometry");
  self.$require("atome/renderers/browser/identity");
  self.$require("atome/renderers/browser/material");
  self.$require("atome/renderers/browser/spatial");
  self.$require("atome/renderers/browser/atome");
  self.$require("atome/renderers/browser/utility");
  self.$require("atome/renderers/browser/time");
  self.$require("atome/renderers/browser/helpers/browser_helper");
  self.$require("atome/renderers/browser/helpers/animation_helper");
  self.$require("atome/renderers/browser/helpers/color_helper");
  self.$require("atome/renderers/browser/helpers/drag_helper");
  self.$require("atome/renderers/browser/helpers/drop_helper");
  self.$require("atome/renderers/browser/helpers/effect_helper");
  self.$require("atome/renderers/browser/helpers/event_helper");
  self.$require("atome/renderers/browser/helpers/image_helper");
  self.$require("atome/renderers/browser/helpers/shadow_helper");
  self.$require("atome/renderers/browser/helpers/shape_helper");
  self.$require("atome/renderers/browser/helpers/text_helper");
  self.$require("atome/renderers/browser/helpers/video_helper");
  self.$require("atome/renderers/browser/helpers/web_helper");
  (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    self.$attr_accessor("browser_object");
    return $def(self, '$to_px', function $$to_px() {
      var self = this, id_found = nil, property_found = nil, value_get = nil;

      
      id_found = self.$real_atome()['$[]']("id");
      property_found = self.$property();
      value_get = "";
      
      div = document.getElementById(id_found);
      var style = window.getComputedStyle(div);
      var original_value = style.getPropertyValue(property_found);
      value_get= parseInt(original_value);
    ;
      return value_get;
    });
  })($nesting[0], null);
  return $def(self, '$atome_js', function $$atome_js() {
    
    return atomeJS;
  });
};

Opal.modules["atome/renderers/html/effect"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $eqeqeq = Opal.eqeqeq, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,===,each,<<,to_s,join,==,[]=,style');
  
  generator = $$('Genesis').$generator();
  return $send(generator, 'build_render', ["html_smooth"], function $$1(value){var $a, self = $$1.$$s == null ? this : $$1.$$s, formated_params = nil, $ret_or_1 = nil, properties = nil;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    if (value == null) value = nil;
    formated_params = ($eqeqeq($$('Array'), ($ret_or_1 = value)) ? (((properties = []), $send(value, 'each', [], function $$2(param){
      
      if (param == null) param = nil;
      return properties['$<<']("" + (param) + "px");}), properties.$join(" ").$to_s())) : ($eqeqeq($$('Integer'), $ret_or_1) ? ("" + (value) + "px") : (value)));
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["border-radius", formated_params], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$s: self});
};

Opal.modules["atome/renderers/html/event"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,on,is_a?,instance_exec,to_proc');
  
  generator = $$('Genesis').$generator();
  return $send(generator, 'build_render', ["html_touch"], function $$1(_value, proc){var self = $$1.$$s == null ? this : $$1.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    if (_value == null) _value = nil;
    if (proc == null) proc = nil;
    return $send(self.html_object, 'on', ["click"], function $$2(e){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (e == null) e = nil;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };}, {$$s: self});}, {$$s: self});
};

Opal.modules["atome/renderers/html/geometry"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,==,[]=,style');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["html_width"], function $$1(value){var $a, self = $$1.$$s == null ? this : $$1.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    if (value == null) value = nil;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["width", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$s: self});
  return $send(generator, 'build_render', ["html_height"], function $$2(value){var $a, self = $$2.$$s == null ? this : $$2.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    if (value == null) value = nil;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["height", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$s: self});
};

Opal.modules["atome/renderers/html/identity"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,send,user_proc,[],each');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["html_type"], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s;

    
    if (params == null) params = nil;
    return self.$send("html_" + (params), self.$user_proc());}, {$$s: self});
  return $send(generator, 'build_render', ["html_parents"], function $$2(parents_found){var self = $$2.$$s == null ? this : $$2.$$s, type_found = nil;
    if (self.atome == null) self.atome = nil;

    
    if (parents_found == null) parents_found = nil;
    type_found = self.atome['$[]']("type");
    return $send(parents_found, 'each', [], function $$3(parent_found){var self = $$3.$$s == null ? this : $$3.$$s;
      if (self.html_object == null) self.html_object = nil;

      
      if (parent_found == null) parent_found = nil;
      return self.html_object.$send("append_" + (type_found), parent_found);}, {$$s: self});}, {$$s: self});
};

Opal.modules["atome/renderers/html/spatial"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,==,[]=,style');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["html_left"], function $$1(value, _user_proc){var $a, self = $$1.$$s == null ? this : $$1.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["left", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$s: self});
  $send(generator, 'build_render', ["html_right"], function $$2(value, _user_proc){var $a, self = $$2.$$s == null ? this : $$2.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["right", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$s: self});
  $send(generator, 'build_render', ["html_top"], function $$3(value, _user_proc){var $a, self = $$3.$$s == null ? this : $$3.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["top", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$s: self});
  return $send(generator, 'build_render', ["html_bottom"], function $$4(value, _user_proc){var $a, self = $$4.$$s == null ? this : $$4.$$s;
    if (self.html_type == null) self.html_type = nil;
    if (self.html_object == null) self.html_object = nil;

    
    if (value == null) value = nil;
    if (_user_proc == null) _user_proc = nil;
    if ($eqeq(self.html_type, "style")) {
      return nil
    } else {
      return ($a = ["bottom", "" + (value) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
    };}, {$$s: self});
};

Opal.modules["atome/renderers/html/atome"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $rb_times = Opal.rb_times, $return_val = Opal.return_val, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,[],new,add_class,attr,remove,opal_document,id,<<,head,DOM,type,*');
  
  generator = $$('Genesis').$generator();
  $send(generator, 'build_render', ["html_shape"], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, current_atome = nil, id_found = nil;
    if (self.atome == null) self.atome = nil;
    if (self.html_object == null) self.html_object = nil;

    
    current_atome = self.atome;
    id_found = current_atome['$[]']("id");
    self.html_object = $$('Html').$new();
    self.html_object.$add_class("atome");
    return self.html_object.$attr("id", id_found);}, {$$s: self});
  generator.$build_render("html_element");
  $send(generator, 'build_render', ["html_color"], function $$2(_value){var $a, self = $$2.$$s == null ? this : $$2.$$s, red_found = nil, blue_found = nil, green_found = nil, alpha_found = nil;
    if (self.atome == null) self.atome = nil;

    
    if (_value == null) _value = nil;
    ($a = self.$opal_document()['$[]'](self.$id()), ($a === nil || $a == null) ? nil : $a.$remove());
    red_found = self.atome['$[]']("red");
    blue_found = self.atome['$[]']("blue");
    green_found = self.atome['$[]']("green");
    alpha_found = self.atome['$[]']("alpha");
    return self.$opal_document().$head()['$<<'](self.$DOM("<style atome='" + (self.$type()) + "'  id='" + (self.$id()) + "'>." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + ",\n" + "  " + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}</style>"));}, {$$s: self});
  $send(generator, 'build_render', ["html_image"], function $$3(_user_prc){
    
    if (_user_prc == null) _user_prc = nil;
    return nil;});
  $send(generator, 'build_render', ["html_shadow"], $return_val(nil));
  return $send(generator, 'build_render', ["html_video"], function $$4(_value, _user_proc){
    
    if (_value == null) _value = nil;
    if (_user_proc == null) _user_proc = nil;
    return nil;});
};

Opal.modules["atome/renderers/html/utility"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render,remove,html_object,each,[],grab,children');
  
  generator = $$('Genesis').$generator();
  generator.$build_render("html_bloc");
  generator.$build_render("html_id");
  generator.$build_render("html_render");
  $send(generator, 'build_render', ["html_delete"], function $$1(){var $a, self = $$1.$$s == null ? this : $$1.$$s;

    return ($a = self.$html_object(), ($a === nil || $a == null) ? nil : $a.$remove())}, {$$s: self});
  $send(generator, 'build_render', ["html_clear"], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;
    if (self.atome == null) self.atome = nil;

    
    $send(self.atome['$[]']("children"), 'each', [], function $$3(child_found){var $a, self = $$3.$$s == null ? this : $$3.$$s;

      
      if (child_found == null) child_found = nil;
      return ($a = self.$grab(child_found).$html_object(), ($a === nil || $a == null) ? nil : $a.$remove());}, {$$s: self});
    return self.$children([]);}, {$$s: self});
  generator.$build_render("html_schedule");
  return generator.$build_render("html_reader");
};

Opal.modules["atome/renderers/html/html"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $def = Opal.def, $return_val = Opal.return_val, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,class');
  
  self.$require("atome/renderers/html/effect");
  self.$require("atome/renderers/html/event");
  self.$require("atome/renderers/html/geometry");
  self.$require("atome/renderers/html/identity");
  self.$require("atome/renderers/html/spatial");
  self.$require("atome/renderers/html/atome");
  self.$require("atome/renderers/html/utility");
  return (function($base, $super) {
    var self = $klass($base, $super, 'Html');

    var $proto = self.$$prototype;

    $proto.html = nil;
    
    
    $def(self, '$initialize', function $$initialize() {
      var self = this, html = nil;

      
      html = document.createElement("div");
      document.body.appendChild(html);
      document.body.appendChild(html);
      return (self.html = html);
    });
    
    $def(self, '$add_class', function $$add_class(class_to_add) {
      var self = this;

      return self.html.classList.add(class_to_add)
    });
    
    $def(self, '$attr', function $$attr(attribute, value) {
      var self = this;

      return self.html.setAttribute(attribute, value)
    });
    
    $def(self, '$style', $return_val(nil));
    
    $def(self, '$append_shape', function $$append_shape(parent) {
      var self = this, parent_found = nil;

      
      parent_found = document.getElementById(parent);
      parent_found;
      return parent_found.appendChild(self.html);
    });
    
    $def(self, '$append_color', function $$append_color(parent) {
      
      return "color : " + (parent.$class())
    });
    return $def(self, '$append_to', $return_val(nil));
  })($nesting[0], null);
};

Opal.modules["atome/renderers/headless/utility"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render');
  
  generator = $$('Genesis').$generator();
  generator.$build_render("headless_schedule");
  return generator.$build_render("headless_reader");
};

Opal.modules["atome/renderers/headless/headless"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  return self.$require("atome/renderers/headless/utility")
};

Opal.modules["atome/renderers/server/utility"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, generator = nil;

  Opal.add_stubs('generator,build_render');
  
  generator = $$('Genesis').$generator();
  generator.$build_render("server_schedule");
  return generator.$build_render("server_reader");
};

Opal.modules["atome/renderers/server/server"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  return self.$require("atome/renderers/server/utility")
};

Opal.modules["atome/extensions/matrix"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $hash = Opal.hash, $rb_times = Opal.rb_times, $def = Opal.def, $rb_divide = Opal.rb_divide, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $rb_lt = Opal.rb_lt, $klass = Opal.klass, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('matrix_sanitizer,[],delete,id,color,grab,shadow,default_params,identity_generator,atome_common,new,to_proc,instance_variable_set,[]=,*,times,box,<<,instance_variable_get,attached,apply_style,format_matrix,merge,each,instance_of?,cells,is_a?,instance_exec,get_column_or_row,element,/,-,+,each_with_index,zero?,height,length,hide,width,take,include?,top,left,columns,rows,materials,width=,height=,fusion,set,<,to_a,include');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Matrix');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$matrix', function $$matrix(params) {
      var bloc = $$matrix.$$p || nil, $a, self = this, columns_data = nil, rows_data = nil, cells_data = nil, cells_color = nil, cells_color_id = nil, cells_shadow = nil, cells_shadow_id = nil, exceptions_data = nil, default_renderer = nil, atome_type = nil, generated_id = nil, $ret_or_1 = nil, the_matrix = nil, matrix_id = nil, matrix_width = nil, matrix_height = nil, columns = nil, rows = nil, margin = nil, columns_exceptions = nil, columns_fusion_exceptions = nil, columns_divided_exceptions = nil, rows_exceptions = nil, rows_fusion_exceptions = nil, rows_divided_exceptions = nil, exceptions = nil, number_of_cells = nil;

      $$matrix.$$p = null;
      
      ;
      if (params == null) params = $hash2([], {});
      params = self.$matrix_sanitizer(params);
      columns_data = ($truthy(params['$[]']("columns")) ? (params.$delete("columns")) : ($hash2(["count"], {"count": 4})));
      rows_data = ($truthy(params['$[]']("rows")) ? (params.$delete("rows")) : ($hash2(["count"], {"count": 4})));
      cells_data = ($truthy(params['$[]']("cells")) ? (params.$delete("cells")) : ($hash2(["particles"], {"particles": $hash2(["margin", "color"], {"margin": 9, "color": "lightgray"})})));
      cells_color = cells_data['$[]']("particles").$delete("color");
      cells_color_id = self.$grab("black_matter").$color(cells_color).$id();
      cells_shadow = cells_data['$[]']("particles").$delete("shadow");
      cells_shadow_id = self.$grab("black_matter").$shadow(cells_shadow).$id();
      exceptions_data = params.$delete("exceptions");
      default_renderer = $$('Essentials').$default_params()['$[]']("render_engines");
      atome_type = "matrix";
      generated_id = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : (self.$identity_generator("matrix")));
      params = self.$atome_common("matrix", params);
      the_matrix = $send($$('Atome'), 'new', [$hash(atome_type, params)], bloc.$to_proc());
      matrix_id = params['$[]']("id");
      matrix_width = params['$[]']("width");
      matrix_height = params['$[]']("height");
      columns = columns_data['$[]']("count");
      rows = rows_data['$[]']("count");
      margin = cells_data['$[]']("particles").$delete("margin");
      the_matrix.$instance_variable_set("@columns", columns);
      the_matrix.$instance_variable_set("@rows", rows);
      the_matrix.$instance_variable_set("@margin", margin);
      the_matrix.$instance_variable_set("@cell_style", cells_data['$[]']("particles"));
      the_matrix.$instance_variable_set("@matrix_width", matrix_width);
      the_matrix.$instance_variable_set("@matrix_height", matrix_height);
      the_matrix.$instance_variable_set("@cells", []);
      rows = rows_data['$[]']("count");
      columns = columns_data['$[]']("count");
      if ($truthy(exceptions_data)) {
        
        columns_exceptions = ($truthy(($ret_or_1 = exceptions_data['$[]']("columns"))) ? ($ret_or_1) : (($a = ["columns", $hash2([], {})], $send(exceptions_data, '[]=', $a), $a[$a.length - 1])));
        columns_fusion_exceptions = ($truthy(($ret_or_1 = columns_exceptions['$[]']("fusion"))) ? ($ret_or_1) : (($a = ["fusion", $hash2([], {})], $send(columns_exceptions, '[]=', $a), $a[$a.length - 1])));
        columns_divided_exceptions = ($truthy(($ret_or_1 = columns_exceptions['$[]']("divided"))) ? ($ret_or_1) : (($a = ["divided", $hash2([], {})], $send(columns_exceptions, '[]=', $a), $a[$a.length - 1])));
        rows_exceptions = ($truthy(($ret_or_1 = exceptions_data['$[]']("rows"))) ? ($ret_or_1) : (($a = ["rows", $hash2([], {})], $send(exceptions_data, '[]=', $a), $a[$a.length - 1])));
        rows_fusion_exceptions = ($truthy(($ret_or_1 = rows_exceptions['$[]']("fusion"))) ? ($ret_or_1) : (($a = ["fusion", $hash2([], {})], $send(rows_exceptions, '[]=', $a), $a[$a.length - 1])));
        rows_divided_exceptions = ($truthy(($ret_or_1 = rows_exceptions['$[]']("divided"))) ? ($ret_or_1) : (($a = ["divided", $hash2([], {})], $send(rows_exceptions, '[]=', $a), $a[$a.length - 1])));
        exceptions = $hash2(["columns_fusion", "columns_divided", "rows_fusion", "rows_divided"], {"columns_fusion": columns_fusion_exceptions, "columns_divided": columns_divided_exceptions, "rows_fusion": rows_fusion_exceptions, "rows_divided": rows_divided_exceptions});
      } else {
        exceptions = $hash2(["columns_fusion", "columns_divided", "rows_fusion", "rows_divided"], {"columns_fusion": $hash2([], {}), "columns_divided": $hash2([], {}), "rows_fusion": $hash2([], {}), "rows_divided": $hash2([], {})})
      };
      the_matrix.$instance_variable_set("@exceptions", exceptions);
      number_of_cells = $rb_times(rows, columns);
      $send(number_of_cells, 'times', [], function $$1(index){var self = $$1.$$s == null ? this : $$1.$$s, current_matrix = nil, current_cell_id = nil, current_cell = nil;

        
        if (index == null) index = nil;
        current_matrix = self.$grab(matrix_id);
        current_cell_id = "" + (matrix_id) + "_" + (index);
        current_cell = current_matrix.$box($hash2(["id"], {"id": current_cell_id}));
        the_matrix.$instance_variable_set("@cell_style", cells_data['$[]']("particles"));
        current_matrix.$instance_variable_get("@cells")['$<<'](current_cell_id);
        current_cell.$attached([cells_shadow_id]);
        current_cell.$attached([cells_color_id]);
        return self.$apply_style(current_cell, cells_data['$[]']("particles"));}, {$$s: self});
      the_matrix.$format_matrix(matrix_id, matrix_width, matrix_height, rows, columns, margin, exceptions);
      return the_matrix;
    }, -1);
    
    $def(self, '$matrix_sanitizer', function $$matrix_sanitizer(params) {
      var default_params = nil;

      
      default_params = $hash2(["left", "top", "width", "height", "smooth", "color", "columns", "rows", "cells"], {"left": 33, "top": 33, "width": 369, "height": 369, "smooth": 8, "color": "gray", "columns": $hash2(["count"], {"count": 4}), "rows": $hash2(["count"], {"count": 4}), "cells": $hash2(["particles"], {"particles": $hash2(["margin", "color", "smooth", "shadow"], {"margin": 9, "color": "lightgray", "smooth": 9, "shadow": $hash2(["blur", "left", "top"], {"blur": 9, "left": 3, "top": 3})})})});
      return default_params.$merge(params);
    });
    
    $def(self, '$cells', function $$cells(cell_nb) {
      var proc = $$cells.$$p || nil, self = this, collected_atomes = nil;
      if (self.cells == null) self.cells = nil;

      $$cells.$$p = null;
      
      ;
      if ($truthy(cell_nb)) {
        
        collected_atomes = [];
        $send(cell_nb, 'each', [], function $$2(cell_found){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (cell_found == null) cell_found = nil;
          if ($truthy(cell_found['$instance_of?']($$('Integer')))) {
            
            cell_found = self.$cells()['$[]'](cell_found);
            return collected_atomes['$<<'](cell_found);
          } else {
            return collected_atomes['$<<'](cell_found)
          };}, {$$s: self});
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [collected_atomes], proc.$to_proc())
        } else {
          return nil
        };
      } else {
        
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          $send(self, 'instance_exec', [self.cells], proc.$to_proc())
        };
        return self.cells;
      };
    });
    
    $def(self, '$cell', function $$cell(cell_nb) {
      var self = this;

      return self.$grab("" + (self.$id()) + "_" + (cell_nb))
    });
    
    $def(self, '$columns', function $$columns(column_requested) {
      var proc = $$columns.$$p || nil, self = this, number_of_cells = nil, column_content = nil, cells_found = nil;
      if (self.columns == null) self.columns = nil;
      if (self.rows == null) self.rows = nil;

      $$columns.$$p = null;
      
      ;
      number_of_cells = $rb_times(self.columns, self.rows);
      column_content = self.$get_column_or_row(number_of_cells, self.columns, column_requested, true);
      cells_found = [];
      $send(column_content, 'each', [], function $$3(cell_nb){var self = $$3.$$s == null ? this : $$3.$$s, atome_found = nil;

        
        if (cell_nb == null) cell_nb = nil;
        atome_found = self.$grab("" + (self.$id()) + "_" + (cell_nb));
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          $send(self, 'instance_exec', [atome_found], proc.$to_proc())
        };
        return cells_found['$<<'](self.$grab("" + (self.$id()) + "_" + (cell_nb)));}, {$$s: self});
      return self.$element($hash2(["data"], {"data": cells_found}));
    });
    
    $def(self, '$rows', function $$rows(row_requested) {
      var proc = $$rows.$$p || nil, self = this, number_of_cells = nil, column_content = nil, cells_found = nil;
      if (self.columns == null) self.columns = nil;
      if (self.rows == null) self.rows = nil;

      $$rows.$$p = null;
      
      ;
      number_of_cells = $rb_times(self.columns, self.rows);
      column_content = self.$get_column_or_row(number_of_cells, self.columns, row_requested, false);
      cells_found = [];
      $send(column_content, 'each', [], function $$4(cell_nb){var self = $$4.$$s == null ? this : $$4.$$s, atome_found = nil;

        
        if (cell_nb == null) cell_nb = nil;
        atome_found = self.$grab("" + (self.$id()) + "_" + (cell_nb));
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          $send(self, 'instance_exec', [atome_found], proc.$to_proc())
        };
        return cells_found['$<<'](self.$grab("" + (self.$id()) + "_" + (cell_nb)));}, {$$s: self});
      return self.$element($hash2(["data"], {"data": cells_found}));
    });
    
    $def(self, '$fusion', function $$fusion(params) {
      var self = this, number_of_cells = nil;
      if (self.columns == null) self.columns = nil;
      if (self.rows == null) self.rows = nil;
      if (self.exceptions == null) self.exceptions = nil;

      
      number_of_cells = $rb_times(self.columns, self.rows);
      if ($truthy(params['$[]']("columns"))) {
        
        self.exceptions['$[]=']("columns_fusion", params['$[]']("columns").$merge(self.exceptions['$[]']("columns_fusion")));
        return $send(params['$[]']("columns"), 'each', [], function $$5(column_to_alter, value){var self = $$5.$$s == null ? this : $$5.$$s, cell_height = nil, cells_in_column = nil, cells_to_alter = nil;
          if (self.matrix_height == null) self.matrix_height = nil;
          if (self.margin == null) self.margin = nil;
          if (self.rows == null) self.rows = nil;
          if (self.columns == null) self.columns = nil;

          
          if (column_to_alter == null) column_to_alter = nil;
          if (value == null) value = nil;
          cell_height = $rb_divide($rb_minus(self.matrix_height, $rb_times(self.margin, $rb_plus(self.rows, 1))), self.rows);
          cells_in_column = self.$get_column_or_row(number_of_cells, self.columns, column_to_alter, true);
          cells_to_alter = cells_in_column['$[]'](Opal.Range.$new(value['$[]'](0), value['$[]'](1), false));
          return $send(cells_to_alter, 'each_with_index', [], function $$6(cell_nb, index){var self = $$6.$$s == null ? this : $$6.$$s, current_cell = nil;
            if (self.margin == null) self.margin = nil;

            
            if (cell_nb == null) cell_nb = nil;
            if (index == null) index = nil;
            current_cell = self.$grab("" + (self.$id()) + "_" + (cell_nb));
            if ($truthy(index['$zero?']())) {
              return current_cell.$height($rb_plus($rb_times(cell_height, cells_to_alter.$length()), $rb_times(self.margin, $rb_minus(cells_to_alter.$length(), 1))))
            } else {
              return current_cell.$hide(true)
            };}, {$$s: self});}, {$$s: self});
      } else {
        
        self.exceptions['$[]=']("rows_fusion", params['$[]']("rows").$merge(self.exceptions['$[]']("rows_fusion")));
        return $send(params['$[]']("rows"), 'each', [], function $$7(row_to_alter, value){var self = $$7.$$s == null ? this : $$7.$$s, cell_width = nil, cells_in_column = nil, cells_to_alter = nil;
          if (self.matrix_width == null) self.matrix_width = nil;
          if (self.margin == null) self.margin = nil;
          if (self.columns == null) self.columns = nil;

          
          if (row_to_alter == null) row_to_alter = nil;
          if (value == null) value = nil;
          cell_width = $rb_divide($rb_minus(self.matrix_width, $rb_times(self.margin, $rb_plus(self.columns, 1))), self.columns);
          cells_in_column = self.$get_column_or_row(number_of_cells, self.columns, row_to_alter, false);
          cells_to_alter = cells_in_column['$[]'](Opal.Range.$new(value['$[]'](0), value['$[]'](1), false));
          return $send(cells_to_alter, 'each_with_index', [], function $$8(cell_nb, index){var self = $$8.$$s == null ? this : $$8.$$s, current_cell = nil;
            if (self.margin == null) self.margin = nil;

            
            if (cell_nb == null) cell_nb = nil;
            if (index == null) index = nil;
            current_cell = self.$grab("" + (self.$id()) + "_" + (cell_nb));
            if ($truthy(index['$zero?']())) {
              return current_cell.$width($rb_plus($rb_times(cell_width, cells_to_alter.$length()), $rb_times(self.margin, $rb_minus(cells_to_alter.$length(), 1))))
            } else {
              return current_cell.$hide(true)
            };}, {$$s: self});}, {$$s: self});
      };
    });
    
    $def(self, '$divide', function $$divide(params) {
      var self = this, number_of_cells = nil;
      if (self.columns == null) self.columns = nil;
      if (self.rows == null) self.rows = nil;

      
      number_of_cells = $rb_times(self.columns, self.rows);
      if ($truthy(params['$[]']("columns"))) {
        return $send(params['$[]']("columns"), 'each', [], function $$9(column_to_alter, value){var self = $$9.$$s == null ? this : $$9.$$s, cells_in_column = nil, cells_to_alter = nil;
          if (self.columns == null) self.columns = nil;

          
          if (column_to_alter == null) column_to_alter = nil;
          if (value == null) value = nil;
          cells_in_column = self.$get_column_or_row(number_of_cells, self.columns, column_to_alter, true);
          cells_to_alter = cells_in_column.$take(value);
          return $send(cells_in_column, 'each_with_index', [], function $$10(cell_nb, index){var self = $$10.$$s == null ? this : $$10.$$s, current_cell = nil;
            if (self.matrix_height == null) self.matrix_height = nil;
            if (self.margin == null) self.margin = nil;

            
            if (cell_nb == null) cell_nb = nil;
            if (index == null) index = nil;
            current_cell = self.$grab("" + (self.$id()) + "_" + (cell_nb));
            if ($truthy(cells_to_alter['$include?'](cell_nb))) {
              
              current_cell.$height($rb_minus($rb_divide(self.matrix_height, value), $rb_plus(self.margin, value)));
              return current_cell.$top($rb_plus($rb_times(current_cell.$height(), index), $rb_times(self.margin, $rb_plus(index, 1))));
            } else {
              return current_cell.$hide(true)
            };}, {$$s: self});}, {$$s: self})
      } else {
        return $send(params['$[]']("rows"), 'each', [], function $$11(row_to_alter, value){var self = $$11.$$s == null ? this : $$11.$$s, cells_in_row = nil, cells_to_alter = nil;
          if (self.columns == null) self.columns = nil;

          
          if (row_to_alter == null) row_to_alter = nil;
          if (value == null) value = nil;
          cells_in_row = self.$get_column_or_row(number_of_cells, self.columns, row_to_alter, false);
          cells_to_alter = cells_in_row.$take(value);
          return $send(cells_in_row, 'each_with_index', [], function $$12(cell_nb, index){var self = $$12.$$s == null ? this : $$12.$$s, current_cell = nil;
            if (self.matrix_width == null) self.matrix_width = nil;
            if (self.margin == null) self.margin = nil;

            
            if (cell_nb == null) cell_nb = nil;
            if (index == null) index = nil;
            current_cell = self.$grab("" + (self.$id()) + "_" + (cell_nb));
            if ($truthy(cells_to_alter['$include?'](cell_nb))) {
              
              current_cell.$width($rb_minus($rb_minus($rb_divide(self.matrix_width, value), self.margin), $rb_divide(self.margin, value)));
              return current_cell.$left($rb_plus($rb_times(current_cell.$width(), index), $rb_times(self.margin, $rb_plus(index, 1))));
            } else {
              return current_cell.$hide(true)
            };}, {$$s: self});}, {$$s: self})
      };
    });
    
    $def(self, '$first', function $$first(item) {
      var proc = $$first.$$p || nil, self = this;

      $$first.$$p = null;
      
      ;
      if ($truthy(item['$[]']("columns"))) {
        return $send(self, 'columns', [0], proc.$to_proc())
      } else {
        return $send(self, 'rows', [0], proc.$to_proc())
      };
    });
    
    $def(self, '$last', function $$last(item) {
      var proc = $$last.$$p || nil, self = this;
      if (self.columns == null) self.columns = nil;
      if (self.rows == null) self.rows = nil;

      $$last.$$p = null;
      
      ;
      if ($truthy(item['$[]']("columns"))) {
        return $send(self, 'columns', [$rb_minus(self.columns, 1)], proc.$to_proc())
      } else {
        return $send(self, 'rows', [$rb_minus(self.rows, 1)], proc.$to_proc())
      };
    });
    
    $def(self, '$format_matrix', function $$format_matrix(matrix_id, matrix_width, matrix_height, nb_of_rows, nb_of_cols, margin, exceptions) {
      var self = this, cell_width = nil, cell_height = nil, ratio = nil, i = nil;

      
      if (exceptions == null) exceptions = $hash2([], {});
      cell_width = $rb_divide($rb_minus(matrix_width, $rb_times(margin, $rb_plus(nb_of_cols, 1))), nb_of_cols);
      cell_height = $rb_divide($rb_minus(matrix_height, $rb_times(margin, $rb_plus(nb_of_rows, 1))), nb_of_rows);
      ratio = $rb_divide(cell_height, cell_width);
      i = 0;
      $send(nb_of_rows, 'times', [], function $$13(row_index){var self = $$13.$$s == null ? this : $$13.$$s;

        
        if (row_index == null) row_index = nil;
        return $send(nb_of_cols, 'times', [], function $$14(col_index){var self = $$14.$$s == null ? this : $$14.$$s, x = nil, y = nil, current_cell = nil;

          
          if (col_index == null) col_index = nil;
          x = $rb_plus($rb_times($rb_plus(col_index, 1), margin), $rb_times(col_index, cell_width));
          y = $rb_plus($rb_times($rb_plus(row_index, 1), margin), $rb_times(row_index, cell_height));
          current_cell = self.$grab("" + (matrix_id) + "_" + (i));
          $send(current_cell.$materials(), 'each', [], function $$15(child){var self = $$15.$$s == null ? this : $$15.$$s;

            
            if (child == null) child = nil;
            if ($truthy(self.$grab(child))) {
              self.$grab(child).$width(cell_width)
            };
            if ($truthy(self.$grab(child))) {
              return self.$grab(child).$height(cell_width)
            } else {
              return nil
            };}, {$$s: self});
          current_cell['$width='](cell_width);
          current_cell['$height='](cell_height);
          current_cell.$left(x);
          current_cell.$top(y);
          return (i = $rb_plus(i, 1));}, {$$s: self});}, {$$s: self});
      if (!$truthy(exceptions)) {
        return nil
      };
      if ($truthy(exceptions['$[]']("columns_fusion"))) {
        return self.$fusion($hash2(["columns"], {"columns": exceptions['$[]']("columns_fusion")}))
      } else {
        return nil
      };
    }, -7);
    
    $def(self, '$apply_style', function $$apply_style(current_cell, style) {
      
      return current_cell.$set(style)
    });
    
    $def(self, '$add_columns', function $$add_columns(nb) {
      var self = this, prev_nb_of_cells = nil, nb_of_cells_to_adds = nil, new_nb_of_cells = nil;
      if (self.columns == null) self.columns = nil;
      if (self.rows == null) self.rows = nil;
      if (self.matrix_width == null) self.matrix_width = nil;
      if (self.matrix_height == null) self.matrix_height = nil;
      if (self.margin == null) self.margin = nil;
      if (self.exceptions == null) self.exceptions = nil;

      
      prev_nb_of_cells = $rb_times(self.columns, self.rows);
      nb_of_cells_to_adds = $rb_times(nb, self.rows);
      new_nb_of_cells = $rb_plus(prev_nb_of_cells, nb_of_cells_to_adds);
      $send(new_nb_of_cells, 'times', [], function $$16(index){var self = $$16.$$s == null ? this : $$16.$$s, current_cell = nil;
        if (self.cell_style == null) self.cell_style = nil;

        
        if (index == null) index = nil;
        if ($truthy($rb_lt(index, prev_nb_of_cells))) {
          self.$grab("" + (self.$id()) + "_" + (index)).$delete(true)
        };
        current_cell = self.$box($hash2(["id"], {"id": "" + (self.$id()) + "_" + (index)}));
        return self.$apply_style(current_cell, self.cell_style);}, {$$s: self});
      self.columns = $rb_plus(self.columns, nb);
      return self.$format_matrix(self.$id(), self.matrix_width, self.matrix_height, self.rows, self.columns, self.margin, self.exceptions);
    });
    
    $def(self, '$add_rows', function $$add_rows(nb) {
      var self = this, prev_nb_of_cells = nil, nb_of_cells_to_adds = nil, new_nb_of_cells = nil;
      if (self.columns == null) self.columns = nil;
      if (self.rows == null) self.rows = nil;
      if (self.matrix_width == null) self.matrix_width = nil;
      if (self.matrix_height == null) self.matrix_height = nil;
      if (self.margin == null) self.margin = nil;
      if (self.exceptions == null) self.exceptions = nil;

      
      prev_nb_of_cells = $rb_times(self.columns, self.rows);
      nb_of_cells_to_adds = $rb_times(nb, self.columns);
      new_nb_of_cells = $rb_plus(prev_nb_of_cells, nb_of_cells_to_adds);
      $send(new_nb_of_cells, 'times', [], function $$17(index){var self = $$17.$$s == null ? this : $$17.$$s, current_cell = nil;
        if (self.cell_style == null) self.cell_style = nil;

        
        if (index == null) index = nil;
        if ($truthy($rb_lt(index, prev_nb_of_cells))) {
          self.$grab("" + (self.$id()) + "_" + (index)).$delete(true)
        };
        current_cell = self.$box($hash2(["id"], {"id": "" + (self.$id()) + "_" + (index)}));
        return self.$apply_style(current_cell, self.cell_style);}, {$$s: self});
      self.rows = $rb_plus(self.rows, nb);
      return self.$format_matrix(self.$id(), self.matrix_width, self.matrix_height, self.rows, self.columns, self.margin, self.exceptions);
    });
    
    $def(self, '$resize', function $$resize(width, height) {
      var self = this;
      if (self.matrix_width == null) self.matrix_width = nil;
      if (self.matrix_height == null) self.matrix_height = nil;
      if (self.rows == null) self.rows = nil;
      if (self.columns == null) self.columns = nil;
      if (self.margin == null) self.margin = nil;
      if (self.exceptions == null) self.exceptions = nil;

      
      self.matrix_width = width;
      self.matrix_height = height;
      self.$grab(self.$id()).$width(width);
      self.$grab(self.$id()).$height(height);
      return self.$format_matrix(self.$id(), self.matrix_width, self.matrix_height, self.rows, self.columns, self.margin, self.exceptions);
    });
    return $def(self, '$get_column_or_row', function $$get_column_or_row(length, num_columns, index, is_column) {
      var num_rows = nil, result = nil, start_index = nil, end_index = nil;

      
      num_rows = $rb_divide(length, num_columns);
      if ($truthy(is_column)) {
        
        result = [];
        $send(Opal.Range.$new(0,num_rows, true), 'each', [], function $$18(row){
          
          if (row == null) row = nil;
          return result['$<<']($rb_plus(index, $rb_times(row, num_columns)));});
        return result;
      } else {
        
        start_index = $rb_times(index, num_columns);
        end_index = $rb_minus($rb_plus(start_index, num_columns), 1);
        return Opal.Range.$new(start_index, end_index, false).$to_a();
      };
    });
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return self.$include($$('Matrix'))
  })($nesting[0], null, $nesting);
};

Opal.modules["atome/helpers/sanitizer"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide, $def = Opal.def, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('private,css_rgb,[],split,gsub,sub,/,to_f');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$private();
    return $def(self, '$create_color_hash', function $$create_color_hash(params) {
      var rgb_color = nil, split_data = nil;

      
      rgb_color = $$$($$('Color'), 'CSS')['$[]'](params).$css_rgb();
      split_data = rgb_color.$sub("rgb(", "").$sub(")", "").$gsub(",", "").$split("%");
      return $hash2(["red", "green", "blue"], {"red": $rb_divide(split_data['$[]'](0).$to_f(), 100), "green": $rb_divide(split_data['$[]'](1).$to_f(), 100), "blue": $rb_divide(split_data['$[]'](2).$to_f(), 100)});
    });
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/genesis/sparkle"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $def = Opal.def, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $gvars = Opal.gvars, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, default_render = nil;

  Opal.add_stubs('==,downcase,new_default_params,eval,eval_protection,[],default_params,puts,aui,current_machine,current_user,current_server,current_user=,atome_infos,new');
  
  
  $def(self, '$eval_protection', function $$eval_protection() {
    var self = this;

    return Opal.Binding.$new(  function($code) {    return eval($code);  },  [],  self,  ['atome/genesis/sparkle.rb', 5])
  });
  if ($eqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
    $$('Essentials').$new_default_params($hash2(["render_engines"], {"render_engines": ["browser"]}))
  } else {
    
    $$('Essentials').$new_default_params($hash2(["render_engines"], {"render_engines": ["headless"]}));
    self.$eval("require 'atome/extensions/geolocation'", self.$eval_protection(), "atome/genesis/sparkle.rb", 13);
    self.$eval("require 'atome/extensions/ping'", self.$eval_protection(), "atome/genesis/sparkle.rb", 14);
    self.$eval("require 'atome/extensions/sha'", self.$eval_protection(), "atome/genesis/sparkle.rb", 15);
  };
  default_render = $$('Essentials').$default_params()['$[]']("render_engines");
  
  $def(self, '$atome_infos', function $$atome_infos() {
    var self = this;
    if ($gvars.host == null) $gvars.host = nil;

    
    self.$puts("atome version: " + ($$$($$('Atome'), 'VERSION')));
    self.$puts("application identity:  " + ($$('Atome').$aui()));
    self.$puts("host framework:  " + ($gvars.host));
    self.$puts("script mode: " + ($$('Universe').$current_machine()));
    self.$puts("user: " + ($$('Universe').$current_user()));
    return self.$puts("server: " + ($$('Universe').$current_server()));
  });
  $$('Universe')['$current_user=']("jeezs");
  self.$atome_infos();
  $$('Atome').$new($hash2(["element"], {"element": $hash2(["renderers", "id", "type", "tag"], {"renderers": [], "id": "eDen", "type": "element", "tag": $hash2(["system"], {"system": true})})}));
  $$('Atome').$new($hash2(["element"], {"element": $hash2(["renderers", "id", "type", "tag", "attach"], {"renderers": [], "id": "user_view", "type": "element", "tag": $hash2(["system"], {"system": true}), "attach": ["eDen"]})}));
  $$('Atome').$new($hash2(["color"], {"color": $hash2(["renderers", "id", "type", "tag", "red", "green", "blue", "alpha"], {"renderers": default_render, "id": "view_color", "type": "color", "tag": $hash2(["persistent"], {"persistent": true}), "red": 0.15, "green": 0.15, "blue": 0.15, "alpha": 1})}));
  $$('Atome').$new($hash2(["color"], {"color": $hash2(["renderers", "id", "type", "tag", "red", "green", "blue", "alpha"], {"renderers": default_render, "id": "shape_color", "type": "color", "tag": $hash2(["persistent"], {"persistent": true}), "red": 0.4, "green": 0.4, "blue": 0.4, "alpha": 1})}));
  $$('Atome').$new($hash2(["color"], {"color": $hash2(["renderers", "id", "type", "tag", "red", "green", "blue", "alpha"], {"renderers": default_render, "id": "box_color", "type": "color", "tag": $hash2(["persistent"], {"persistent": true}), "red": 0.5, "green": 0.5, "blue": 0.5, "alpha": 1})}));
  $$('Atome').$new($hash2(["color"], {"color": $hash2(["renderers", "id", "type", "tag", "red", "green", "blue", "alpha"], {"renderers": default_render, "id": "text_color", "type": "color", "tag": $hash2(["persistent"], {"persistent": true}), "red": 0.3, "green": 0.3, "blue": 0.3, "alpha": 1})}));
  $$('Atome').$new($hash2(["color"], {"color": $hash2(["renderers", "id", "type", "tag", "red", "green", "blue", "alpha"], {"renderers": default_render, "id": "circle_color", "type": "color", "tag": $hash2(["persistent"], {"persistent": true}), "red": 0.6, "green": 0.6, "blue": 0.6, "alpha": 1})}));
  $$('Atome').$new($hash2(["color"], {"color": $hash2(["renderers", "id", "type", "tag", "left", "top", "red", "green", "blue", "alpha", "diffusion"], {"renderers": default_render, "id": "matrix_color", "type": "color", "tag": $hash2(["persistent"], {"persistent": true}), "left": 0, "top": 0, "red": 0.7, "green": 0.7, "blue": 0.7, "alpha": 1, "diffusion": "linear"})}));
  $$('Atome').$new($hash2(["shape"], {"shape": $hash2(["renderers", "id", "type", "attach", "left", "right", "top", "bottom", "width", "height", "overflow", "tag"], {"renderers": default_render, "id": "black_matter", "type": "shape", "attach": ["user_view"], "left": 0, "right": 0, "top": 0, "bottom": 0, "width": 0, "height": 0, "overflow": "hidden", "tag": $hash2(["system"], {"system": true})})}));
  $$('Atome').$new($hash2(["shape"], {"shape": $hash2(["renderers", "id", "type", "attach", "tag", "attached", "left", "right", "top", "bottom", "width", "height", "overflow"], {"renderers": default_render, "id": "view", "type": "shape", "attach": ["user_view"], "tag": $hash2(["system"], {"system": true}), "attached": "view_color", "left": 0, "right": 0, "top": 0, "bottom": 0, "width": "auto", "height": "auto", "overflow": "auto"})}));
  return $$('Atome').$new($hash2(["shape"], {"shape": $hash2(["renderers", "id", "type", "attach", "tag", "left", "top", "width", "height", "overflow"], {"renderers": default_render, "id": "intuition", "type": "shape", "attach": ["user_view"], "tag": $hash2(["system"], {"system": true}), "left": 0, "top": 0, "width": 0, "height": 0, "overflow": "visible"})}));
};

Opal.queue(function(Opal) {/* Generated by Opal 1.7.3 */
  var $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('require,==,downcase');
  
  self.$require("fileutils");
  self.$require("securerandom");
  self.$require("atome/version");
  self.$require("atome/genesis/genesis");
  self.$require("atome/kernel/essentials");
  self.$require("atome/kernel/universe");
  self.$require("atome/kernel/batch");
  self.$require("atome/helpers/essentials");
  self.$require("atome/renderers/renderer");
  self.$require("atome/helpers/color_helper/color");
  self.$require("atome/extensions/atome");
  self.$require("atome/extensions/mathematic");
  self.$require("atome/atome");
  self.$require("atome/helpers/callbacks");
  self.$require("atome/genesis/generators/atome");
  self.$require("atome/presets/atome");
  self.$require("atome/genesis/generators/communication");
  self.$require("atome/genesis/generators/effect");
  self.$require("atome/genesis/generators/event");
  self.$require("atome/genesis/generators/geometry");
  self.$require("atome/genesis/generators/identity");
  self.$require("atome/genesis/generators/material");
  self.$require("atome/genesis/generators/spatial");
  self.$require("atome/genesis/generators/time");
  self.$require("atome/genesis/generators/utility");
  self.$require("atome/helpers/utilities");
  if ($eqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
    
    self.$require("atome/renderers/browser/browser");
    self.$require("atome/renderers/html/html");
  };
  self.$require("atome/renderers/headless/headless");
  self.$require("atome/renderers/server/server");
  self.$require("atome/extensions/matrix");
  self.$require("atome/helpers/sanitizer");
  return self.$require("atome/genesis/sparkle");
});
