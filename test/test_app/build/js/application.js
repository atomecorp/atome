Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $hash2 = Opal.hash2, $send = Opal.send, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $gvars = Opal.gvars, b = nil, c = nil, a = nil, image = nil, text = nil, video = nil, animation = nil;

  Opal.add_stubs('box,height,left,smooth,touch,color,length,atomes,top,rotate,alert,new,drag,shape,puts,==,circle,atome_creator,particle_creator,generate_html_renderer,[]=,+,to_s,now,id,is_a?,instance_exec,to_proc,append_to,DOM,atome,img,[],text=,style,div,string,text,video,script,atome_creator_option,class,each,instance_variables,instance_variable_get,particles,grab,delete,gsub,send');
  
  b = self.$box($hash2(["width", "left", "id"], {"width": 333, "left": 666, "id": "poil"}));
  b.$height(33);
  b.$left(333);
  b.$smooth([33, 2, 90]);
  $send(b, 'touch', [true], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self.$color($hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "color_" + ($$('Universe').$atomes().$length()), "type": "color", "red": 1, "green": 0.33, "blue": 0.22, "alpha": 1}))}, {$$arity: 0, $$s: self});
  c = b.$box($hash2(["left"], {"left": 333}));
  b.$top(99);
  $send(b, 'rotate', [999], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

    return self.$alert("poilu")}, {$$arity: 0, $$s: self});
  a = $$('Atome').$new($hash2(["shape"], {"shape": $hash2(["render", "id", "type", "parent", "left", "right", "width", "height", "color"], {"render": ["html"], "id": "crasher", "type": "shape", "parent": "view", "left": 99, "right": 99, "width": 99, "height": 99, "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "c315", "type": "color", "red": 1, "green": 0.15, "blue": 0.15, "alpha": 0.6})})}));
  $send(a.$shape(), 'drag', [true], function $$3(x, y){var self = $$3.$$s == null ? this : $$3.$$s;

    
    
    if (x == null) x = nil;;
    
    if (y == null) y = nil;;
    return self.$puts("drag position: " + (x));}, {$$arity: 2, $$s: self});
  $send(a.$shape(), 'touch', [true], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

    
    if ($eqeq(a.$shape().$drag(), "remove")) {
      a.$shape().$drag(true)
    } else {
      a.$shape().$drag("remove")
    };
    return self.$alert(self.$left());}, {$$arity: 0, $$s: self});
  c = self.$circle();
  c.$color("orange");
  c = self.$circle($hash2(["left"], {"left": 666}));
  c.$color($hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "c3190", "type": "color", "red": 1, "green": 0.6, "blue": 0.15, "alpha": 0.6}));
  c.$color("orange");
  $$('Genesis').$atome_creator("image");
  $$('Genesis').$particle_creator("path");
  $send($$('Genesis'), 'generate_html_renderer', ["path"], function $$5(value, atome, proc){var $a, self = $$5.$$s == null ? this : $$5.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return ($a = ["src", $rb_plus($rb_plus(value, "?"), $$('Time').$now().$to_s())], $send(self.html_object, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["image"], function $$6(value, atome, proc){var self = $$6.$$s == null ? this : $$6.$$s, id_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    id_found = self.$id();
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    $send(self, 'DOM', [], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

      return self.$img($hash2(["id"], {"id": id_found})).$atome()}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
    self.html_object = $gvars.document['$[]'](id_found);
    return (self.html_type = "image");}, {$$arity: 3, $$s: self});
  image = $$('Atome').$new($hash2(["image"], {"image": $hash2(["render", "id", "type", "parent", "path", "left", "top", "width", "height"], {"render": ["html"], "id": "image1", "type": "image", "parent": "view", "path": "./medias/images/boat.png", "left": 99, "top": 120, "width": 199, "height": 199})}));
  $$('Genesis').$atome_creator("text");
  $$('Genesis').$particle_creator("string");
  $send($$('Genesis'), 'generate_html_renderer', ["string"], function $$8(value, atome, proc){var $a, self = $$8.$$s == null ? this : $$8.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return ($a = [value], $send(self.html_object, 'text=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  $$('Genesis').$particle_creator("visual");
  $send($$('Genesis'), 'generate_html_renderer', ["visual"], function $$9(value, atome, proc){var $a, self = $$9.$$s == null ? this : $$9.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return ($a = ["font-size", "" + (value['$[]']("size")) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["text"], function $$10(value, atome, proc){var self = $$10.$$s == null ? this : $$10.$$s, id_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    id_found = self.$id();
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    $send(self, 'DOM', [], function $$11(){var self = $$11.$$s == null ? this : $$11.$$s;

      return self.$div($hash2(["id"], {"id": id_found})).$atome()}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
    self.html_object = $gvars.document['$[]'](id_found);
    return (self.html_type = "div");}, {$$arity: 3, $$s: self});
  text = $$('Atome').$new($hash2(["text"], {"text": $hash2(["render", "id", "type", "parent", "visual", "string", "left", "top", "width", "height"], {"render": ["html"], "id": "text1", "type": "text", "parent": "view", "visual": $hash2(["size"], {"size": 33}), "string": "hello!", "left": 399, "top": 633, "width": 199, "height": 33})}));
  text.$text().$string("kool");
  $$('Genesis').$atome_creator("video");
  $send($$('Genesis'), 'generate_html_renderer', ["video"], function $$12(value, atome, proc){var self = $$12.$$s == null ? this : $$12.$$s, id_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    id_found = self.$id();
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    $send(self, 'DOM', [], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

      return self.$video($hash2(["id", "autoplay"], {"id": id_found, "autoplay": true})).$atome()}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
    self.html_object = $gvars.document['$[]'](id_found);
    return (self.html_type = "video");}, {$$arity: 3, $$s: self});
  video = $$('Atome').$new($hash2(["video"], {"video": $hash2(["render", "id", "type", "parent", "path", "left", "top", "width", "height"], {"render": ["html"], "id": "video1", "type": "video", "parent": "view", "path": "./medias/videos/avengers.mp4", "left": 333, "top": 333, "width": 199, "height": 99})}));
  $$('Genesis').$atome_creator("animation");
  $send($$('Genesis'), 'generate_html_renderer', ["animation"], function $$14(value, atome, proc){var self = $$14.$$s == null ? this : $$14.$$s, id_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    id_found = self.$id();
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    $send(self, 'DOM', [], function $$15(){var self = $$15.$$s == null ? this : $$15.$$s;

      return self.$script($hash2(["id"], {"id": id_found}))}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
    self.html_object = $gvars.document['$[]'](id_found);
    return (self.html_type = "div");}, {$$arity: 3, $$s: self});
  $$('Genesis').$particle_creator("code");
  $send($$('Genesis'), 'generate_html_renderer', ["code"], function $$16(value, atome, proc){
    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return nil;}, 3);
  $send($$('Genesis'), 'particle_creator', ["target"], function $$17(params){
    
    
    if (params == null) params = nil;;
    return nil;}, 1);
  $$('Genesis').$particle_creator("bloc");
  $send($$('Genesis'), 'atome_creator_option', ["bloc_pre_render_proc"], function $$18(params){var self = $$18.$$s == null ? this : $$18.$$s, proc_found = nil;

    
    
    if (params == null) params = nil;;
    proc_found = params['$[]']("value")['$[]']("bloc");
    if ($truthy(proc_found['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc_found.$to_proc())
    };
    return params['$[]']("value");}, {$$arity: 1, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["target"], function $$19(value, atome, proc){var self = $$19.$$s == null ? this : $$19.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return self.html_object;}, {$$arity: 3, $$s: self});
  animation = $send($$('Atome'), 'new', [$hash2(["animation"], {"animation": $hash2(["render", "id", "type", "target", "code", "left", "top", "width", "height"], {"render": ["html"], "id": "anim1", "type": "animation", "target": "image1", "code": "alert :poil", "left": 333, "top": 333, "width": 199, "height": 99})})], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;

    return self.$puts(" proc exec added at atome creation level : " + (self.$class()))}, {$$arity: 0, $$s: self});
  $$('Genesis').$particle_creator("particles");
  $send($$('Genesis'), 'atome_creator_option', ["particles_getter_pre_proc"], function $$21(params){var atome_found = nil, particles_hash = nil;

    
    
    if (params == null) params = nil;;
    atome_found = params['$[]']("atome");
    particles_hash = $hash2([], {});
    $send(atome_found.$instance_variables(), 'each', [], function $$22(particle_found){var $a, particle_content = nil;

      
      
      if (particle_found == null) particle_found = nil;;
      particle_content = atome_found.$instance_variable_get(particle_found);
      return ($a = [particle_found, particle_content], $send(particles_hash, '[]=', $a), $a[$a.length - 1]);}, 1);
    return particles_hash;}, 1);
  self.$alert("particles for atome color c315 should get but not store into @particles : " + ($$('Utilities').$grab("c315").$particles()));
  self.$alert(self.$grab("c315"));
  $$('Genesis').$particle_creator("link");
  $$('Genesis').$particle_creator("html_type");
  $$('Genesis').$particle_creator("html_object");
  return $send($$('Genesis'), 'atome_creator_option', ["link_pre_render_proc"], function $$23(params){var self = $$23.$$s == null ? this : $$23.$$s, atome_found = nil, atome_to_link = nil, particles_found = nil, atome_type = nil, sanitized_particles = nil;

    
    
    if (params == null) params = nil;;
    atome_found = params['$[]']("atome");
    atome_to_link = self.$grab(params['$[]']("value"));
    particles_found = atome_to_link.$particles();
    atome_type = particles_found.$delete("@type");
    sanitized_particles = $hash2([], {});
    $send(particles_found, 'each', [], function $$24(particle_name, value){var $a;

      
      
      if (particle_name == null) particle_name = nil;;
      
      if (value == null) value = nil;;
      particle_name = particle_name.$gsub("@", "");
      return ($a = [particle_name, value], $send(sanitized_particles, '[]=', $a), $a[$a.length - 1]);}, 2);
    atome_found.$send(atome_type, "green");
    return params['$[]']("value");}, {$$arity: 1, $$s: self});
});
