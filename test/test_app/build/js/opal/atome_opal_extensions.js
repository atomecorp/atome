Opal.modules["extensions/geolocation"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars, $def = Opal.def;

  Opal.add_stubs('rescue,then,geolocate,navigator,[]=,latitude,coords,longitude,p');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    return $def(self, '$geolocation', function $$geolocation() {
      var self = this, localisation = nil;
      if ($gvars.window == null) $gvars.window = nil;

      
      localisation = $hash2(["latitude", "longitude"], {"latitude": nil, "longitude": nil});
      return $send($send($gvars.window.$navigator().$geolocate(), 'then', [], function $$1(pos){var $a;

        
        
        if (pos == null) pos = nil;;
        localisation['$[]=']("latitude", pos.$coords().$latitude());
        return ($a = ["longitude", pos.$coords().$longitude()], $send(localisation, '[]=', $a), $a[$a.length - 1]);}, 1), 'rescue', [], function $$2(err){var self = $$2.$$s == null ? this : $$2.$$s;

        
        
        if (err == null) err = nil;;
        self.$p(err);
        return (localisation = nil);}, {$$arity: 1, $$s: self});
    }, 0)
  })($nesting[0], null)
};

Opal.modules["extensions/ping"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('is_a?,instance_exec,address');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$ping', function $$ping(my_proc) {
      var self = this;

      
      
      if (my_proc == null) my_proc = false;;
      if ($truthy(my_proc['$is_a?']($$('Proc')))) {
        self.$instance_exec(my_proc)
      };
       var p = new Ping();
        p.ping('https://'+self.$address()+'', function (err, data) {
            if (err) {
               return false;
            } else {
 console.log("the site "+self.$address()+" is up!");
            }
        });
;
    }, -1)
  })($nesting[0], null, $nesting)
};

Opal.modules["extensions/sha"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def;

  Opal.add_stubs('==,downcase,hexdigest');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$calculate_sha', function $$calculate_sha(string) {
      
      if ($eqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
        return sha256(string)
      } else {
        return $$$($$('Digest'), 'SHA256').$hexdigest(string)
      }
    }, 1)
  })($nesting[0], null, $nesting)
};

Opal.modules["extensions/color"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $def = Opal.def, $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide;

  Opal.add_stubs('rgb_html,/,[]');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    
    $def(self, '$rgb_html', function $$rgb_html(string) {
      
      
  col = w3color(string);
  rgb_col=col.toRgb();
  return Opal.hash(rgb_col)
 
    }, 1);
    return $def(self, '$to_rgb', function $$to_rgb(string) {
      var self = this, rgb_color = nil;

      
      rgb_color = self.$rgb_html(string);
      return $hash2(["red", "green", "blue", "alpha"], {"red": $rb_divide(rgb_color['$[]']("r"), 255), "green": $rb_divide(rgb_color['$[]']("g"), 255), "blue": $rb_divide(rgb_color['$[]']("b"), 255), "alpha": 1});
    }, 1);
  })($nesting[0], null)
};

Opal.modules["properties/generator"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $hash2 = Opal.hash2, $gvars = Opal.gvars, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $eqeqeq = Opal.eqeqeq;

  Opal.add_stubs('is_a?,instance_exec,to_proc,send,id,append_to,DOM,atome,div,[],<<,head,green,blue,alpha,inner_html=,*,red,==,add_class,[]=,style,===,each,to_s,join,on');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'OpalRenderer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$render_html', function $$render_html(_params, _atome) {
      var proc = $$render_html.$$p || nil, self = this;

      delete $$render_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    
    $def(self, '$type_html', function $$type_html(params, atome) {
      var proc = $$type_html.$$p || nil, self = this;

      delete $$type_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return $send(self, 'send', ["" + (params) + "_html", params, atome], proc.$to_proc());
    }, 2);
    
    $def(self, '$shape_html', function $$shape_html(_params, _atome) {
      var proc = $$shape_html.$$p || nil, self = this, id_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$shape_html.$$p;
      
      ;
      id_found = self.$id();
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      $send(self, 'DOM', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

        return self.$div($hash2(["id"], {"id": id_found})).$atome()}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
      self.html_object = $gvars.document['$[]'](id_found);
      return (self.html_type = "div");
    }, 2);
    
    $def(self, '$color_html', function $$color_html(_params, _atome) {
      var proc = $$color_html.$$p || nil, self = this;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$color_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      self.html_type = "style";
      return $gvars.document.$head()['$<<'](self.$DOM("<style id='" + (self.$id()) + "'></style>"));
    }, 2);
    
    $def(self, '$red_html', function $$red_html(params, _atome) {
      var proc = $$red_html.$$p || nil, $a, self = this, green_found = nil, $ret_or_1 = nil, blue_found = nil, alpha_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$red_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      green_found = self.$green();
      green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
      blue_found = self.$blue();
      blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
      alpha_found = self.$alpha();
      alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
      return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(params, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);
    }, 2);
    
    $def(self, '$green_html', function $$green_html(params, _atome) {
      var proc = $$green_html.$$p || nil, $a, self = this, red_found = nil, $ret_or_1 = nil, blue_found = nil, alpha_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$green_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      red_found = self.$red();
      red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
      blue_found = self.$blue();
      blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
      alpha_found = self.$alpha();
      alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
      return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(params, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);
    }, 2);
    
    $def(self, '$blue_html', function $$blue_html(params, _atome) {
      var proc = $$blue_html.$$p || nil, $a, self = this, red_found = nil, $ret_or_1 = nil, green_found = nil, alpha_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$blue_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      red_found = self.$red();
      red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
      green_found = self.$green();
      green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
      alpha_found = self.$alpha();
      alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
      return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(params, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);
    }, 2);
    
    $def(self, '$alpha_html', function $$alpha_html(params, _atome) {
      var proc = $$alpha_html.$$p || nil, $a, self = this, red_found = nil, $ret_or_1 = nil, green_found = nil, blue_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$alpha_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      red_found = self.$red();
      red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
      green_found = self.$green();
      green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
      blue_found = self.$blue();
      blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
      return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (params) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);
    }, 2);
    
    $def(self, '$drm_html', function $$drm_html(_params, _atome) {
      var proc = $$drm_html.$$p || nil, self = this;

      delete $$drm_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    
    $def(self, '$parent_html', function $$parent_html(params, _atome) {
      var proc = $$parent_html.$$p || nil, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$parent_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      if ($eqeq(self.html_type, "style")) {
        return $gvars.document['$[]'](params).$add_class(self.$id())
      } else {
        return self.html_object.$append_to($gvars.document['$[]'](params))
      };
    }, 2);
    
    $def(self, '$id_html', function $$id_html(params, _atome) {
      var proc = $$id_html.$$p || nil, self = this;

      delete $$id_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    
    $def(self, '$width_html', function $$width_html(params, _atome) {
      var proc = $$width_html.$$p || nil, $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      delete $$width_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["width", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      };
    }, 2);
    
    $def(self, '$height_html', function $$height_html(params, _atome) {
      var proc = $$height_html.$$p || nil, $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      delete $$height_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["height", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      };
    }, 2);
    
    $def(self, '$left_html', function $$left_html(params, _atome) {
      var proc = $$left_html.$$p || nil, $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      delete $$left_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["left", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      };
    }, 2);
    
    $def(self, '$right_html', function $$right_html(params, _atome) {
      var $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["right", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      }
    }, 2);
    
    $def(self, '$top_html', function $$top_html(params, _atome) {
      var $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["top", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      }
    }, 2);
    
    $def(self, '$bottom_html', function $$bottom_html(params, _atome) {
      var $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["bottom", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      }
    }, 2);
    
    $def(self, '$smooth_html', function $$smooth_html(params, _atome) {
      var proc = $$smooth_html.$$p || nil, $a, self = this, formated_params = nil, $ret_or_1 = nil, properties = nil;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      delete $$smooth_html.$$p;
      
      ;
      formated_params = ($eqeqeq($$('Array'), ($ret_or_1 = params)) ? (((properties = []), $send(params, 'each', [], function $$2(param){
        
        
        if (param == null) param = nil;;
        return properties['$<<']("" + (param) + "px");}, 1), properties.$join(" ").$to_s())) : ($eqeqeq($$('Integer'), $ret_or_1) ? ("" + (params) + "px") : (params)));
      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["border-radius", formated_params], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      };
    }, 2);
    return $def(self, '$touch_html', function $$touch_html(params, _atome) {
      var proc = $$touch_html.$$p || nil, self = this;
      if (self.html_object == null) self.html_object = nil;

      delete $$touch_html.$$p;
      
      ;
      return $send(self.html_object, 'on', ["click"], function $$3(e){var self = $$3.$$s == null ? this : $$3.$$s;

        
        
        if (e == null) e = nil;;
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [], proc.$to_proc())
        } else {
          return nil
        };}, {$$arity: 1, $$s: self});
    }, 2);
  })($nesting[0], $nesting)
};

Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("extensions/geolocation");
  self.$require("extensions/ping");
  self.$require("extensions/sha");
  self.$require("extensions/color");
  return self.$require("properties/generator");
});
