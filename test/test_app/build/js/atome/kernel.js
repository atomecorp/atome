Opal.modules["fileutils"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.5.1 */

Opal.modules["atome/version"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $const_set = Opal.const_set;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting);

    return $const_set($nesting[0], 'VERSION', "0.437")
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/universe"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $assign_ivar_val = Opal.assign_ivar_val, $defs = Opal.defs, $return_val = Opal.return_val;

  Opal.add_stubs('<<,attr_reader');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Universe');

    var $nesting = [self].concat($parent_nesting);

    
    $defs(self, '$app_identity', $assign_ivar_val("app_identity", 3), 0);
    $defs(self, '$initialize', function $$initialize() {
      var self = this;

      return (self.atomes = [])
    }, 0);
    $defs(self, '$atomes_add', function $$atomes_add(new_atome) {
      var self = this;
      if (self.atomes == null) self.atomes = nil;

      return self.atomes['$<<'](new_atome)
    }, 1);
    (function(self, $parent_nesting) {
      
      return self.$attr_reader("atomes")
    })(Opal.get_singleton_class(self), $nesting);
    return $defs(self, '$connected', $return_val(true), 0);
  })($nesting[0], null, $nesting)
};

Opal.modules["atome/kernel/generators/genesis"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $def = Opal.def, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $defs = Opal.defs;

  Opal.add_stubs('validation,run_optional_methods_helper,to_sym,broadcaster,history,instance_variable_get,set_new_particle,to_proc,get_new_particle,new,instance_variable_set,each,send,create_new_atomes,current_user,app_identity,length,atomes,add_essential_properties,sanitizer,set_new_atome,get_new_atome,additional,include,[]=,[],is_a?,instance_exec,define_method,additional_atomes,new_atome,additional_atome_methods,atome_creator_option,render_engine,optional_particle_methods,particles,new_particle,additional_particle_methods');
  
  (function($base) {
    var self = $module($base, 'GenesisHelper');

    
    
    
    $def(self, '$broadcaster', function $$broadcaster(property, value) {
      
      return "historize : " + (property) + " " + (value)
    }, 2);
    return $def(self, '$history', function $$history(property, value) {
      
      return "broadcast : " + (property) + " " + (value)
    }, 2);
  })($nesting[0]);
  (function($base, $parent_nesting) {
    var self = $module($base, 'GenesisKernel');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$set_new_particle', function $$set_new_particle(particle, value) {
      var proc = $$set_new_particle.$$p || nil, self = this;

      delete $$set_new_particle.$$p;
      
      ;
      if (!$truthy(self.$validation(particle))) {
        return false
      };
      $$('Genesis').$run_optional_methods_helper((("" + (particle)) + "_pre_render_proc").$to_sym(), $hash2(["method", "value", "atome"], {"method": particle, "value": value, "atome": self}));
      $$('Genesis').$run_optional_methods_helper((("" + (particle)) + "_render_proc").$to_sym(), $hash2(["method", "value", "atome", "proc"], {"method": particle, "value": value, "atome": self, "proc": proc}));
      $$('Genesis').$run_optional_methods_helper((("" + (particle)) + "_post_render_proc").$to_sym(), $hash2(["method", "value"], {"method": particle, "value": value}));
      self.$broadcaster(particle, value);
      return self.$history(particle, value);
    }, 2);
    
    $def(self, '$get_new_particle', function $$get_new_particle(particle) {
      var self = this, particle_instance_variable = nil;

      
      if (!$truthy(self.$validation(particle))) {
        return false
      };
      $$('Genesis').$run_optional_methods_helper((("" + (particle)) + "_getter_pre_proc").$to_sym(), $hash2(["value"], {"value": false}));
      particle_instance_variable = "@" + (particle);
      return self.$instance_variable_get(particle_instance_variable);
    }, 1);
    
    $def(self, '$new_particle', function $$new_particle(particle, params, proc) {
      var self = this;

      if ($truthy(params)) {
        return $send(self, 'set_new_particle', [particle, params], proc.$to_proc())
      } else {
        return self.$get_new_particle(particle)
      }
    }, 3);
    
    $def(self, '$create_new_atomes', function $$create_new_atomes(params, instance_var, _atome) {
      var self = this, new_atome = nil;

      
      new_atome = $$('Atome').$new($hash2([], {}));
      self.$instance_variable_set(instance_var, new_atome);
      return $send(params, 'each', [], function $$1(param, value){
        
        
        if (param == null) param = nil;;
        
        if (value == null) value = nil;;
        return new_atome.$send(param, value);}, 2);
    }, 3);
    
    $def(self, '$set_new_atome', function $$set_new_atome(atome, params, proc) {
      var self = this, instance_var = nil;

      
      if (!$truthy(self.$validation(atome))) {
        return false
      };
      instance_var = "@" + (atome);
      $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_pre_save_proc").$to_sym(), $hash2(["value"], {"value": params}));
      self.$create_new_atomes(params, instance_var, atome);
      $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_post_save_proc").$to_sym(), $hash2(["value"], {"value": params}));
      return (self.dna = "" + ($$('Atome').$current_user()) + "_" + ($$('Universe').$app_identity()) + "_" + ($$('Universe').$atomes().$length()));
    }, 3);
    
    $def(self, '$get_new_atome', function $$get_new_atome(atome) {
      var self = this, atome_instance_variable = nil;

      
      if (!$truthy(self.$validation(atome))) {
        return false
      };
      $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_getter_pre_proc").$to_sym(), $hash2(["value"], {"value": false}));
      atome_instance_variable = "@" + (atome);
      return self.$instance_variable_get(atome_instance_variable);
    }, 1);
    
    $def(self, '$new_atome', function $$new_atome(atome, params, proc) {
      var self = this;

      if ($truthy(params)) {
        
        params = self.$add_essential_properties(atome, params);
        params = self.$sanitizer(params);
        return self.$set_new_atome(atome, params, proc);
      } else {
        return self.$get_new_atome(atome)
      }
    }, 3);
    return $def(self, '$additional_atomes', function $$additional_atomes(atome, params) {
      var self = this, atome_instance_variable = nil;

      
      atome_instance_variable = "@" + (atome);
      if ($truthy(params)) {
        return self.$instance_variable_get(atome_instance_variable).$additional(params)
      } else {
        return self.$instance_variable_get(atome_instance_variable).$additional()
      };
    }, 2);
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Genesis');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$include($$('GenesisHelper'));
    self.$include($$('GenesisKernel'));
    $defs(self, '$default_value', function $$default_value() {
      
      return $hash2(["render"], {"render": ["html"]})
    }, 0);
    self.optionals_methods = $hash2([], {});
    self.optionals_methods = $hash2([], {});
    $defs(self, '$atome_creator_option', function $$atome_creator_option(property_name) {
      var proc = $$atome_creator_option.$$p || nil, $a, self = this;
      if (self.optionals_methods == null) self.optionals_methods = nil;

      delete $$atome_creator_option.$$p;
      
      ;
      return ($a = [property_name, proc], $send(self.optionals_methods, '[]=', $a), $a[$a.length - 1]);
    }, 1);
    $defs(self, '$run_optional_methods_helper', function $$run_optional_methods_helper(method_name, params) {
      var self = this, proc = nil;
      if (self.optionals_methods == null) self.optionals_methods = nil;

      
      proc = nil;
      if ($truthy(self.optionals_methods)) {
        proc = self.optionals_methods['$[]'](method_name)
      };
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [params], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    $defs(self, '$additional_atome_methods', function $$additional_atome_methods(method_name) {
      var $yield = $$additional_atome_methods.$$p || nil, self = this;

      delete $$additional_atome_methods.$$p;
      
      $send($$('Atome'), 'define_method', ["" + (method_name) + "s"], function $$2(params){var self = $$2.$$s == null ? this : $$2.$$s;

        
        
        if (params == null) params = nil;;
        return self.$additional_atomes(method_name, params);}, {$$arity: -1, $$s: self});
      $send($$('Atome'), 'define_method', ["set_" + (method_name)], function $$3(params){var proc = $$3.$$p || nil, self = $$3.$$s == null ? this : $$3.$$s;

        delete $$3.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$set_new_atome(method_name, params, proc);}, {$$arity: -1, $$s: self});
      return $send($$('Atome'), 'define_method', ["get_" + (method_name)], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

        return self.$get_new_atome(method_name)}, {$$arity: 0, $$s: self});
    }, 1);
    $defs(self, '$atome_creator', function $$atome_creator(method_name) {
      var proc = $$atome_creator.$$p || nil, self = this;

      delete $$atome_creator.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [method_name], proc.$to_proc())
      };
      $$('Utilities').$atomes(method_name);
      $send($$('Atome'), 'define_method', [method_name], function $$5(params){var user_proc = $$5.$$p || nil, self = $$5.$$s == null ? this : $$5.$$s;

        delete $$5.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$new_atome(method_name, params, user_proc);}, {$$arity: -1, $$s: self});
      $send(self, 'define_method', ["" + (method_name) + "="], function $$6(params){var user_proc = $$6.$$p || nil, self = $$6.$$s == null ? this : $$6.$$s;

        delete $$6.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$new_atome(method_name, params, user_proc);}, {$$arity: 1, $$s: self});
      return self.$additional_atome_methods(method_name);
    }, 1);
    $defs(self, '$optional_particle_methods', function $$optional_particle_methods(method_name) {
      
      
      $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_render_proc").$to_sym()], function $$7(params){
        
        
        if (params == null) params = nil;;
        return $send(params['$[]']("atome"), 'render_engine', [params['$[]']("method"), params['$[]']("value"), params['$[]']("atome")], params['$[]']("proc").$to_proc());}, 1);
      return $send($$('Genesis'), 'atome_creator_option', [(("" + (method_name)) + "_pre_render_proc").$to_sym()], function $$8(params){var particle_instance_variable = nil;

        
        
        if (params == null) params = nil;;
        particle_instance_variable = "@" + (params['$[]']("method"));
        return params['$[]']("atome").$instance_variable_set(particle_instance_variable, params['$[]']("value"));}, 1);
    }, 1);
    $defs(self, '$additional_particle_methods', function $$additional_particle_methods(method_name) {
      var $yield = $$additional_particle_methods.$$p || nil, self = this;

      delete $$additional_particle_methods.$$p;
      
      $send($$('Atome'), 'define_method', ["set_" + (method_name)], function $$9(params){var proc = $$9.$$p || nil, self = $$9.$$s == null ? this : $$9.$$s;

        delete $$9.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return $send(self, 'set_new_particle', [method_name, params], proc.$to_proc());}, {$$arity: 1, $$s: self});
      $send($$('Atome'), 'define_method', ["get_" + (method_name)], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

        return self.$get_new_particle(method_name)}, {$$arity: 0, $$s: self});
      return self.$optional_particle_methods(method_name);
    }, 1);
    return $defs(self, '$particle_creator', function $$particle_creator(method_name) {
      var proc = $$particle_creator.$$p || nil, self = this;

      delete $$particle_creator.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [method_name], proc.$to_proc())
      };
      $$('Utilities').$particles(method_name);
      $send($$('Atome'), 'define_method', [method_name], function $$11(params){var user_proc = $$11.$$p || nil, self = $$11.$$s == null ? this : $$11.$$s;

        delete $$11.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$new_particle(method_name, params, user_proc);}, {$$arity: -1, $$s: self});
      $send(self, 'define_method', ["" + (method_name) + "="], function $$12(params){var user_proc = $$12.$$p || nil, self = $$12.$$s == null ? this : $$12.$$s;

        delete $$12.$$p;
        
        ;
        
        if (params == null) params = nil;;
        return self.$new_particle(method_name, params, user_proc);}, {$$arity: 1, $$s: self});
      return self.$additional_particle_methods(method_name);
    }, 1);
  })($nesting[0], $nesting);
};

Opal.modules["atome/extensions/utilities"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $defs = Opal.defs, $truthy = Opal.truthy, $eqeq = Opal.eqeq;

  Opal.add_stubs('[]=,now,instance_variable_get,push,each,atomes,==,id');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Utilities');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.history = $hash2([], {});
    self.atomes = [];
    self.particles = [];
    self.active_atomes = [];
    $defs(self, '$history', function $$history(params) {
      var $a, self = this;

      
      
      if (params == null) params = nil;;
      return ($a = [$$('Time').$now(), params], $send(self.$instance_variable_get("@history"), '[]=', $a), $a[$a.length - 1]);
    }, -1);
    $defs(self, '$atomes', function $$atomes(atome) {
      var self = this;

      
      
      if (atome == null) atome = nil;;
      if ($truthy(atome)) {
        return self.$instance_variable_get("@atomes").$push(atome)
      } else {
        return self.$instance_variable_get("@atomes")
      };
    }, -1);
    $defs(self, '$particles', function $$particles(particle) {
      var self = this;

      
      
      if (particle == null) particle = nil;;
      if ($truthy(particle)) {
        return self.$instance_variable_get("@particles").$push(particle)
      } else {
        return self.$instance_variable_get("@particles")
      };
    }, -1);
    return $defs(self, '$grab', function $$grab(params) {
      var atome_found = nil;

      
      atome_found = nil;
      $send($$('Universe').$atomes(), 'each', [], function $$1(atome){
        
        
        if (atome == null) atome = nil;;
        if ($eqeq(atome.$id(), params)) {
          return (atome_found = atome)
        } else {
          return nil
        };}, 1);
      return atome_found;
    }, 1);
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/opal/properties/generator"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $hash2 = Opal.hash2, $gvars = Opal.gvars, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $eqeqeq = Opal.eqeqeq;

  Opal.add_stubs('is_a?,instance_exec,to_proc,send,id,append_to,DOM,atome,div,[],<<,head,green,blue,alpha,inner_html=,*,red,==,add_class,[]=,style,===,each,to_s,join,on');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'OpalRenderer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$render_html', function $$render_html(_params, _atome) {
      var proc = $$render_html.$$p || nil, self = this;

      delete $$render_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    
    $def(self, '$type_html', function $$type_html(params, atome) {
      var proc = $$type_html.$$p || nil, self = this;

      delete $$type_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return $send(self, 'send', ["" + (params) + "_html", params, atome], proc.$to_proc());
    }, 2);
    
    $def(self, '$shape_html', function $$shape_html(_params, _atome) {
      var proc = $$shape_html.$$p || nil, self = this, id_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$shape_html.$$p;
      
      ;
      id_found = self.$id();
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      $send(self, 'DOM', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

        return self.$div($hash2(["id"], {"id": id_found})).$atome()}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
      self.html_object = $gvars.document['$[]'](id_found);
      return (self.html_type = "div");
    }, 2);
    
    $def(self, '$color_html', function $$color_html(_params, _atome) {
      var proc = $$color_html.$$p || nil, self = this;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$color_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      self.html_type = "style";
      return $gvars.document.$head()['$<<'](self.$DOM("<style id='" + (self.$id()) + "'></style>"));
    }, 2);
    
    $def(self, '$red_html', function $$red_html(params, _atome) {
      var proc = $$red_html.$$p || nil, $a, self = this, green_found = nil, $ret_or_1 = nil, blue_found = nil, alpha_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$red_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      green_found = self.$green();
      green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
      blue_found = self.$blue();
      blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
      alpha_found = self.$alpha();
      alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
      return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(params, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);
    }, 2);
    
    $def(self, '$green_html', function $$green_html(params, _atome) {
      var proc = $$green_html.$$p || nil, $a, self = this, red_found = nil, $ret_or_1 = nil, blue_found = nil, alpha_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$green_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      red_found = self.$red();
      red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
      blue_found = self.$blue();
      blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
      alpha_found = self.$alpha();
      alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
      return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(params, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);
    }, 2);
    
    $def(self, '$blue_html', function $$blue_html(params, _atome) {
      var proc = $$blue_html.$$p || nil, $a, self = this, red_found = nil, $ret_or_1 = nil, green_found = nil, alpha_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$blue_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      red_found = self.$red();
      red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
      green_found = self.$green();
      green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
      alpha_found = self.$alpha();
      alpha_found = ($truthy(($ret_or_1 = alpha_found)) ? ($ret_or_1) : (0));
      return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(params, 255)) + "," + (alpha_found) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);
    }, 2);
    
    $def(self, '$alpha_html', function $$alpha_html(params, _atome) {
      var proc = $$alpha_html.$$p || nil, $a, self = this, red_found = nil, $ret_or_1 = nil, green_found = nil, blue_found = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$alpha_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      red_found = self.$red();
      red_found = ($truthy(($ret_or_1 = red_found)) ? ($ret_or_1) : (0));
      green_found = self.$green();
      green_found = ($truthy(($ret_or_1 = green_found)) ? ($ret_or_1) : (0));
      blue_found = self.$blue();
      blue_found = ($truthy(($ret_or_1 = blue_found)) ? ($ret_or_1) : (0));
      return ($a = ["\n." + (self.$id()) + "{background-color: rgba(" + ($rb_times(red_found, 255)) + "," + ($rb_times(green_found, 255)) + "," + ($rb_times(blue_found, 255)) + "," + (params) + ")}\n"], $send($gvars.document['$[]'](self.$id()), 'inner_html=', $a), $a[$a.length - 1]);
    }, 2);
    
    $def(self, '$drm_html', function $$drm_html(_params, _atome) {
      var proc = $$drm_html.$$p || nil, self = this;

      delete $$drm_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    
    $def(self, '$parent_html', function $$parent_html(params, _atome) {
      var proc = $$parent_html.$$p || nil, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;
      if ($gvars.document == null) $gvars.document = nil;

      delete $$parent_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      if ($eqeq(self.html_type, "style")) {
        return $gvars.document['$[]'](params).$add_class(self.$id())
      } else {
        return self.html_object.$append_to($gvars.document['$[]'](params))
      };
    }, 2);
    
    $def(self, '$id_html', function $$id_html(params, _atome) {
      var proc = $$id_html.$$p || nil, self = this;

      delete $$id_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    
    $def(self, '$width_html', function $$width_html(params, _atome) {
      var proc = $$width_html.$$p || nil, $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      delete $$width_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["width", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      };
    }, 2);
    
    $def(self, '$height_html', function $$height_html(params, _atome) {
      var proc = $$height_html.$$p || nil, $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      delete $$height_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["height", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      };
    }, 2);
    
    $def(self, '$left_html', function $$left_html(params, _atome) {
      var proc = $$left_html.$$p || nil, $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      delete $$left_html.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["left", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      };
    }, 2);
    
    $def(self, '$right_html', function $$right_html(params, _atome) {
      var $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["right", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      }
    }, 2);
    
    $def(self, '$top_html', function $$top_html(params, _atome) {
      var $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["top", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      }
    }, 2);
    
    $def(self, '$bottom_html', function $$bottom_html(params, _atome) {
      var $a, self = this;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["bottom", "" + (params) + "px"], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      }
    }, 2);
    
    $def(self, '$smooth_html', function $$smooth_html(params, _atome) {
      var proc = $$smooth_html.$$p || nil, $a, self = this, formated_params = nil, $ret_or_1 = nil, properties = nil;
      if (self.html_type == null) self.html_type = nil;
      if (self.html_object == null) self.html_object = nil;

      delete $$smooth_html.$$p;
      
      ;
      formated_params = ($eqeqeq($$('Array'), ($ret_or_1 = params)) ? (((properties = []), $send(params, 'each', [], function $$2(param){
        
        
        if (param == null) param = nil;;
        return properties['$<<']("" + (param) + "px");}, 1), properties.$join(" ").$to_s())) : ($eqeqeq($$('Integer'), $ret_or_1) ? ("" + (params) + "px") : (params)));
      if ($eqeq(self.html_type, "style")) {
        return nil
      } else {
        return ($a = ["border-radius", formated_params], $send(self.html_object.$style(), '[]=', $a), $a[$a.length - 1])
      };
    }, 2);
    return $def(self, '$touch_html', function $$touch_html(params, _atome) {
      var proc = $$touch_html.$$p || nil, self = this;
      if (self.html_object == null) self.html_object = nil;

      delete $$touch_html.$$p;
      
      ;
      return $send(self.html_object, 'on', ["click"], function $$3(e){var self = $$3.$$s == null ? this : $$3.$$s;

        
        
        if (e == null) e = nil;;
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          return $send(self, 'instance_exec', [], proc.$to_proc())
        } else {
          return nil
        };}, {$$arity: 1, $$s: self});
    }, 2);
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/server/properties/generator"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def;

  Opal.add_stubs('is_a?,instance_exec,to_proc,puts');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ServerRenderer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$render_sever', function $$render_sever(params) {
      var proc = $$render_sever.$$p || nil, self = this;

      delete $$render_sever.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [params], proc.$to_proc())
      };
      return self.$puts("----puts render sever render " + (params));
    }, 1)
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/headless/properties/generator"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def;

  Opal.add_stubs('is_a?,instance_exec,to_proc,send,puts');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'HeadlessRenderer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$render_headless', function $$render_headless(_params, _atome) {
      var proc = $$render_headless.$$p || nil, self = this;

      delete $$render_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    
    $def(self, '$type_headless', function $$type_headless(params, atome) {
      var proc = $$type_headless.$$p || nil, self = this;

      delete $$type_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return $send(self, 'send', ["" + (params) + "_headless", params, atome], proc.$to_proc());
    }, 2);
    
    $def(self, '$shape_headless', function $$shape_headless(_params, _atome) {
      var proc = $$shape_headless.$$p || nil, self = this;

      delete $$shape_headless.$$p;
      
      ;
      return (self.headless_object = self);
    }, 2);
    
    $def(self, '$color_headless', function $$color_headless(_params, _atome) {
      var proc = $$color_headless.$$p || nil;

      delete $$color_headless.$$p;
      
      ;
      return nil;
    }, 2);
    
    $def(self, '$id_headless', function $$id_headless(_params, _atome) {
      var proc = $$id_headless.$$p || nil, self = this;

      delete $$id_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [], proc.$to_proc())
      } else {
        return nil
      };
    }, 2);
    
    $def(self, '$left_headless', function $$left_headless(params, _atome) {
      var proc = $$left_headless.$$p || nil, self = this;

      delete $$left_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render left " + (params);
    }, 2);
    
    $def(self, '$right_headless', function $$right_headless(params, _atome) {
      var proc = $$right_headless.$$p || nil, self = this;

      delete $$right_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render right " + (params);
    }, 2);
    
    $def(self, '$top_headless', function $$top_headless(params, _atome) {
      var proc = $$top_headless.$$p || nil, self = this;

      delete $$top_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render top " + (params);
    }, 2);
    
    $def(self, '$bottom_headless', function $$bottom_headless(params, _atome) {
      var proc = $$bottom_headless.$$p || nil, self = this;

      delete $$bottom_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render bottom " + (params);
    }, 2);
    
    $def(self, '$red_headless', function $$red_headless(params, _atome) {
      var proc = $$red_headless.$$p || nil, self = this;

      delete $$red_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render red " + (params);
    }, 2);
    
    $def(self, '$green_headless', function $$green_headless(params, _atome) {
      var proc = $$green_headless.$$p || nil, self = this;

      delete $$green_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render green " + (params);
    }, 2);
    
    $def(self, '$blue_headless', function $$blue_headless(params, _atome) {
      var proc = $$blue_headless.$$p || nil, self = this;

      delete $$blue_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render blue " + (params);
    }, 2);
    
    $def(self, '$alpha_headless', function $$alpha_headless(params, _atome) {
      var proc = $$alpha_headless.$$p || nil, self = this;

      delete $$alpha_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render render " + (params);
    }, 2);
    
    $def(self, '$drm_headless', function $$drm_headless(params, _atome) {
      var proc = $$drm_headless.$$p || nil, self = this;

      delete $$drm_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render alpha " + (params);
    }, 2);
    
    $def(self, '$parent_headless', function $$parent_headless(params, _atome) {
      var proc = $$parent_headless.$$p || nil, self = this;

      delete $$parent_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render parent " + (params);
    }, 2);
    
    $def(self, '$width_headless', function $$width_headless(params, _atome) {
      var proc = $$width_headless.$$p || nil, self = this;

      delete $$width_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return "render width " + (params);
    }, 2);
    
    $def(self, '$height_headless', function $$height_headless(params, _atome) {
      var proc = $$height_headless.$$p || nil, self = this;

      delete $$height_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return self.$puts("render height " + (params));
    }, 2);
    
    $def(self, '$smooth_headless', function $$smooth_headless(params, _atome) {
      var proc = $$smooth_headless.$$p || nil, self = this;

      delete $$smooth_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return self.$puts("render smooth " + (params));
    }, 2);
    return $def(self, '$touch_headless', function $$touch_headless(params, _atome) {
      var proc = $$touch_headless.$$p || nil, self = this;

      delete $$touch_headless.$$p;
      
      ;
      if ($truthy(proc['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [], proc.$to_proc())
      };
      return self.$puts("render touch " + (params));
    }, 2);
  })($nesting[0], $nesting)
};

Opal.modules["atome/renderers/renderer"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $send = Opal.send, $def = Opal.def;

  Opal.add_stubs('render,each,send,to_proc');
  return (function($base) {
    var self = $module($base, 'Render');

    
    return $def(self, '$render_engine', function $$render_engine(property, value, atome) {
      var proc = $$render_engine.$$p || nil, self = this, renderer_found = nil;

      delete $$render_engine.$$p;
      
      ;
      renderer_found = atome.$render();
      return $send(renderer_found, 'each', [], function $$1(renderer){var self = $$1.$$s == null ? this : $$1.$$s, renderer_name = nil;

        
        
        if (renderer == null) renderer = nil;;
        renderer_name = "" + (property) + "_" + (renderer);
        return $send(self, 'send', [renderer_name, value, atome], proc.$to_proc());}, {$$arity: 1, $$s: self});
    }, 3)
  })($nesting[0])
};

Opal.modules["atome/kernel/generators/sanitizer"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $hash2 = Opal.hash2, $return_ivar = Opal.return_ivar, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('current_user,[]=,[],merge,id,length,atomes,add_missing_id,add_essential_drm,default_value,check_parent');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Sanitizer');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.default_params = $hash2(["color", "box", "shape", "drm", "shadow"], {"color": $hash2(["x", "y", "z", "red", "green", "blue", "alpha", "diffusion"], {"x": 0, "y": 0, "z": 0, "red": 0.6, "green": 0.6, "blue": 0.6, "alpha": 1, "diffusion": "linear"}), "box": $hash2(["width", "height", "x", "y", "color", "generator", "preset"], {"width": 100, "height": 100, "x": 100, "y": 100, "color": $hash2(["x", "y", "z", "red", "green", "blue", "alpha", "diffusion"], {"x": 0, "y": 0, "z": 0, "red": 0.9, "green": 0.9, "blue": 0.9, "alpha": 1, "diffusion": "linear"}), "generator": "box", "preset": "box"}), "shape": $hash2(["width", "height", "x", "y", "color", "generator"], {"width": 100, "height": 100, "x": 100, "y": 100, "color": $hash2(["x", "y", "z", "red", "green", "blue", "alpha", "diffusion"], {"x": 0, "y": 0, "z": 0, "red": 0.1, "green": 0.9, "blue": 0.9, "alpha": 1, "diffusion": "linear"}), "generator": "manual"}), "drm": $hash2(["type"], {"type": "drm"}), "shadow": $hash2([], {})});
    $defs(self, '$default_params', $return_ivar("default_params"), 0);
    
    $def(self, '$validation', function $$validation(atome_instance_var) {
      
      if ($truthy(atome_instance_var)) {
        return true
      } else {
        return nil
      }
    }, 1);
    
    $def(self, '$sanitizer', function $$sanitizer(params) {
      
      return params
    }, 1);
    
    $def(self, '$add_essential_drm', function $$add_essential_drm(params) {
      var $a, essential_drm = nil;

      
      essential_drm = $hash2(["authorisation", "atome"], {"authorisation": $hash2(["read", "write"], {"read": [$$('Atome').$current_user()], "write": [$$('Atome').$current_user()]}), "atome": $hash2(["read", "write"], {"read": ["all"], "write": ["me"]})});
      return ($a = ["drm", ($truthy(params['$[]']("drm")) ? (essential_drm.$merge(params['$[]']("drm"))) : (essential_drm))], $send(params, '[]=', $a), $a[$a.length - 1]);
    }, 1);
    
    $def(self, '$check_parent', function $$check_parent(params) {
      var self = this, parent = nil, $ret_or_1 = nil;

      
      parent = ($truthy(($ret_or_1 = self.$id())) ? ($ret_or_1) : ("user_view"));
      if (!$truthy(params['$[]']("parent"))) {
        params['$[]=']("parent", parent)
      };
      return params;
    }, 1);
    
    $def(self, '$add_missing_id', function $$add_missing_id(atome_type, params) {
      var type = nil, $ret_or_1 = nil;

      
      type = ($truthy(($ret_or_1 = params['$[]']("type"))) ? ($ret_or_1) : (atome_type));
      return "" + (type) + "_" + ($$('Universe').$atomes().$length());
    }, 2);
    return $def(self, '$add_essential_properties', function $$add_essential_properties(atome_type, params) {
      var self = this, render = nil;

      
      if (!$truthy(params['$[]']("id"))) {
        params['$[]=']("id", self.$add_missing_id(atome_type, params))
      };
      if (!$truthy(params['$[]']("drm"))) {
        params['$[]=']("drm", self.$add_essential_drm(params))
      };
      render = $$('Genesis').$default_value()['$[]']("render");
      if (!$truthy(params['$[]']("render"))) {
        params['$[]=']("render", render)
      };
      return self.$check_parent(params);
    }, 2);
  })($nesting[0], $nesting)
};

Opal.modules["atome/kernel/generators/generator"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $send = Opal.send, $return_val = Opal.return_val;

  Opal.add_stubs('atome_creator,particle_creator,atome_creator_option');
  
  $send($$('Genesis'), 'atome_creator', ["shape"], $return_val(nil), 0);
  $send($$('Genesis'), 'atome_creator', ["image"], $return_val(nil), 0);
  $$('Genesis').$atome_creator("shadow");
  $$('Genesis').$atome_creator("content");
  $$('Genesis').$atome_creator("color");
  $$('Genesis').$atome_creator("shadow");
  $send($$('Genesis'), 'particle_creator', ["id"], $return_val(nil), 0);
  $$('Genesis').$particle_creator("left");
  $$('Genesis').$particle_creator("right");
  $$('Genesis').$particle_creator("top");
  $$('Genesis').$particle_creator("bottom");
  $$('Genesis').$particle_creator("width");
  $$('Genesis').$particle_creator("height");
  $$('Genesis').$particle_creator("red");
  $$('Genesis').$particle_creator("green");
  $$('Genesis').$particle_creator("blue");
  $$('Genesis').$particle_creator("alpha");
  $$('Genesis').$particle_creator("type");
  $$('Genesis').$particle_creator("smooth");
  $$('Genesis').$particle_creator("blur");
  $$('Genesis').$particle_creator("touch");
  $send($$('Genesis'), 'atome_creator_option', ["type_pre_render_proc"], function $$1(params){
    
    
    if (params == null) params = nil;;
    return "it works and get " + (params);}, 1);
  $$('Genesis').$particle_creator("render");
  $$('Genesis').$particle_creator("drm");
  $$('Genesis').$particle_creator("parent");
  $$('Genesis').$particle_creator("date");
  return $$('Genesis').$particle_creator("location");
};

Opal.modules["atome/kernel/generators/shapes"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $hash2 = Opal.hash2, $def = Opal.def;

  Opal.add_stubs('length,atomes,merge,new');
  
  
  $def(self, '$box', function $$box(params) {
    var temp_default = nil;

    
    
    if (params == null) params = $hash2([], {});;
    temp_default = $hash2(["render", "id", "type", "width", "height", "left", "top", "color"], {"render": ["headless"], "id": "box_" + ($$('Universe').$atomes().$length()), "type": "shape", "width": 99, "height": 99, "left": 9, "top": 9, "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["headless"], "id": "color_" + ($$('Universe').$atomes().$length()), "type": "color", "red": 0.69, "green": 0.69, "blue": 0.69, "alpha": 1})});
    params = temp_default.$merge(params);
    return $$('Atome').$new(params);
  }, -1);
  return $def(self, '$circle', function $$circle(params) {
    var temp_default = nil;

    
    
    if (params == null) params = $hash2([], {});;
    temp_default = $hash2(["render", "id", "type", "width", "height", "left", "top", "color", "smooth"], {"render": ["html"], "id": "box_" + ($$('Universe').$atomes().$length()), "type": "shape", "width": 99, "height": 99, "left": 9, "top": 9, "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "color_" + ($$('Universe').$atomes().$length()), "type": "color", "red": 1, "green": 0.69, "blue": 1, "alpha": 1}), "smooth": "100%"});
    params = temp_default.$merge(params);
    return $$('Atome').$new(params);
  }, -1);
};

Opal.modules["atome/kernel/atome"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $defs = Opal.defs, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $return_ivar = Opal.return_ivar, $assign_ivar = Opal.assign_ivar, $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send;

  Opal.add_stubs('include,new,===,=~,last_match,downcase,current_machine_decision,now,geolocation,each_with_index,instance_variable_set,each,send,additional_helper,atomes_add,connected,puts');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.additional = nil;
    
    self.$include($$('Genesis'));
    self.$include($$('Sanitizer'));
    self.$include($$('ServerRenderer'));
    self.$include($$('Render'));
    self.$include($$('OpalRenderer'));
    self.$include($$('HeadlessRenderer'));
    $defs(self, '$atome', function $$atome(params) {
      
      return $$('Atome').$new(params)
    }, 1);
    $defs(self, '$current_machine_decision', function $$current_machine_decision(platform, output) {
      var $ret_or_1 = nil;

      
      if ($eqeqeq(/darwin/, ($ret_or_1 = platform))) {
        if ($truthy(output['$=~'](/en1.*?(([A-F0-9]{2}:){5}[A-F0-9]{2})/im))) {
          $$$('Regexp').$last_match(1)
        }
      } else if ($eqeqeq(/win32/, $ret_or_1)) {
        if ($truthy(output['$=~'](/Physical Address.*?(([A-F0-9]{2}-){5}[A-F0-9]{2})/im))) {
          $$$('Regexp').$last_match(1)
        }
      } else {
        "unknown platform"
      };
      return platform;
    }, 2);
    $defs(self, '$current_machine', function $$current_machine() {
      var self = this, platform = nil, output = nil;

      
      platform = $$('RUBY_PLATFORM').$downcase();
      output = ($truthy(platform['$=~'](/win32/)) ? ("ipconfig /all") : ("ifconfig"));
      return self.$current_machine_decision(platform, output);
    }, 0);
    $defs(self, '$current_user', $return_ivar("user"), 0);
    $defs(self, '$current_user=', $assign_ivar("user"), 0);
    
    $def(self, '$identity_generator', function $$identity_generator() {
      var self = this;

      return $hash2(["date", "location"], {"date": $$('Time').$now(), "location": self.$geolocation()})
    }, 0);
    
    $def(self, '$additional_helper', function $$additional_helper(params) {
      var self = this, virtual_atome = nil;

      
      virtual_atome = $$('Atome').$new($hash2([], {}));
      self.additional = virtual_atome;
      return $send(params, 'each_with_index', [], function $$1(additional, index){var new_atome = nil;

        
        
        if (additional == null) additional = nil;;
        
        if (index == null) index = nil;;
        new_atome = $$('Atome').$new($hash2([], {}));
        virtual_atome.$instance_variable_set("@virtual" + (index), new_atome);
        return $send(additional, 'each', [], function $$2(param, value){
          
          
          if (param == null) param = nil;;
          
          if (value == null) value = nil;;
          return new_atome.$send(param, value);}, 2);}, 2);
    }, 1);
    
    $def(self, '$additional', function $$additional(params) {
      var self = this;

      
      
      if (params == null) params = nil;;
      if ($truthy(params)) {
        return self.$additional_helper(params)
      } else {
        return self.additional
      };
    }, -1);
    return $def(self, '$initialize', function $$initialize(params) {
      var self = this;

      
      
      if (params == null) params = $hash2([], {});;
      $send(params, 'each', [], function $$3(atome, values){var self = $$3.$$s == null ? this : $$3.$$s;

        
        
        if (atome == null) atome = nil;;
        
        if (values == null) values = nil;;
        return self.$send(atome, values);}, {$$arity: 2, $$s: self});
      return $$('Universe').$atomes_add(self);
    }, -1);
  })($nesting[0], null, $nesting);
  $$('Universe').$connected();
  return self.$puts("atome version : " + ($$$($$('Atome'), 'VERSION')));
};

Opal.modules["atome/kernel/properties/essential"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $assign_ivar = Opal.assign_ivar, $def = Opal.def;

  Opal.add_stubs('puts,instance_variable_get,[],instance_variables,to_s,inspect');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    
    $def(self, '$identity', $assign_ivar("identity"), 0);
    
    $def(self, '$new', function $Atome_new$1(params) {
      var self = this;

      return self.$puts("add/new : " + (params))
    }, 1);
    
    $def(self, '$set', function $$set(params) {
      var self = this;

      return self.$puts("set : " + (params))
    }, 1);
    
    $def(self, '$add', function $$add(params) {
      var self = this;

      return self.$puts("add : " + (params))
    }, 1);
    
    $def(self, '$update', function $$update(params) {
      var self = this;

      return self.$puts("update : " + (params))
    }, 1);
    
    $def(self, '$replace', function $$replace(params) {
      var self = this;

      return self.$puts("replace : " + (params))
    }, 1);
    
    $def(self, '$delete', function $Atome_delete$2(params) {
      var self = this;

      return self.$puts("replace : " + (params))
    }, 1);
    
    $def(self, '$[]', function $Atome_$$$3(params) {
      var self = this;

      return self.$instance_variable_get(self.$instance_variables()['$[]'](params))
    }, 1);
    return $def(self, '$to_s', function $$to_s() {
      var self = this;

      return self.$inspect().$to_s()
    }, 0);
  })($nesting[0], null)
};

Opal.modules["atome/kernel/sparkle"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $eqeq = Opal.eqeq, $send = Opal.send, $gvars = Opal.gvars, $hash2 = Opal.hash2;
  if ($gvars.document == null) $gvars.document = nil;

  Opal.add_stubs('==,downcase,ready,new');
  if ($eqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
    return $send($gvars.document, 'ready', [], function $$1(){
      return $$('Atome').$new($hash2(["shape"], {"shape": $hash2(["render", "id", "type", "parent", "left", "right", "top", "bottom", "color"], {"render": ["html"], "id": "view", "type": "shape", "parent": "user_view", "left": 0, "right": 0, "top": 0, "bottom": 0, "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "c1", "type": "color", "red": 0.15, "green": 0.15, "blue": 0.15, "alpha": 1})})}))}, 0)
  } else {
    return $$('Atome').$new($hash2(["shape"], {"shape": $hash2(["render", "id", "type", "parent", "left", "right", "top", "bottom", "color"], {"render": ["headless"], "id": "view", "type": "shape", "parent": "user_view", "left": 0, "right": 0, "top": 0, "bottom": 0, "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["headless"], "id": "c1", "type": "color", "red": 0.15, "green": 0.15, "blue": 0.15, "alpha": 1})})}))
  }
};

Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $def = Opal.def, $neqeq = Opal.neqeq;

  Opal.add_stubs('require,!=,downcase,eval,eval_protection,send,current_user=');
  
  self.$require("fileutils");
  self.$require("atome/version");
  self.atome_client_ready = false;
  
  $def(self, '$eval_protection', function $$eval_protection() {
    var self = this;

    return Opal.Binding.$new(  function($code) {    return eval($code);  },  [],  self,  ['/Users/jeezs/codes/atome/app_builder_helpers/../lib/atome.rb', 7])
  }, 0);
  if ($neqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
    self.$eval("require 'atome/atome_native_extensions'", self.$eval_protection(), "/Users/jeezs/codes/atome/app_builder_helpers/../lib/atome.rb", 13)
  };
  self.$require("atome/kernel/universe");
  self.$require("atome/kernel/generators/genesis");
  self.$require("atome/extensions/utilities");
  self.$require("atome/renderers/opal/properties/generator");
  self.$require("atome/renderers/server/properties/generator");
  self.$require("atome/renderers/headless/properties/generator");
  self.$require("atome/renderers/renderer");
  self.$require("atome/kernel/generators/sanitizer");
  self.$require("atome/kernel/generators/generator");
  self.$require("atome/kernel/generators/shapes");
  self.$require("atome/kernel/atome");
  self.$require("atome/kernel/properties/essential");
  $$('Universe').$send("initialize");
  $$('Atome')['$current_user=']("jeezs");
  return self.$require("atome/kernel/sparkle");
});
