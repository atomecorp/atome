Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, b = nil, c = nil, a = nil;

  Opal.add_stubs('box,height,left,smooth,touch,color,length,atomes,top,particle_creator,rotate,puts,generate_headless_renderer,class,is_a?,instance_exec,to_proc,generate_html_renderer,new,drag,shape');
  
  b = self.$box($hash2(["width", "left", "id"], {"width": 333, "left": 666, "id": "poil"}));
  b.$height(33);
  b.$left(333);
  b.$smooth([33, 2, 90]);
  $send(b, 'touch', [true], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self.$color($hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "color_" + ($$('Universe').$atomes().$length()), "type": "color", "red": 1, "green": 0.33, "blue": 0.22, "alpha": 1}))}, {$$arity: 0, $$s: self});
  c = b.$box($hash2(["left"], {"left": 333}));
  b.$top(99);
  $send($$('Genesis'), 'particle_creator', ["rotate"], function $$2(params, atome){var proc = $$2.$$p || nil;

    delete $$2.$$p;
    
    ;
    
    if (params == null) params = nil;;
    
    if (atome == null) atome = nil;;
    return nil;}, 2);
  $send(b, 'rotate', [999], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

    return self.$puts("poilu")}, {$$arity: 0, $$s: self});
  $$('Genesis').$particle_creator("drag");
  $send($$('Genesis'), 'generate_headless_renderer', ["drag"], function $$5(value, atome, user_proc){var self = $$5.$$s == null ? this : $$5.$$s;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (user_proc == null) user_proc = nil;;
    self.$puts("msg from headless drag method: value is " + (value) + " , atome class is " + (atome.$class()));
    if ($truthy(user_proc['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [], user_proc.$to_proc())
    } else {
      return nil
    };}, {$$arity: 3, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["drag"], function $$6(value, atome, user_proc){var self = $$6.$$s == null ? this : $$6.$$s;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (user_proc == null) user_proc = nil;;
    self.$puts("msg from html drag method: value is " + (value) + " , atome class is " + (atome.$class()));
    if ($truthy(user_proc['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', [], user_proc.$to_proc())
    } else {
      return nil
    };}, {$$arity: 3, $$s: self});
  a = $$('Atome').$new($hash2(["shape"], {"shape": $hash2(["render", "id", "type", "parent", "left", "right", "width", "height", "color"], {"render": ["html"], "id": "crasher", "type": "shape", "parent": "view", "left": 99, "right": 99, "width": 99, "height": 99, "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "c315", "type": "color", "red": 1, "green": 0.15, "blue": 0.15, "alpha": 0.6})})}));
  return $send(a.$shape(), 'drag', [11199], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

    return self.$puts("poilu_du_drag")}, {$$arity: 0, $$s: self});
});
