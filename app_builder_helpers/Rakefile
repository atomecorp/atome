# frozen_string_literal: true

require 'opal'
require 'opal-jquery'
require 'opal-browser'
require 'parser'
require 'uglifier'

Opal.append_path 'app'

def build_opal_browser(user_project_path)
  browser_js = "#{user_project_path}/build/js/opal/opal_browser.js"
  browser_content= Opal::Builder.build('../lib/atome/renderers/opal/opal_browser.rb').to_s
  browser_content.gsub!("$$$('STDERR')['$write_proc='](typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)});","$$$('STDERR')['$write_proc='](typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){});")
  uglified = Uglifier.new.compile(browser_content)
  File.open(browser_js, 'w') do |f|
    f.puts uglified
  end
end

def build_atome_kernel(user_project_path, gem_location)
  kernel_js = "#{user_project_path}/build/js/atome/kernel.js"
  builder = Opal::Builder.new
  builder.append_paths("#{gem_location}/../lib/")
  kernel_content=builder.build("#{gem_location}/../lib/atome.rb").to_s
  uglified = Uglifier.new.compile(kernel_content)
  File.open(kernel_js, 'w') do |f|
    f.puts uglified
  end
end

def build_opal_parser(user_project_path)
  parser_js = "#{user_project_path}/build/js/opal/opal_parser.js"
  parser_content = Opal::Builder.build('../lib/atome/renderers/opal/opal_parser.rb').to_s
  uglified = Uglifier.new.compile(parser_content)
  File.open(parser_js, 'w') do |f|
    f.puts uglified
  end
end

def build_user_code(user_project_path)
  application_js = "#{user_project_path}/build/js/application.js"
  application_content= Opal::Builder.build('../vendor/assets/index.rb').to_s
  uglified = Uglifier.new.compile(application_content)
  File.open(application_js, 'w') do |f|
    f.puts uglified
  end
end

task :system_builder do
  user_project_path = ARGV[1]
  gem_location = File.join(File.dirname(__FILE__))
  build_atome_kernel(user_project_path, gem_location)
  build_opal_browser(user_project_path)
  build_opal_parser(user_project_path)
  build_user_code(user_project_path)
end

task :build do
  puts 'nothing for now'
end

task default: :build
