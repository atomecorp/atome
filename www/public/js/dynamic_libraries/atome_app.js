/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $klass = Opal.klass, $send = Opal.send, a = nil;

  Opal.add_stubs(['$new', '$lorem', '$color', '$each', '$instance_variables', '$alert', '$sub', '$instance_variable_get', '$properties']);
  
  a = $$($nesting, 'Atome').$new($hash2(["atome_id", "preset", "id", "type", "color", "content", "x", "y", "width", "height"], {"atome_id": "atomic_verify", "preset": "box", "id": "verify", "type": "shape", "color": ["pink", "red", "yellow"], "content": [self.$lorem(), "hello_world"], "x": 20, "y": 20, "width": 100, "height": 100}));
  a.$color($hash2(["value", "add"], {"value": "orange", "add": true}));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $Atome_properties$1;

    return (Opal.def(self, '$properties', $Atome_properties$1 = function $$properties() {
      var $$2, self = this;

      return $send(self.$instance_variables(), 'each', [], ($$2 = function(property){var self = $$2.$$s || this;

      
        
        if (property == null) {
          property = nil;
        };
        return self.$alert("" + (property.$sub("@", "")) + " : " + (self.$instance_variable_get(property)));}, $$2.$$s = self, $$2.$$arity = 1, $$2))
    }, $Atome_properties$1.$$arity = 0), nil) && 'properties'
  })($nesting[0], null, $nesting);
  return a.$properties();
})(Opal);
