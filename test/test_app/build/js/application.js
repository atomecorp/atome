Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2, $def = Opal.def, $truthy = Opal.truthy, $klass = Opal.klass, $gvars = Opal.gvars, text = nil, my_video = nil, my_video2 = nil, my_video3 = nil;

  Opal.add_stubs('new,to_proc,atomes_add,instance_variable_set,each,send,is_a?,instance_exec,add_essential_properties,sanitizer,set_new_atome,get_new_atome,[]=,validation,run_optional_methods_helper,to_sym,create_new_atomes,[],current_user,app_identity,length,atomes,atome_creator_option,box,puts,text,grab,video,particle_creator,atome_creator,default_params,instance_of?,id,merge,generate_html_renderer,append_to,DOM,atome,play,html_object,bloc,on,currentTime,type,pause,currentTime=,top,left,touch,alert,time,wait');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Genesis');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$create_new_atomes', function $$create_new_atomes(params, instance_var, _atome) {
      var userproc = $$create_new_atomes.$$p || nil, self = this, new_atome = nil;

      delete $$create_new_atomes.$$p;
      
      ;
      new_atome = $send($$('Atome'), 'new', [$hash2([], {})], userproc.$to_proc());
      $$('Universe').$atomes_add(new_atome);
      self.$instance_variable_set(instance_var, new_atome);
      $send(params, 'each', [], function $$1(param, value){
        
        
        if (param == null) param = nil;;
        
        if (value == null) value = nil;;
        return new_atome.$send(param, value);}, 2);
      return new_atome;
    }, 3);
    
    $def(self, '$new_atome', function $$new_atome(atome, params, userproc) {
      var methodproc = $$new_atome.$$p || nil, self = this;

      delete $$new_atome.$$p;
      
      ;
      if ($truthy(params)) {
        
        if ($truthy(methodproc['$is_a?']($$('Proc')))) {
          params = $send(self, 'instance_exec', [params], methodproc.$to_proc())
        };
        params = self.$add_essential_properties(atome, params);
        params = self.$sanitizer(params);
        return self.$set_new_atome(atome, params, userproc);
      } else {
        return self.$get_new_atome(atome)
      };
    }, 3);
    return $def(self, '$set_new_atome', function $$set_new_atome(atome, params, userproc) {
      var self = this, instance_var = nil, new_atome = nil;

      
      params['$[]=']("bloc", userproc);
      if (!$truthy(self.$validation(atome))) {
        return false
      };
      instance_var = "@" + (atome);
      params = $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_pre_save_proc").$to_sym(), $hash2(["value", "proc"], {"value": params, "proc": userproc}));
      new_atome = $send(self, 'create_new_atomes', [params['$[]']("value"), instance_var, atome], userproc.$to_proc());
      $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_post_save_proc").$to_sym(), $hash2(["value", "proc"], {"value": params, "proc": userproc}));
      self.dna = "" + ($$('Atome').$current_user()) + "_" + ($$('Universe').$app_identity()) + "_" + ($$('Universe').$atomes().$length());
      return new_atome;
    }, 3);
  })($nesting[0], $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    return $def(self, '$initialize', function $$initialize(params) {
      var bloc = $$initialize.$$p || nil, self = this;

      delete $$initialize.$$p;
      
      ;
      
      if (params == null) params = $hash2([], {});;
      self.render = [];
      self.child = [];
      return $send(params, 'each', [], function $$2(atome, values){var self = $$2.$$s == null ? this : $$2.$$s, new_atome = nil;

        
        
        if (atome == null) atome = nil;;
        
        if (values == null) values = nil;;
        return (new_atome = $send(self, 'send', [atome, values], bloc.$to_proc()));}, {$$arity: 2, $$s: self});
    }, -1)
  })($nesting[0], null);
  $send($$('Genesis'), 'atome_creator_option', ["shape_pre_save_proc"], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, bloc_found = nil;

    
    
    if (params == null) params = nil;;
    bloc_found = params['$[]']("value")['$[]']("bloc");
    if ($truthy(bloc_found['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [params], bloc_found.$to_proc())
    };
    return params;}, {$$arity: 1, $$s: self});
  $send($$('Genesis'), 'atome_creator_option', ["text_pre_save_proc"], function $$4(params){var self = $$4.$$s == null ? this : $$4.$$s, bloc_found = nil;

    
    
    if (params == null) params = nil;;
    bloc_found = params['$[]']("value")['$[]']("bloc");
    if ($truthy(bloc_found['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [params], bloc_found.$to_proc())
    };
    return params;}, {$$arity: 1, $$s: self});
  $send(self, 'box', [$hash2(["id"], {"id": "my_box"})], function $$5(p){var self = $$5.$$s == null ? this : $$5.$$s;

    
    
    if (p == null) p = nil;;
    return self.$puts("ok_cest_ok_box");}, {$$arity: 1, $$s: self});
  $send($$('Atome'), 'new', [$hash2(["shape"], {"shape": $hash2(["render", "id", "type", "parent", "left", "width", "top", "height", "overflow", "color"], {"render": ["html"], "id": "view_test", "type": "shape", "parent": ["view"], "left": 0, "width": 90, "top": 0, "height": 90, "overflow": "auto", "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "view_test_color", "type": "color", "red": 1, "green": 0.15, "blue": 0.15, "alpha": 1})})})], function $$6(p){var self = $$6.$$s == null ? this : $$6.$$s;

    
    
    if (p == null) p = nil;;
    return self.$puts("ok_cest_pout atomic box");}, {$$arity: 1, $$s: self});
  
  $def(self, '$text', function $$text(params) {
    var bloc = $$text.$$p || nil;

    delete $$text.$$p;
    
    ;
    
    if (params == null) params = $hash2([], {});;
    return $send($$('Utilities').$grab("view"), 'text', [params], bloc.$to_proc());
  }, -1);
  $send(self, 'text', [$hash2(["id"], {"id": "my_text"})], function $$7(p){var self = $$7.$$s == null ? this : $$7.$$s;

    
    
    if (p == null) p = nil;;
    return self.$puts("ok_cest_ok_text");}, {$$arity: 1, $$s: self});
  text = $send($$('Atome'), 'new', [$hash2(["text"], {"text": $hash2(["render", "id", "type", "parent", "visual", "data", "left", "top", "width", "height"], {"render": ["html"], "id": "text1", "type": "text", "parent": ["view"], "visual": $hash2(["size"], {"size": 33}), "data": "My text!", "left": 300, "top": 33, "width": 199, "height": 33})})], function $$8(p){var self = $$8.$$s == null ? this : $$8.$$s;

    
    
    if (p == null) p = nil;;
    return self.$puts("ok_cest_ok_text_atomic");}, {$$arity: 1, $$s: self});
  
  $def(self, '$video', function $$video(params) {
    var bloc = $$video.$$p || nil;

    delete $$video.$$p;
    
    ;
    
    if (params == null) params = $hash2([], {});;
    return $send($$('Utilities').$grab("view"), 'video', [params], bloc.$to_proc());
  }, -1);
  $$('Genesis').$particle_creator("play");
  $send($$('Genesis'), 'atome_creator', ["video"], function $$9(params){var proc = $$9.$$p || nil, self = $$9.$$s == null ? this : $$9.$$s, default_renderer = nil, generated_id = nil, $ret_or_1 = nil, generated_render = nil, generated_parent = nil, default_params = nil;

    delete $$9.$$p;
    
    ;
    
    if (params == null) params = nil;;
    if ($truthy(params)) {
      
      default_renderer = $$('Sanitizer').$default_params()['$[]']("render");
      generated_id = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : ("video_" + ($$('Universe').$atomes().$length())));
      if (!$truthy(params['$[]']("render")['$instance_of?']($$('Hash')))) {
        generated_render = ($truthy(($ret_or_1 = params['$[]']("render"))) ? ($ret_or_1) : (default_renderer))
      };
      generated_parent = ($truthy(($ret_or_1 = params['$[]']("parent"))) ? ($ret_or_1) : (self.$id()));
      default_params = $hash2(["render", "id", "type", "parent", "path", "left", "top", "width", "height"], {"render": [generated_render], "id": generated_id, "type": "video", "parent": [generated_parent], "path": "./medias/videos/video_missing.mp4", "left": 139, "top": 333, "width": 199, "height": 199});
      params = default_params.$merge(params);
    };
    return params;}, {$$arity: 1, $$s: self});
  $send($$('Genesis'), 'generate_html_renderer', ["video"], function $$11(value, atome, proc){var self = $$11.$$s == null ? this : $$11.$$s, id_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    id_found = self.$id();
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    $send(self, 'DOM', [], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s;

      return self.$video($hash2(["id", "autoplay"], {"id": id_found, "autoplay": false})).$atome()}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
    self.html_object = $gvars.document['$[]'](id_found);
    return (self.html_type = "video");}, {$$arity: 3, $$s: self});
  
  $def(self, '$play_video', function $$play_video(params) {
    var proc = $$play_video.$$p || nil, self = this, video_callback = nil, play_callback = nil;

    delete $$play_video.$$p;
    
    ;
    params['$[]']("atome").$html_object().$play();
    video_callback = params['$[]']("atome").$bloc();
    play_callback = params['$[]']("proc");
    return $send(params['$[]']("atome").$html_object(), 'on', ["timeupdate"], function $$13(e){var self = $$13.$$s == null ? this : $$13.$$s;

      
      
      if (e == null) e = nil;;
      if ($truthy(video_callback['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [params['$[]']("atome").$html_object().$currentTime()], video_callback.$to_proc())
      };
      if ($truthy(play_callback['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [params['$[]']("atome").$html_object().$currentTime()], play_callback.$to_proc())
      } else {
        return nil
      };}, {$$arity: 1, $$s: self});
  }, 1);
  $send($$('Genesis'), 'atome_creator_option', ["play_pre_render_proc"], function $$14(params){
    
    
    if (params == null) params = nil;;
    return params['$[]']("atome").$send("play_" + (params['$[]']("atome").$type()), params);}, 1);
  $$('Genesis').$particle_creator("pause");
  
  $def(self, '$pause_video', function $$pause_video(params) {
    var proc = $$pause_video.$$p || nil, exec_found = nil;

    delete $$pause_video.$$p;
    
    ;
    params['$[]']("atome").$html_object().$pause();
    return (exec_found = params['$[]']("proc"));
  }, 1);
  $send($$('Genesis'), 'atome_creator_option', ["pause_pre_render_proc"], function $$15(params){var self = $$15.$$s == null ? this : $$15.$$s, proc_found = nil;

    
    
    if (params == null) params = nil;;
    params['$[]']("atome").$send("pause_" + (params['$[]']("atome").$type()), params);
    proc_found = params['$[]']("proc");
    if ($truthy(proc_found['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', ["::call back from pause render"], proc_found.$to_proc())
    } else {
      return nil
    };}, {$$arity: 1, $$s: self});
  $$('Genesis').$particle_creator("time");
  $send($$('Genesis'), 'generate_html_renderer', ["time"], function $$16(value, atome, proc){var $a, self = $$16.$$s == null ? this : $$16.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return ($a = [value], $send(self.html_object, 'currentTime=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  my_video = $send($$('Atome'), 'new', [$hash2(["video"], {"video": $hash2(["render", "id", "type", "left", "top", "parent", "path", "width", "height"], {"render": ["html"], "id": "video1", "type": "video", "left": 333, "top": 333, "parent": ["view"], "path": "./medias/videos/superman.mp4", "width": 199, "height": 99})})], function $$17(params){var self = $$17.$$s == null ? this : $$17.$$s;

    
    
    if (params == null) params = nil;;
    return self.$puts("video callback time is  " + (params) + "###");}, {$$arity: 1, $$s: self});
  my_video.$video().$top(33);
  my_video.$video().$left(33);
  $send(my_video.$video(), 'touch', [true], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;

    return $send(my_video.$video(), 'play', [true], function $$19(currentTime){var self = $$19.$$s == null ? this : $$19.$$s;

      
      
      if (currentTime == null) currentTime = nil;;
      return self.$puts("play callback time is : " + (currentTime) + "!!!");}, {$$arity: 1, $$s: self})}, {$$arity: 0, $$s: self});
  my_video2 = $send($$('Atome'), 'new', [$hash2(["video"], {"video": $hash2(["render", "id", "type", "left", "top", "parent", "path", "width", "height"], {"render": ["html"], "id": "video9", "type": "video", "left": 333, "top": 333, "parent": ["view"], "path": "./medias/videos/madmax.mp4", "width": 199, "height": 99})})], function $$20(params){var self = $$20.$$s == null ? this : $$20.$$s;

    
    
    if (params == null) params = nil;;
    return self.$puts("video callback time is  " + (params) + "###");}, {$$arity: 1, $$s: self});
  my_video2.$video().$top(33);
  my_video2.$video().$left(333);
  $send(my_video2.$video(), 'touch', [true], function $$21(){var self = $$21.$$s == null ? this : $$21.$$s;

    return $send(my_video2.$video(), 'play', [true], function $$22(currentTime){var self = $$22.$$s == null ? this : $$22.$$s;

      
      
      if (currentTime == null) currentTime = nil;;
      return self.$puts("play callback time is : " + (currentTime) + "!!!");}, {$$arity: 1, $$s: self})}, {$$arity: 0, $$s: self});
  my_video3 = $send(self, 'video', [$hash2(["path", "id"], {"path": "./medias/videos/avengers.mp4", "id": "video16"})], function $$23(params){var self = $$23.$$s == null ? this : $$23.$$s;

    
    
    if (params == null) params = nil;;
    return self.$puts("video callback here " + (params));}, {$$arity: 1, $$s: self});
  $send(self.$grab("video16"), 'on', ["pause"], function $$24(event){var self = $$24.$$s == null ? this : $$24.$$s;

    
    
    if (event == null) event = nil;;
    return self.$alert("supercool");}, {$$arity: 1, $$s: self});
  return $send(my_video3, 'touch', [true], function $$25(){var self = $$25.$$s == null ? this : $$25.$$s;

    
    self.$grab("video16").$time(15);
    $send(my_video3, 'play', [true], function $$26(currentTime){var self = $$26.$$s == null ? this : $$26.$$s;

      
      
      if (currentTime == null) currentTime = nil;;
      return self.$puts("play callback time is : " + (currentTime) + "!!!");}, {$$arity: 1, $$s: self});
    return $send(self, 'wait', [3], function $$27(){var self = $$27.$$s == null ? this : $$27.$$s;

      return $send(self.$grab("video16"), 'pause', [true], function $$28(p){var self = $$28.$$s == null ? this : $$28.$$s;

        
        
        if (p == null) p = nil;;
        return self.$alert("paused");}, {$$arity: 1, $$s: self})}, {$$arity: 0, $$s: self});}, {$$arity: 0, $$s: self});
});
