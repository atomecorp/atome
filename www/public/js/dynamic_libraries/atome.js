/* Generated by Opal 1.0.5 */
Opal.modules["extensions/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]', '$sort_by', '$index', '$length']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_sort_by_array$1;

    return (Opal.def(self, '$sort_by_array', $Hash_sort_by_array$1 = function $$sort_by_array(a) {
      var $$2, self = this;

      return $$($nesting, 'Hash')['$[]']($send(self, 'sort_by', [], ($$2 = function(k, _){var self = $$2.$$s || this, $a;

      
        
        if (k == null) {
          k = nil;
        };
        
        if (_ == null) {
          _ = nil;
        };
        return ($truthy($a = a.$index(k)) ? $a : self.$length());}, $$2.$$s = self, $$2.$$arity = 2, $$2)))
    }, $Hash_sort_by_array$1.$$arity = 1), nil) && 'sort_by_array'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/interpreter/opal/add_on"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$<<', '$[]', '$each']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'JSUtils');

    var $nesting = [self].concat($parent_nesting), $JSUtils_initialize$1, $JSUtils_device$2, $JSUtils_document$3, $JSUtils_add_interval$4, $JSUtils_clear_interval$5, $JSUtils_clear_intervals$6, $JSUtils_add_timeout$8, $JSUtils_clear_timeout$9, $JSUtils_clear_timeouts$10, $JSUtils_verification$12;

    
    
    Opal.def(self, '$initialize', $JSUtils_initialize$1 = function $$initialize() {
      var self = this;

      return (self.codemirror = [])
    }, $JSUtils_initialize$1.$$arity = 0);
    
    Opal.def(self, '$device', $JSUtils_device$2 = function $$device() {
      var self = this;

      return window;
    }, $JSUtils_device$2.$$arity = 0);
    
    Opal.def(self, '$document', $JSUtils_document$3 = function $$document() {
      var self = this;

      return $(document);
    }, $JSUtils_document$3.$$arity = 0);
    
    Opal.def(self, '$add_interval', $JSUtils_add_interval$4 = function $$add_interval(interval) {
      var self = this;
      if (self.project_intervals == null) self.project_intervals = nil;

      return self.project_intervals['$<<'](interval)
    }, $JSUtils_add_interval$4.$$arity = 1);
    
    Opal.def(self, '$clear_interval', $JSUtils_clear_interval$5 = function $$clear_interval(params) {
      var self = this;

      return clearInterval(params['$[]'](1))
    }, $JSUtils_clear_interval$5.$$arity = 1);
    
    Opal.def(self, '$clear_intervals', $JSUtils_clear_intervals$6 = function $$clear_intervals() {
      var $$7, self = this;
      if (self.project_intervals == null) self.project_intervals = nil;

      
      $send(self.project_intervals, 'each', [], ($$7 = function(interval){var self = $$7.$$s || this;

      
        
        if (interval == null) {
          interval = nil;
        };
        return  clearInterval(interval);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      return (self.project_intervals = []);
    }, $JSUtils_clear_intervals$6.$$arity = 0);
    
    Opal.def(self, '$add_timeout', $JSUtils_add_timeout$8 = function $$add_timeout(timeout) {
      var self = this;
      if (self.project_timeouts == null) self.project_timeouts = nil;

      return self.project_timeouts['$<<'](timeout)
    }, $JSUtils_add_timeout$8.$$arity = 1);
    
    Opal.def(self, '$clear_timeout', $JSUtils_clear_timeout$9 = function $$clear_timeout(params) {
      var self = this;

      return clearTimeout(params['$[]'](1))
    }, $JSUtils_clear_timeout$9.$$arity = 1);
    
    Opal.def(self, '$clear_timeouts', $JSUtils_clear_timeouts$10 = function $$clear_timeouts() {
      var $$11, self = this;
      if (self.project_timeouts == null) self.project_timeouts = nil;

      
      $send(self.project_timeouts, 'each', [], ($$11 = function(timeout){var self = $$11.$$s || this;

      
        
        if (timeout == null) {
          timeout = nil;
        };
        return clearTimeout(timeout);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
      return (self.project_timeouts = []);
    }, $JSUtils_clear_timeouts$10.$$arity = 0);
    
    Opal.def(self, '$verification', $JSUtils_verification$12 = function $$verification($a) {
      var $post_args, params, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      params = $post_args;;
      return atome.jsVerification(params);
    }, $JSUtils_verification$12.$$arity = -1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/audio"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlAudio');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/communication"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlCommunication');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/effect"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlEffect');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlEvent');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/geometry"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlGeometry');

    var $nesting = [self].concat($parent_nesting), $HtmlGeometry_width_html$1, $HtmlGeometry_height_html$2;

    
    
    Opal.def(self, '$width_html', $HtmlGeometry_width_html$1 = function $$width_html(value) {
      var self = this;

      return value
    }, $HtmlGeometry_width_html$1.$$arity = 1);
    
    Opal.def(self, '$height_html', $HtmlGeometry_height_html$2 = function $$height_html(value) {
      var self = this;

      return value
    }, $HtmlGeometry_height_html$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/helper"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlHelper');

    var $nesting = [self].concat($parent_nesting), $HtmlHelper_tactile_html$1;

    
    Opal.def(self, '$tactile_html', $HtmlHelper_tactile_html$1 = function $$tactile_html(value) {
      var self = this;

      return value
    }, $HtmlHelper_tactile_html$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/hierarchy"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlHierarchy');

    var $nesting = [self].concat($parent_nesting), $HtmlHierarchy_parent_html$1;

    
    Opal.def(self, '$parent_html', $HtmlHierarchy_parent_html$1 = function $$parent_html(value) {
      var self = this;

      return value
    }, $HtmlHierarchy_parent_html$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/identity"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlIdentity');

    var $nesting = [self].concat($parent_nesting), $HtmlIdentity_atome_id_html$1, $HtmlIdentity_id_html$2, $HtmlIdentity_type_html$3;

    
    
    Opal.def(self, '$atome_id_html', $HtmlIdentity_atome_id_html$1 = function $$atome_id_html(value) {
      var self = this;

      return value
    }, $HtmlIdentity_atome_id_html$1.$$arity = 1);
    
    Opal.def(self, '$id_html', $HtmlIdentity_id_html$2 = function $$id_html(value) {
      var self = this;

      return value
    }, $HtmlIdentity_id_html$2.$$arity = 1);
    
    Opal.def(self, '$type_html', $HtmlIdentity_type_html$3 = function $$type_html(value) {
      var self = this;

      return value
    }, $HtmlIdentity_type_html$3.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/media"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlMedia');

    var $nesting = [self].concat($parent_nesting), $HtmlMedia_content_html$1;

    
    Opal.def(self, '$content_html', $HtmlMedia_content_html$1 = function $$content_html(value) {
      var self = this;

      return value
    }, $HtmlMedia_content_html$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/spatial"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlSpatial');

    var $nesting = [self].concat($parent_nesting), $HtmlSpatial_x_html$1, $HtmlSpatial_xx_html$2, $HtmlSpatial_y_html$3, $HtmlSpatial_yy_html$4, $HtmlSpatial_z_html$5;

    
    
    Opal.def(self, '$x_html', $HtmlSpatial_x_html$1 = function $$x_html(value) {
      var self = this;

      return value
    }, $HtmlSpatial_x_html$1.$$arity = 1);
    
    Opal.def(self, '$xx_html', $HtmlSpatial_xx_html$2 = function $$xx_html(value) {
      var self = this;

      return value
    }, $HtmlSpatial_xx_html$2.$$arity = 1);
    
    Opal.def(self, '$y_html', $HtmlSpatial_y_html$3 = function $$y_html(value) {
      var self = this;

      return value
    }, $HtmlSpatial_y_html$3.$$arity = 1);
    
    Opal.def(self, '$yy_html', $HtmlSpatial_yy_html$4 = function $$yy_html(value) {
      var self = this;

      return value
    }, $HtmlSpatial_yy_html$4.$$arity = 1);
    
    Opal.def(self, '$z_html', $HtmlSpatial_z_html$5 = function $$z_html(value) {
      var self = this;

      return value
    }, $HtmlSpatial_z_html$5.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/utility"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlUtility');

    var $nesting = [self].concat($parent_nesting), $HtmlUtility_language_html$1, $HtmlUtility_preset_html$2;

    
    
    Opal.def(self, '$language_html', $HtmlUtility_language_html$1 = function $$language_html(value) {
      var self = this;

      return value
    }, $HtmlUtility_language_html$1.$$arity = 1);
    
    Opal.def(self, '$preset_html', $HtmlUtility_preset_html$2 = function $$preset_html(value) {
      var self = this;

      return value
    }, $HtmlUtility_preset_html$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html/visual"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HtmlVisual');

    var $nesting = [self].concat($parent_nesting), $HtmlVisual_color_html$1, $HtmlVisual_opacity_html$2, $HtmlVisual_border_html$3, $HtmlVisual_overflow_html$4, $HtmlVisual_shadow_html$5;

    
    
    Opal.def(self, '$color_html', $HtmlVisual_color_html$1 = function $$color_html(value) {
      var self = this;

      return value
    }, $HtmlVisual_color_html$1.$$arity = 1);
    
    Opal.def(self, '$opacity_html', $HtmlVisual_opacity_html$2 = function $$opacity_html(value) {
      var self = this;

      return value
    }, $HtmlVisual_opacity_html$2.$$arity = 1);
    
    Opal.def(self, '$border_html', $HtmlVisual_border_html$3 = function $$border_html(value) {
      var self = this;

      return value
    }, $HtmlVisual_border_html$3.$$arity = 1);
    
    Opal.def(self, '$overflow_html', $HtmlVisual_overflow_html$4 = function $$overflow_html(value) {
      var self = this;

      return value
    }, $HtmlVisual_overflow_html$4.$$arity = 1);
    
    Opal.def(self, '$shadow_html', $HtmlVisual_shadow_html$5 = function $$shadow_html(value) {
      var self = this;

      return value
    }, $HtmlVisual_shadow_html$5.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/renderers/html"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$include', '$find', '$+', '$[]']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'RenderHtml');

    var $nesting = [self].concat($parent_nesting), $RenderHtml_jq_get$1;

    
    self.$include($$($nesting, 'HtmlAudio'));
    self.$include($$($nesting, 'HtmlCommunication'));
    self.$include($$($nesting, 'HtmlEffect'));
    self.$include($$($nesting, 'HtmlEvent'));
    self.$include($$($nesting, 'HtmlGeometry'));
    self.$include($$($nesting, 'HtmlHelper'));
    self.$include($$($nesting, 'HtmlHierarchy'));
    self.$include($$($nesting, 'HtmlIdentity'));
    self.$include($$($nesting, 'HtmlMedia'));
    self.$include($$($nesting, 'HtmlSpatial'));
    self.$include($$($nesting, 'HtmlUtility'));
    self.$include($$($nesting, 'HtmlVisual'));
    self.$include($$($nesting, 'JSUtils'));
    Opal.defs(self, '$jq_get', $RenderHtml_jq_get$1 = function $$jq_get(atome_id) {
      var self = this;

      return $$($nesting, 'Element').$find($rb_plus("#", atome_id['$[]']("value")))
    }, $RenderHtml_jq_get$1.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/audio"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'AudiosProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/communication"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'CommunicationsProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/effect"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'EffectsProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'EventsProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/geometry"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'GeometriesProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/helper"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HelpersProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/hierarchy"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HierarchiesProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/identity"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'IdentitiesProperties');

    var $nesting = [self].concat($parent_nesting), $IdentitiesProperties_atome_id$eq$1, $IdentitiesProperties_atome_id$2, $IdentitiesProperties_id$eq$3, $IdentitiesProperties_id$4;

    
    
    Opal.def(self, '$atome_id=', $IdentitiesProperties_atome_id$eq$1 = function(value) {
      var self = this;

      return (self.atome_id = value)
    }, $IdentitiesProperties_atome_id$eq$1.$$arity = 1);
    
    Opal.def(self, '$atome_id', $IdentitiesProperties_atome_id$2 = function $$atome_id() {
      var self = this;
      if (self.atome_id == null) self.atome_id = nil;

      return self.atome_id
    }, $IdentitiesProperties_atome_id$2.$$arity = 0);
    
    Opal.def(self, '$id=', $IdentitiesProperties_id$eq$3 = function(value) {
      var self = this;

      return (self.id = value)
    }, $IdentitiesProperties_id$eq$3.$$arity = 1);
    
    Opal.def(self, '$id', $IdentitiesProperties_id$4 = function $$id() {
      var self = this;
      if (self.id == null) self.id = nil;

      return self.id
    }, $IdentitiesProperties_id$4.$$arity = 0);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/media"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'MediasProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/spatial"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'SpatialsProperties');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/utility"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'UtilitiesProperties');

    var $nesting = [self].concat($parent_nesting), $UtilitiesProperties_delete_processor$1, $UtilitiesProperties_render$2;

    
    
    Opal.def(self, '$delete_processor', $UtilitiesProperties_delete_processor$1 = function $$delete_processor(value) {
      var self = this;

      return value
    }, $UtilitiesProperties_delete_processor$1.$$arity = 1);
    Opal.defs(self, '$render', $UtilitiesProperties_render$2 = function $$render(value) {
      var self = this;

      return value
    }, $UtilitiesProperties_render$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/visual"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$color_processor', '$color_html', '$border_html', '$overflow_html', '$opacity_html', '$shadow_html']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'VisualsProperties');

    var $nesting = [self].concat($parent_nesting), $VisualsProperties_color$eq$1, $VisualsProperties_color$2, $VisualsProperties_border$eq$3, $VisualsProperties_border$4, $VisualsProperties_overflow$eq$5, $VisualsProperties_overflow$6, $VisualsProperties_opacity$eq$7, $VisualsProperties_opacity$8, $VisualsProperties_shadow$eq$9, $VisualsProperties_shadow$10;

    
    
    Opal.def(self, '$color=', $VisualsProperties_color$eq$1 = function(value) {
      var self = this;

      
      
      if (value == null) {
        value = nil;
      };
      value = self.$color_processor(value);
      self.$color_html(value);
      return (self.color = value);
    }, $VisualsProperties_color$eq$1.$$arity = -1);
    
    Opal.def(self, '$color', $VisualsProperties_color$2 = function $$color() {
      var self = this;
      if (self.color == null) self.color = nil;

      return self.color
    }, $VisualsProperties_color$2.$$arity = 0);
    
    Opal.def(self, '$border=', $VisualsProperties_border$eq$3 = function(value) {
      var self = this;

      
      
      if (value == null) {
        value = nil;
      };
      self.$border_html(value);
      return (self.border = value);
    }, $VisualsProperties_border$eq$3.$$arity = -1);
    
    Opal.def(self, '$border', $VisualsProperties_border$4 = function $$border() {
      var self = this;
      if (self.border == null) self.border = nil;

      return self.border
    }, $VisualsProperties_border$4.$$arity = 0);
    
    Opal.def(self, '$overflow=', $VisualsProperties_overflow$eq$5 = function(value) {
      var self = this;

      
      
      if (value == null) {
        value = nil;
      };
      self.$overflow_html(value);
      return (self.overflow = value);
    }, $VisualsProperties_overflow$eq$5.$$arity = -1);
    
    Opal.def(self, '$overflow', $VisualsProperties_overflow$6 = function $$overflow() {
      var self = this;
      if (self.overflow == null) self.overflow = nil;

      return self.overflow
    }, $VisualsProperties_overflow$6.$$arity = 0);
    
    Opal.def(self, '$opacity=', $VisualsProperties_opacity$eq$7 = function(value) {
      var self = this;

      
      
      if (value == null) {
        value = nil;
      };
      self.$opacity_html(value);
      return (self.opacity = value);
    }, $VisualsProperties_opacity$eq$7.$$arity = -1);
    
    Opal.def(self, '$opacity', $VisualsProperties_opacity$8 = function $$opacity() {
      var self = this;
      if (self.opacity == null) self.opacity = nil;

      return self.opacity
    }, $VisualsProperties_opacity$8.$$arity = 0);
    
    Opal.def(self, '$shadow=', $VisualsProperties_shadow$eq$9 = function(value) {
      var self = this;

      
      
      if (value == null) {
        value = nil;
      };
      self.$shadow_html(value);
      return (self.shadow = value);
    }, $VisualsProperties_shadow$eq$9.$$arity = -1);
    
    Opal.def(self, '$shadow', $VisualsProperties_shadow$10 = function $$shadow() {
      var self = this;
      if (self.shadow == null) self.shadow = nil;

      return self.shadow
    }, $VisualsProperties_shadow$10.$$arity = 0);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/audio"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'AudiosProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/communication"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'CommunicationsProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/effect"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'EffectsProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'EventsProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/geometry"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'GeometriesProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/helper"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HelpersProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/hierarchy"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HierarchiesProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/identity"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'IdentitiesProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/media"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'MediasProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/spatial"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'SpatialsProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/utility"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'UtilitiesProcessors');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/processor/visual"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$sub']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'VisualsProcessors');

    var $nesting = [self].concat($parent_nesting), $VisualsProcessors_color_processor$1;

    
    Opal.def(self, '$color_processor', $VisualsProcessors_color_processor$1 = function $$color_processor(value) {
      var self = this;

      return [$hash2(["red", "green", "blue", "alpha"], {"red": value.$sub("green", "1"), "green": 0, "blue": 0, "alpha": 1})]
    }, $VisualsProcessors_color_processor$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/system/utilities"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$sort_by_array', '$puts', '$each', '$[]=', '$resize_actions', '$grab', '$-', '$==', '$[]', '$atome_id', '$instance_of?', '$resize', '$x', '$centering', '$y']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AtomeUtilities');

    var $nesting = [self].concat($parent_nesting), $AtomeUtilities_reorder_properties$1, $AtomeUtilities_centering$2, $AtomeUtilities_resize_actions$3, $AtomeUtilities_viewer_actions$5;

    
    
    Opal.def(self, '$reorder_properties', $AtomeUtilities_reorder_properties$1 = function $$reorder_properties(properties) {
      var self = this, order_wanted = nil;

      
      order_wanted = ["atome_id", "type", "parent", "width", "height", "x", "y", "z", "center", "size", "content"];
      return properties.$sort_by_array(order_wanted);
    }, $AtomeUtilities_reorder_properties$1.$$arity = 1);
    
    Opal.def(self, '$centering', $AtomeUtilities_centering$2 = function $$centering(values) {
      var self = this;

      return self.$puts(values)
    }, $AtomeUtilities_centering$2.$$arity = 1);
    
    Opal.def(self, '$resize_actions', $AtomeUtilities_resize_actions$3 = function $$resize_actions(params) {
      var $$4, self = this;
      if (self.resize_actions == null) self.resize_actions = nil;

      
      
      if (params == null) {
        params = nil;
      };
      if ($truthy(params)) {
        return $send(params, 'each', [], ($$4 = function(key, value){var self = $$4.$$s || this, $writer = nil;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          $writer = [key, value];
          $send(self.$grab("actions").$resize_actions(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$4.$$s = self, $$4.$$arity = 2, $$4))
      } else if (self.$atome_id()['$[]']("value")['$==']("actions")) {
        if ($truthy(self.resize_actions['$instance_of?']($$($nesting, 'NilClass')))) {
          return (self.resize_actions = $hash2([], {}))
        } else {
          return self.resize_actions
        }
      } else {
        return self.$grab("actions").$resize_actions()
      };
    }, $AtomeUtilities_resize_actions$3.$$arity = -1);
    
    Opal.def(self, '$viewer_actions', $AtomeUtilities_viewer_actions$5 = function $$viewer_actions() {
      var $$6, self = this;

      return $send(self.$grab("view"), 'resize', [], ($$6 = function(){var self = $$6.$$s || this, $a, $$7;

      return ($a = self.$grab("actions").$resize_actions()['$[]']("center"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], ($$7 = function(atome){var self = $$7.$$s || this;

        
          
          if (atome == null) {
            atome = nil;
          };
          if ($truthy(atome.$x()['$[]']("center"))) {
            atome.$centering("x", atome.$x()['$[]']("center"), atome.$x()['$[]']("reference"), atome.$x()['$[]']("dynamic"))};
          if ($truthy(atome.$y()['$[]']("center"))) {
            return atome.$centering("y", atome.$y()['$[]']("center"), atome.$y()['$[]']("reference"), atome.$y()['$[]']("dynamic"))
          } else {
            return nil
          };}, $$7.$$s = self, $$7.$$arity = 1, $$7)))}, $$6.$$s = self, $$6.$$arity = 0, $$6))
    }, $AtomeUtilities_viewer_actions$5.$$arity = 0);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/builder/object"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$include', '$atomise', '$each', '$set', '$register_atome', '$send', '$+', '$to_s', '$<<', '$class_variable_get', '$class_variable_set']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $Atome_sparkle$1, $Atome_initialize$2, $Atome_set$4, $Atome_register_atome$5, $Atome_atomise$6, $Atome_atomes$7;

    
    self.$include($$($nesting, 'AudiosProperties'));
    self.$include($$($nesting, 'CommunicationsProperties'));
    self.$include($$($nesting, 'EffectsProperties'));
    self.$include($$($nesting, 'EventsProperties'));
    self.$include($$($nesting, 'GeometriesProperties'));
    self.$include($$($nesting, 'HelpersProperties'));
    self.$include($$($nesting, 'HierarchiesProperties'));
    self.$include($$($nesting, 'IdentitiesProperties'));
    self.$include($$($nesting, 'MediasProperties'));
    self.$include($$($nesting, 'SpatialsProperties'));
    self.$include($$($nesting, 'UtilitiesProperties'));
    self.$include($$($nesting, 'VisualsProperties'));
    self.$include($$($nesting, 'AudiosProcessors'));
    self.$include($$($nesting, 'CommunicationsProcessors'));
    self.$include($$($nesting, 'EffectsProcessors'));
    self.$include($$($nesting, 'EventsProcessors'));
    self.$include($$($nesting, 'GeometriesProcessors'));
    self.$include($$($nesting, 'HelpersProcessors'));
    self.$include($$($nesting, 'HierarchiesProcessors'));
    self.$include($$($nesting, 'IdentitiesProcessors'));
    self.$include($$($nesting, 'MediasProcessors'));
    self.$include($$($nesting, 'SpatialsProcessors'));
    self.$include($$($nesting, 'UtilitiesProcessors'));
    self.$include($$($nesting, 'VisualsProcessors'));
    self.$include($$($nesting, 'RenderHtml'));
    self.$include($$($nesting, 'AtomeUtilities'));
    Opal.defs(self, '$sparkle', $Atome_sparkle$1 = function $$sparkle() {
      var self = this;

      return $$($nesting, 'Atome').$atomise()
    }, $Atome_sparkle$1.$$arity = 0);
    
    Opal.def(self, '$initialize', $Atome_initialize$2 = function $$initialize(properties) {
      var $$3, self = this;

      
      
      if (properties == null) {
        properties = $hash2(["type"], {"type": "particle"});
      };
      $send(properties, 'each', [], ($$3 = function(property, value){var self = $$3.$$s || this;

      
        
        if (property == null) {
          property = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return self.$set(property, value);}, $$3.$$s = self, $$3.$$arity = 2, $$3));
      return self.$register_atome();
    }, $Atome_initialize$2.$$arity = -1);
    
    Opal.def(self, '$set', $Atome_set$4 = function $$set(property, value) {
      var self = this;

      return self.$send($rb_plus(property.$to_s(), "="), value)
    }, $Atome_set$4.$$arity = 2);
    
    Opal.def(self, '$register_atome', $Atome_register_atome$5 = function $$register_atome() {
      var self = this;

      return $$($nesting, 'Atome').$class_variable_get("@@atomes")['$<<'](self)
    }, $Atome_register_atome$5.$$arity = 0);
    Opal.defs(self, '$atomise', $Atome_atomise$6 = function $$atomise() {
      var self = this;

      return $$($nesting, 'Atome').$class_variable_set("@@atomes", [])
    }, $Atome_atomise$6.$$arity = 0);
    return (Opal.defs(self, '$atomes', $Atome_atomes$7 = function $$atomes() {
      var self = this;

      return $$($nesting, 'Atome').$class_variable_get("@@atomes")
    }, $Atome_atomes$7.$$arity = 0), nil) && 'atomes';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/utilities/global"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $identity$1, $get$2, $grab$4, $tactile$6, $lorem$7, $version$8, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send;

  Opal.add_stubs(['$+', '$to_s', '$object_id', '$now', '$each', '$atomes', '$==', '$[]', '$id', '$atome_id']);
  
  
  Opal.def(self, '$identity', $identity$1 = function $$identity() {
    var self = this;

    return $rb_plus($rb_plus("a_", self.$object_id().$to_s()), $$($nesting, 'Time').$now().$to_s())
  }, $identity$1.$$arity = 0);
  
  Opal.def(self, '$get', $get$2 = function $$get(id) {try {

    var $$3, self = this;

    
    $send($$($nesting, 'Atome').$atomes(), 'each', [], ($$3 = function(atome){var self = $$3.$$s || this;

    
      
      if (atome == null) {
        atome = nil;
      };
      if (atome.$id()['$[]']("value")['$=='](id)) {
        Opal.ret(atome)
      } else {
        return nil
      };}, $$3.$$s = self, $$3.$$arity = 1, $$3));
    return nil;
    } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
  }, $get$2.$$arity = 1);
  
  Opal.def(self, '$grab', $grab$4 = function $$grab(atome_id) {try {

    var $$5, self = this;

    
    $send($$($nesting, 'Atome').$atomes(), 'each', [], ($$5 = function(atome){var self = $$5.$$s || this;

    
      
      if (atome == null) {
        atome = nil;
      };
      if (atome.$atome_id()['$[]']("value")['$=='](atome_id)) {
        Opal.ret(atome)
      } else {
        return nil
      };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
    return nil;
    } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
  }, $grab$4.$$arity = 1);
  
  Opal.def(self, '$tactile', $tactile$6 = function $$tactile() {
    var self = this;

    return false
  }, $tactile$6.$$arity = 0);
  
  Opal.def(self, '$lorem', $lorem$7 = function $$lorem() {
    var self = this;

    return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n"
  }, $lorem$7.$$arity = 0);
  return (Opal.def(self, '$version', $version$8 = function $$version() {
    var self = this;

    return "v:0.010"
  }, $version$8.$$arity = 0), nil) && 'version';
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/environment/device"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$presets', '$tactile', '$viewer_actions', '$merge', '$lorem']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Device');

    var $nesting = [self].concat($parent_nesting), $Device_initialize$1, $Device_presets$2;

    
    
    Opal.def(self, '$initialize', $Device_initialize$1 = function $$initialize() {
      var self = this, actions = nil;

      
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "content"], {"atome_id": "preset", "id": "preset", "content": self.$presets()}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "width", "height", "x", "xx", "y", "yy", "z", "overflow", "color"], {"atome_id": "dark_matter", "id": "dark_matter", "width": 0, "height": 0, "x": 0, "xx": 0, "y": 0, "yy": 0, "z": 0, "overflow": "hidden", "color": "transparent"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "language", "type", "width", "height", "x", "xx", "y", "yy", "z", "overflow", "color"], {"atome_id": "device", "id": "device", "language": "english", "type": "particle", "width": "100%", "height": "100%", "x": 0, "xx": 0, "y": 0, "yy": 0, "z": 1, "overflow": "hidden", "color": "transparent"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "type", "x", "xx", "y", "yy", "z", "overflow", "color"], {"atome_id": "intuition", "id": "intuition", "type": "particle", "x": 0, "xx": 0, "y": 0, "yy": 0, "z": 3, "overflow": "hidden", "color": "transparent"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "type", "x", "xx", "y", "yy", "z", "overflow", "parent", "color", "tactile"], {"atome_id": "view", "id": "view", "type": "particle", "x": 0, "xx": 0, "y": 0, "yy": 0, "z": 0, "overflow": "auto", "parent": "intuition", "color": "transparent", "tactile": self.$tactile()}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "type"], {"atome_id": "messenger", "id": "messenger", "type": "particle"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id"], {"atome_id": "right", "id": "right"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "render"], {"atome_id": "buffer", "id": "buffer", "render": false}));
      actions = $$($nesting, 'Atome').$new($hash2(["atome_id", "id"], {"atome_id": "actions", "id": "actions"}));
      return actions.$viewer_actions();
    }, $Device_initialize$1.$$arity = 0);
    return (Opal.def(self, '$presets', $Device_presets$2 = function $$presets() {
      var self = this, visual = nil, shape = nil, box = nil, circle = nil, text = nil, image = nil, video = nil, audio = nil, particle = nil, collector = nil, tool = nil, web = nil, user = nil, color = nil, history = nil, authorisation = nil, shadow = nil, border = nil, blur = nil;

      
      visual = $hash2(["color", "center", "z", "overflow", "parent"], {"color": "lightgray", "center": $hash2(["y", "x", "dynamic"], {"y": 43, "x": 16, "dynamic": false}), "z": 0, "overflow": "visible", "parent": "view"});
      shape = visual.$merge($hash2(["type", "width", "height", "content"], {"type": "shape", "width": 70, "height": 70, "content": $hash2(["points"], {"points": 2})}));
      box = visual.$merge(shape).$merge($hash2(["content"], {"content": $hash2(["points"], {"points": 4})}));
      circle = visual.$merge(shape).$merge($hash2(["color", "content"], {"color": "red", "content": $hash2(["points", "tension"], {"points": 4, "tension": "100%"})}));
      text = visual.$merge($hash2(["type", "color", "size", "content"], {"type": "text", "color": [$hash2(["red", "green", "blue"], {"red": 124, "green": 124, "blue": 124})], "size": 25, "content": self.$lorem()}));
      image = visual.$merge($hash2(["type", "color", "content"], {"type": "image", "color": "transparent", "content": "atome"}));
      video = visual.$merge($hash2(["type", "color", "content"], {"type": "video", "color": "transparent", "content": "atome"}));
      audio = visual.$merge($hash2(["type", "color", "content"], {"type": "audio", "color": "transparent", "content": "atome"}));
      particle = $hash2(["type"], {"type": "particle"});
      collector = $hash2(["type"], {"type": "collector"});
      tool = visual.$merge($hash2(["type", "width", "height", "parent", "content"], {"type": "tool", "width": 52, "height": 50, "parent": "intuition", "content": "dummy"}));
      web = visual.$merge($hash2(["type", "color", "content"], {"type": "web", "color": "transparent", "content": "atome"}));
      user = visual.$merge($hash2(["type", "color", "name", "pass", "content"], {"type": "user", "color": "transparent", "name": "anonymous", "pass": "none", "content": "anonymous"}));
      color = $hash2(["content"], {"content": "black"});
      history = $hash2([], {});
      authorisation = $hash2(["creator", "read", "write"], {"creator": "atome", "read": "all", "write": "all"});
      shadow = $hash2(["x", "y", "blur", "thickness", "color", "invert"], {"x": 0, "y": 0, "blur": 7, "thickness": 0, "color": [$hash2(["alpha"], {"alpha": 0.3})], "invert": false});
      border = $hash2(["thickness", "pattern", "color"], {"thickness": 1, "pattern": "solid", "color": "red"});
      blur = $hash2(["default"], {"default": 5});
      return $hash2(["value"], {"value": $hash2(["shape", "box", "circle", "text", "image", "video", "audio", "particle", "collector", "tool", "web", "user", "color", "history", "authorisation", "shadow", "border", "blur"], {"shape": shape, "box": box, "circle": circle, "text": text, "image": image, "video": video, "audio": audio, "particle": particle, "collector": collector, "tool": tool, "web": web, "user": user, "color": color, "history": history, "authorisation": authorisation, "shadow": shadow, "border": border, "blur": blur})});
    }, $Device_presets$2.$$arity = 0), nil) && 'presets';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/environment/initialize"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$sparkle']);
  return $$($nesting, 'Atome').$sparkle()
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/system/creation"] = function(Opal) {
  var $box$1, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  return (Opal.def(self, '$box', $box$1 = function $$box() {
    var self = this;

    return nil
  }, $box$1.$$arity = 0), nil) && 'box'
};

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("extensions/hash");
  self.$require("atome/interpreter/opal/add_on");
  self.$require("atome/renderers/html/audio");
  self.$require("atome/renderers/html/communication");
  self.$require("atome/renderers/html/effect");
  self.$require("atome/renderers/html/event");
  self.$require("atome/renderers/html/geometry");
  self.$require("atome/renderers/html/helper");
  self.$require("atome/renderers/html/hierarchy");
  self.$require("atome/renderers/html/identity");
  self.$require("atome/renderers/html/media");
  self.$require("atome/renderers/html/spatial");
  self.$require("atome/renderers/html/utility");
  self.$require("atome/renderers/html/visual");
  self.$require("atome/renderers/html");
  self.$require("atome/properties/audio");
  self.$require("atome/properties/communication");
  self.$require("atome/properties/effect");
  self.$require("atome/properties/event");
  self.$require("atome/properties/geometry");
  self.$require("atome/properties/helper");
  self.$require("atome/properties/hierarchy");
  self.$require("atome/properties/identity");
  self.$require("atome/properties/media");
  self.$require("atome/properties/spatial");
  self.$require("atome/properties/utility");
  self.$require("atome/properties/visual");
  self.$require("atome/processor/audio");
  self.$require("atome/processor/communication");
  self.$require("atome/processor/effect");
  self.$require("atome/processor/event");
  self.$require("atome/processor/geometry");
  self.$require("atome/processor/helper");
  self.$require("atome/processor/hierarchy");
  self.$require("atome/processor/identity");
  self.$require("atome/processor/media");
  self.$require("atome/processor/spatial");
  self.$require("atome/processor/utility");
  self.$require("atome/processor/visual");
  self.$require("atome/system/utilities");
  self.$require("atome/builder/object");
  self.$require("atome/utilities/global");
  self.$require("atome/environment/device");
  self.$require("atome/environment/initialize");
  return self.$require("atome/system/creation");
})(Opal);
