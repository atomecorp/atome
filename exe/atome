#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'securerandom'
require 'digest/sha2'
# below are the methods needed for atome creation and run

def delete_all(dir)
  Dir.foreach(dir) do |e|
    next if %w[. ..].include? e
    full_name = dir + File::Separator + e
    if FileTest.directory?(full_name)
      delete_all(full_name)
    else
      File.delete(full_name)
    end
  end
  Dir.delete(dir)
end

def create
  #  todo:  implement  app identity must be on either the index.html and server and match use a sha for to compare for
  # security
  uuid = SecureRandom.uuid
  sha = Digest::SHA256.hexdigest(uuid)
  puts " uuid is : #{uuid}, sha is #{sha}"
end
def guard_check
  if ARGV.include?('guard')
    loop do
      sleep 9
    end
  end
end

def run(build_target, location, port = 9292)
  case build_target
  when :server
    require 'atome'
    threads = []
    threads<<  Thread.new do
      sleep 1.5
      # system("open", "http://127.0.0.1:#{port}")
      `cd .#{location}/build;open index.html`
    end
      `cd .#{location}/server;rackup --server puma --port #{port}  --env production`
  when :browser
    `cd .#{location}/build;open index.html`
    guard_check
  when :osx
  else
    `cd .#{location}/build;open index.html`
    guard_check
  end

end

def build_app(production)
  current_path = `pwd`.chomp
  # now run the rake task to build the needed libraries (atome, renderers, etc...)
  app_builder_helpers = File.join(File.dirname(__FILE__), '../app_builder_helpers')
  `cd #{app_builder_helpers};rake build_user_code[#{current_path},#{production}]`
end

# below we analyse the ARGV
location = '/'
force = nil
production = nil
port = 9292

if ARGV.include?('production')
  production = 'production'
end

if ARGV.include?('force')
  force = 'force'
end

if ARGV.include?('port:')
  port = ARGV[ARGV.find_index('port:') + 1]
end

platforms = %w[android browser server osx freebsd ios linux osx windows]
# now setting build_target

build_target = 'browser'

platforms.each do |platform|
  if ARGV.include?(platform)
    build_target = platform
  end
end

if ARGV.include?('create')
  create
  project_name = ARGV[1]
  delete_all(project_name) if force == 'force' && File.directory?(project_name)
  Dir.mkdir project_name.to_s
  current_path = `pwd`.chomp
  gem_assets_location = File.join(File.dirname(__FILE__), '../vendor/assets/')
  app_builder_helpers = File.join(File.dirname(__FILE__), '../app_builder_helpers')
  target_template_location = "#{current_path}/#{project_name}"
  Dir.entries(gem_assets_location).select do |entry|
    if File.join(entry) && !%w[. ..].include?(entry)
      entry = "#{File.dirname(__FILE__)}/../vendor/assets/#{entry}"
      FileUtils.cp_r entry, target_template_location
    end
  end
  # now run the rake task to build the needed libraries (atome, renderers, etc...)
  location = "/#{project_name}"
  # fixme : use build_app instead of the command below
  `cd #{app_builder_helpers};rake system_builder[#{current_path}/#{project_name},#{production}]`
end

if ARGV.include?('build')
  build_app(production)
end
if ARGV.include?('guard')
  Thread.new do
    sleep 1.2
    Dir.chdir("./#{location}") do
    system("guard")
    end
  end
end

if ARGV.include?('run')
  case build_target
  when 'android'
  when 'browser'
    run(:browser, location)
  when 'freebsd'
  when 'ios'
  when 'linux'
  when 'osx'
    run(:osx, location)
  when 'server'
    config_location="#{`pwd`.chomp}#{location}/server/config.ru"
    file = File.open(config_location)
    text = file.read
    text = text.gsub("run Unreloader", "")
    text = text.gsub("run App.freeze.app", "")
    if production == 'production'
      text = text + "\nrun App.freeze.app"
    else
      text = text + "\nrun Unreloader"
    end
    File.open(config_location, 'w') do |f|
      f.puts text
    end
    run(:server, location, port)
  when 'windows'
  else
    run(:browser, location)
  end

end