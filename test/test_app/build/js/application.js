Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass, b = nil, text = nil;

  Opal.add_stubs('particle_creator,play,html_object,[],bloc,on,is_a?,instance_exec,currentTime,to_proc,atome_creator_option,send,type,pause,generate_html_renderer,currentTime=,new,atomes_add,instance_variable_set,each,add_essential_properties,sanitizer,set_new_atome,get_new_atome,validation,run_optional_methods_helper,to_sym,create_new_atomes,current_user,app_identity,length,atomes,[]=,alert,box,text,left');
  
  $$('Genesis').$particle_creator("play");
  
  $def(self, '$play_video', function $$play_video(params) {
    var proc = $$play_video.$$p || nil, self = this, video_callback = nil, play_callback = nil;

    delete $$play_video.$$p;
    
    ;
    params['$[]']("atome").$html_object().$play();
    video_callback = params['$[]']("atome").$bloc()['$[]']("bloc");
    play_callback = params['$[]']("proc");
    return $send(params['$[]']("atome").$html_object(), 'on', ["timeupdate"], function $$1(e){var self = $$1.$$s == null ? this : $$1.$$s;

      
      
      if (e == null) e = nil;;
      if ($truthy(video_callback['$is_a?']($$('Proc')))) {
        $send(self, 'instance_exec', [params['$[]']("atome").$html_object().$currentTime()], video_callback.$to_proc())
      };
      if ($truthy(play_callback['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', [params['$[]']("atome").$html_object().$currentTime()], play_callback.$to_proc())
      } else {
        return nil
      };}, {$$arity: 1, $$s: self});
  }, 1);
  $send($$('Genesis'), 'atome_creator_option', ["play_pre_render_proc"], function $$2(params){
    
    
    if (params == null) params = nil;;
    return params['$[]']("atome").$send("play_" + (params['$[]']("atome").$type()), params);}, 1);
  $$('Genesis').$particle_creator("pause");
  
  $def(self, '$pause_video', function $$pause_video(params) {
    var proc = $$pause_video.$$p || nil, self = this, exec_found = nil;

    delete $$pause_video.$$p;
    
    ;
    params['$[]']("atome").$html_object().$pause();
    exec_found = params['$[]']("atome").$bloc()['$[]']("bloc");
    if ($truthy(exec_found['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', ["::callback from video player"], exec_found.$to_proc())
    } else {
      return nil
    };
  }, 1);
  $send($$('Genesis'), 'atome_creator_option', ["pause_pre_render_proc"], function $$3(params){var self = $$3.$$s == null ? this : $$3.$$s, proc_found = nil;

    
    
    if (params == null) params = nil;;
    params['$[]']("atome").$send("pause_" + (params['$[]']("atome").$type()), params);
    proc_found = params['$[]']("proc");
    if ($truthy(proc_found['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', ["::call back from pause render"], proc_found.$to_proc())
    } else {
      return nil
    };}, {$$arity: 1, $$s: self});
  $$('Genesis').$particle_creator("time");
  $send($$('Genesis'), 'generate_html_renderer', ["time"], function $$4(value, atome, proc){var $a, self = $$4.$$s == null ? this : $$4.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return ($a = [value], $send(self.html_object, 'currentTime=', $a), $a[$a.length - 1]);}, {$$arity: 3, $$s: self});
  (function($base, $parent_nesting) {
    var self = $module($base, 'Genesis');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$create_new_atomes', function $$create_new_atomes(params, instance_var, _atome) {
      var proc = $$create_new_atomes.$$p || nil, self = this, new_atome = nil;

      delete $$create_new_atomes.$$p;
      
      ;
      new_atome = $send($$('Atome'), 'new', [$hash2([], {})], proc.$to_proc());
      $$('Universe').$atomes_add(new_atome);
      self.$instance_variable_set(instance_var, new_atome);
      $send(params, 'each', [], function $$5(param, value){
        
        
        if (param == null) param = nil;;
        
        if (value == null) value = nil;;
        return new_atome.$send(param, value);}, 2);
      return new_atome;
    }, 3);
    
    $def(self, '$new_atome', function $$new_atome(atome, params, userproc) {
      var methodproc = $$new_atome.$$p || nil, self = this;

      delete $$new_atome.$$p;
      
      ;
      if ($truthy(params)) {
        
        if ($truthy(userproc['$is_a?']($$('Proc')))) {
          $send(self, 'instance_exec', [params], userproc.$to_proc())
        };
        if ($truthy(methodproc['$is_a?']($$('Proc')))) {
          params = $send(self, 'instance_exec', [params], methodproc.$to_proc())
        };
        params = self.$add_essential_properties(atome, params);
        params = self.$sanitizer(params);
        return self.$set_new_atome(atome, params, userproc);
      } else {
        return self.$get_new_atome(atome)
      };
    }, 3);
    return $def(self, '$set_new_atome', function $$set_new_atome(atome, params, proc) {
      var self = this, instance_var = nil, new_atome = nil;

      
      if (!$truthy(self.$validation(atome))) {
        return false
      };
      instance_var = "@" + (atome);
      params = $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_pre_save_proc").$to_sym(), $hash2(["value", "proc"], {"value": params, "proc": proc}));
      new_atome = $send(self, 'create_new_atomes', [params['$[]']("value"), instance_var, atome], proc.$to_proc());
      $$('Genesis').$run_optional_methods_helper((("" + (atome)) + "_post_save_proc").$to_sym(), $hash2(["value", "proc"], {"value": params, "proc": proc}));
      self.dna = "" + ($$('Atome').$current_user()) + "_" + ($$('Universe').$app_identity()) + "_" + ($$('Universe').$atomes().$length());
      return new_atome;
    }, 3);
  })($nesting[0], $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    return $def(self, '$initialize', function $$initialize(params) {
      var proc = $$initialize.$$p || nil, self = this;

      delete $$initialize.$$p;
      
      ;
      
      if (params == null) params = $hash2([], {});;
      self.render = [];
      self.child = [];
      return $send(params, 'each', [], function $$6(atome, values){var self = $$6.$$s == null ? this : $$6.$$s, new_atome = nil;

        
        
        if (atome == null) atome = nil;;
        
        if (values == null) values = nil;;
        values['$[]=']("bloc", $hash2(["bloc"], {"bloc": proc}));
        return (new_atome = $send(self, 'send', [atome, values], proc.$to_proc()));}, {$$arity: 2, $$s: self});
    }, -1)
  })($nesting[0], null);
  $send($$('Genesis'), 'atome_creator_option', ["shape_pre_save_proc"], function $$7(params){var self = $$7.$$s == null ? this : $$7.$$s, play_callback = nil;

    
    
    if (params == null) params = nil;;
    play_callback = params['$[]']("bloc");
    self.$alert(params);
    if ($truthy(play_callback['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', ["kool : params"], play_callback.$to_proc())
    };
    return params;}, {$$arity: 1, $$s: self});
  $send($$('Genesis'), 'atome_creator_option', ["text_pre_save_proc"], function $$8(params){var play_callback = nil;

    
    
    if (params == null) params = nil;;
    play_callback = params['$[]']("proc");
    return params;}, 1);
  b = $send(self, 'box', [$hash2(["id"], {"id": "my_box"})], function $$9(p){var self = $$9.$$s == null ? this : $$9.$$s;

    
    
    if (p == null) p = nil;;
    return self.$alert("ok_cest_ok_box");}, {$$arity: 1, $$s: self});
  text = $send(self, 'text', [$hash2(["id"], {"id": "my_text"})], function $$10(p){var self = $$10.$$s == null ? this : $$10.$$s;

    
    
    if (p == null) p = nil;;
    return self.$alert("ok_cest_ok_text");}, {$$arity: 1, $$s: self});
  $send($$('Atome'), 'new', [$hash2(["shape"], {"shape": $hash2(["render", "id", "type", "parent", "left", "right", "top", "bottom", "overflow", "color"], {"render": ["html"], "id": "the_new", "type": "shape", "parent": ["view"], "left": 0, "right": 0, "top": 0, "bottom": 0, "overflow": "auto", "color": $hash2(["render", "id", "type", "red", "green", "blue", "alpha"], {"render": ["html"], "id": "the_new_color", "type": "color", "red": 0.15, "green": 0.15, "blue": 0.15, "alpha": 1})})})], function $$11(p){var self = $$11.$$s == null ? this : $$11.$$s;

    
    
    if (p == null) p = nil;;
    return self.$alert("koolybooly");}, {$$arity: 1, $$s: self});
  return $send(b, 'left', [99], function $$12(pa){var self = $$12.$$s == null ? this : $$12.$$s;

    
    
    if (pa == null) pa = nil;;
    return self.$alert("ok " + (pa));}, {$$arity: 1, $$s: self});
});
