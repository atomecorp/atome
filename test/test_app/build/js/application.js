Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars, $klass = Opal.klass, $def = Opal.def, anim1 = nil, my_anim = nil, my_animation = nil, my_video = nil, b = nil;

  Opal.add_stubs('atome_creator,generate_html_renderer,id,is_a?,instance_exec,to_proc,append_to,DOM,div,[],particle_creator,length,atomes,merge,new,animator,animation,grab,[]=,style,html_object,play,puts,currentTime,on,methods,wait,currentTime=,pause,bloc,atome_creator_option,send,type,class,box,touch');
  
  $$('Genesis').$atome_creator("animator");
  $send($$('Genesis'), 'generate_html_renderer', ["animator"], function $$1(value, atome, proc){var self = $$1.$$s == null ? this : $$1.$$s, id_found = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    id_found = self.$id();
    if ($truthy(proc['$is_a?']($$('Proc')))) {
      $send(self, 'instance_exec', [], proc.$to_proc())
    };
    $send(self, 'DOM', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

      return self.$div($hash2(["id"], {"id": id_found}))}, {$$arity: 0, $$s: self}).$append_to($gvars.document['$[]']("user_view"));
    self.html_object = $gvars.document['$[]'](id_found);
    return (self.html_type = "div");}, {$$arity: 3, $$s: self});
  $$('Genesis').$particle_creator("code");
  $send($$('Genesis'), 'generate_html_renderer', ["code"], function $$3(value, atome, proc){
    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return nil;}, 3);
  $send($$('Genesis'), 'particle_creator', ["target"], function $$4(params){
    
    
    if (params == null) params = nil;;
    return nil;}, 1);
  $send($$('Genesis'), 'generate_html_renderer', ["target"], function $$5(value, atome, proc){var self = $$5.$$s == null ? this : $$5.$$s;
    if (self.html_object == null) self.html_object = nil;

    
    
    if (value == null) value = nil;;
    
    if (atome == null) atome = nil;;
    
    if (proc == null) proc = nil;;
    return self.html_object;}, {$$arity: 3, $$s: self});
  $$('Genesis').$particle_creator("data");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$animation', function $$animation(params) {
      var proc = $$animation.$$p || nil, self = this, generated_id = nil, $ret_or_1 = nil, generated_parent = nil, temp_default = nil, new_atome = nil;

      delete $$animation.$$p;
      
      ;
      
      if (params == null) params = $hash2([], {});;
      generated_id = ($truthy(($ret_or_1 = params['$[]']("id"))) ? ($ret_or_1) : ("animation_" + ($$('Universe').$atomes().$length())));
      generated_parent = ($truthy(($ret_or_1 = params['$[]']("parent"))) ? ($ret_or_1) : (self.$id()));
      temp_default = $hash2(["id", "type", "parent", "bloc"], {"id": generated_id, "type": "animator", "parent": [generated_parent], "bloc": proc});
      params = temp_default.$merge(params);
      new_atome = $$('Atome').$new($hash2(["animator"], {"animator": params}));
      return new_atome.$animator();
    }, -1)
  })($nesting[0], null, $nesting);
  
  $def(self, '$animation', function $$animation(params) {
    var proc = $$animation.$$p || nil;

    delete $$animation.$$p;
    
    ;
    
    if (params == null) params = $hash2([], {});;
    return $send($$('Utilities').$grab("view"), 'animation', [params], proc.$to_proc());
  }, -1);
  $$('Genesis').$particle_creator("play");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$play_video', function $$play_video(params) {
      var proc = $$play_video.$$p || nil, self = this, exec_found = nil;

      delete $$play_video.$$p;
      
      ;
      params['$[]']("atome").$html_object().$style()['$[]=']("left", "33px");
      params['$[]']("atome").$html_object().$play();
      self.$puts("time is : " + (params['$[]']("atome").$html_object().$currentTime()));
      $send(params['$[]']("atome").$html_object(), 'on', ["timeupdate"], function $$6(e){var self = $$6.$$s == null ? this : $$6.$$s;

        
        
        if (e == null) e = nil;;
        return self.$puts("--- " + (params['$[]']("atome").$html_object().$currentTime()) + ":::" + (e.$methods()));}, {$$arity: 1, $$s: self});
      $send(self, 'wait', [2], function $$7(){var $a;

        return ($a = [33], $send(params['$[]']("atome").$html_object(), 'currentTime=', $a), $a[$a.length - 1])}, 0);
      $send(self, 'wait', [6], function $$8(){
        return params['$[]']("atome").$html_object().$pause()}, 0);
      exec_found = params['$[]']("atome").$bloc()['$[]']("bloc");
      if ($truthy(exec_found['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', ["::callback from video player"], exec_found.$to_proc())
      } else {
        return nil
      };
    }, 1);
    return $def(self, '$play_animator', function $$play_animator(params) {
      var self = this, exec_found = nil;

      
      self.$puts("I play the animation : " + (params));
      exec_found = params['$[]']("atome").$bloc();
      if ($truthy(exec_found['$is_a?']($$('Proc')))) {
        return $send(self, 'instance_exec', ["::callback from anim player"], exec_found.$to_proc())
      } else {
        return nil
      };
    }, 1);
  })($nesting[0], null, $nesting);
  $send($$('Genesis'), 'atome_creator_option', ["play_pre_render_proc"], function $$9(params){var self = $$9.$$s == null ? this : $$9.$$s, proc_found = nil;

    
    
    if (params == null) params = nil;;
    params['$[]']("atome").$send("play_" + (params['$[]']("atome").$type()), params);
    proc_found = params['$[]']("proc");
    if ($truthy(proc_found['$is_a?']($$('Proc')))) {
      return $send(self, 'instance_exec', ["::call back from play render"], proc_found.$to_proc())
    } else {
      return nil
    };}, {$$arity: 1, $$s: self});
  anim1 = $hash2(["start", "end", "duration", "loop", "curve", "target"], {"start": $hash2(["smooth", "blur", "rotate", "color"], {"smooth": 0, "blur": 0, "rotate": 0, "color": $hash2(["red", "green", "blue"], {"red": 1, "green": 1, "blue": 1})}), "end": $hash2(["smooth", "rotate", "blur", "color"], {"smooth": 25, "rotate": 180, "blur": 20, "color": $hash2(["red", "green", "blue"], {"red": 1, "green": 0, "blue": 0})}), "duration": 1000, "loop": 1, "curve": "easing", "target": "my_shape"});
  my_anim = $send(self, 'animation', [$hash2(["data", "id"], {"data": anim1, "id": "my_animation"})], function $$10(params){var self = $$10.$$s == null ? this : $$10.$$s;

    
    
    if (params == null) params = nil;;
    return self.$puts("animation params callback is : " + (params) + " " + (self.$id()));}, {$$arity: 1, $$s: self});
  my_animation = $send($$('Atome'), 'new', [$hash2(["animator"], {"animator": $hash2(["render", "id", "type", "parent", "target", "code", "left", "top", "width", "height"], {"render": ["html"], "id": "anim12", "type": "animator", "parent": ["view"], "target": "image1", "code": anim1, "left": 333, "top": 333, "width": 199, "height": 99})})], function $$11(){var self = $$11.$$s == null ? this : $$11.$$s;

    return self.$puts("non proc exec added at atome creation level : " + (self.$class()))}, {$$arity: 0, $$s: self});
  my_video = $send($$('Atome'), 'new', [$hash2(["video"], {"video": $hash2(["render", "data", "id", "type", "parent", "path", "left", "top", "width", "height"], {"render": ["html"], "data": "dummy", "id": "video1", "type": "video", "parent": ["view"], "path": "./medias/videos/avengers.mp4", "left": 333, "top": 333, "width": 199, "height": 99})})], function $$12(params){var self = $$12.$$s == null ? this : $$12.$$s;

    
    
    if (params == null) params = nil;;
    return self.$puts("video callback here " + (params));}, {$$arity: 1, $$s: self});
  b = self.$box();
  return $send(b, 'touch', [true], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

    return $send(self.$grab("video1"), 'play', [true], function $$14(event){var self = $$14.$$s == null ? this : $$14.$$s;

      
      
      if (event == null) event = nil;;
      return self.$puts("i am the play callback : " + (event));}, {$$arity: 1, $$s: self})}, {$$arity: 0, $$s: self});
});
