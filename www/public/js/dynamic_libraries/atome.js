/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$<<', '$[]', '$each']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'JSUtils');

    var $nesting = [self].concat($parent_nesting), $JSUtils_initialize$1, $JSUtils_device$2, $JSUtils_document$3, $JSUtils_add_interval$4, $JSUtils_clear_interval$5, $JSUtils_clear_intervals$6, $JSUtils_add_timeout$8, $JSUtils_clear_timeout$9, $JSUtils_clear_timeouts$10, $JSUtils_verification$12;

    
    
    Opal.def(self, '$initialize', $JSUtils_initialize$1 = function $$initialize() {
      var self = this;

      return (self.codemirror = [])
    }, $JSUtils_initialize$1.$$arity = 0);
    Opal.defs(self, '$device', $JSUtils_device$2 = function $$device() {
      var self = this;

      return window;
    }, $JSUtils_device$2.$$arity = 0);
    Opal.defs(self, '$document', $JSUtils_document$3 = function $$document() {
      var self = this;

      return $(document);
    }, $JSUtils_document$3.$$arity = 0);
    Opal.defs(self, '$add_interval', $JSUtils_add_interval$4 = function $$add_interval(interval) {
      var self = this;
      if (self.project_intervals == null) self.project_intervals = nil;

      return self.project_intervals['$<<'](interval)
    }, $JSUtils_add_interval$4.$$arity = 1);
    Opal.defs(self, '$clear_interval', $JSUtils_clear_interval$5 = function $$clear_interval(params) {
      var self = this;

      return clearInterval(params['$[]'](1))
    }, $JSUtils_clear_interval$5.$$arity = 1);
    Opal.defs(self, '$clear_intervals', $JSUtils_clear_intervals$6 = function $$clear_intervals() {
      var $$7, self = this;
      if (self.project_intervals == null) self.project_intervals = nil;

      
      $send(self.project_intervals, 'each', [], ($$7 = function(interval){var self = $$7.$$s || this;

      
        
        if (interval == null) {
          interval = nil;
        };
        return  clearInterval(interval);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      return (self.project_intervals = []);
    }, $JSUtils_clear_intervals$6.$$arity = 0);
    Opal.defs(self, '$add_timeout', $JSUtils_add_timeout$8 = function $$add_timeout(timeout) {
      var self = this;
      if (self.project_timeouts == null) self.project_timeouts = nil;

      return self.project_timeouts['$<<'](timeout)
    }, $JSUtils_add_timeout$8.$$arity = 1);
    Opal.defs(self, '$clear_timeout', $JSUtils_clear_timeout$9 = function $$clear_timeout(params) {
      var self = this;

      return clearTimeout(params['$[]'](1))
    }, $JSUtils_clear_timeout$9.$$arity = 1);
    Opal.defs(self, '$clear_timeouts', $JSUtils_clear_timeouts$10 = function $$clear_timeouts() {
      var $$11, self = this;
      if (self.project_timeouts == null) self.project_timeouts = nil;

      
      $send(self.project_timeouts, 'each', [], ($$11 = function(timeout){var self = $$11.$$s || this;

      
        
        if (timeout == null) {
          timeout = nil;
        };
        return clearTimeout(timeout);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
      return (self.project_timeouts = []);
    }, $JSUtils_clear_timeouts$10.$$arity = 0);
    Opal.defs(self, '$verification', $JSUtils_verification$12 = function $$verification($a) {
      var $post_args, params, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      params = $post_args;;
      return atome.jsVerification(params);
    }, $JSUtils_verification$12.$$arity = -1);
  })($nesting[0], $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AudioHtmlRenderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], null, $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CommunicationHtmlRenderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'AudioHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EffectHtmlRenderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'CommunicationHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EventHtmlRenderer');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'EffectHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GeometryHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $GeometryHtmlRenderer_render_width$1, $GeometryHtmlRenderer_render_height$2;

    
    Opal.defs(self, '$render_width', $GeometryHtmlRenderer_render_width$1 = function $$render_width(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $GeometryHtmlRenderer_render_width$1.$$arity = 2);
    return (Opal.defs(self, '$render_height', $GeometryHtmlRenderer_render_height$2 = function $$render_height(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $GeometryHtmlRenderer_render_height$2.$$arity = 2), nil) && 'render_height';
  })($nesting[0], $$($nesting, 'EventHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HelperHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $HelperHtmlRenderer_render_tactile$1;

    return (Opal.defs(self, '$render_tactile', $HelperHtmlRenderer_render_tactile$1 = function $$render_tactile(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $HelperHtmlRenderer_render_tactile$1.$$arity = 2), nil) && 'render_tactile'
  })($nesting[0], $$($nesting, 'GeometryHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HierarchyHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $HierarchyHtmlRenderer_render_parent$1;

    return (Opal.defs(self, '$render_parent', $HierarchyHtmlRenderer_render_parent$1 = function $$render_parent(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $HierarchyHtmlRenderer_render_parent$1.$$arity = 2), nil) && 'render_parent'
  })($nesting[0], $$($nesting, 'HelperHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$alert']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IdentityHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $IdentityHtmlRenderer_render_atome_id$1, $IdentityHtmlRenderer_render_id$2, $IdentityHtmlRenderer_render_type$3;

    
    Opal.defs(self, '$render_atome_id', $IdentityHtmlRenderer_render_atome_id$1 = function $$render_atome_id(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $IdentityHtmlRenderer_render_atome_id$1.$$arity = 2);
    Opal.defs(self, '$render_id', $IdentityHtmlRenderer_render_id$2 = function $$render_id(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $IdentityHtmlRenderer_render_id$2.$$arity = 2);
    return (Opal.defs(self, '$render_type', $IdentityHtmlRenderer_render_type$3 = function $$render_type(atome_id, params) {
      var self = this;

      return self.$alert("" + (atome_id) + " " + (params))
    }, $IdentityHtmlRenderer_render_type$3.$$arity = 2), nil) && 'render_type';
  })($nesting[0], $$($nesting, 'HierarchyHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MediaHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $MediaHtmlRenderer_render_content$1;

    return (Opal.defs(self, '$render_content', $MediaHtmlRenderer_render_content$1 = function $$render_content(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $MediaHtmlRenderer_render_content$1.$$arity = 2), nil) && 'render_content'
  })($nesting[0], $$($nesting, 'IdentityHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SpatialHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $SpatialHtmlRenderer_render_x$1, $SpatialHtmlRenderer_render_xx$2, $SpatialHtmlRenderer_render_y$3, $SpatialHtmlRenderer_render_yy$4, $SpatialHtmlRenderer_render_z$5;

    
    Opal.defs(self, '$render_x', $SpatialHtmlRenderer_render_x$1 = function $$render_x(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_x$1.$$arity = 2);
    Opal.defs(self, '$render_xx', $SpatialHtmlRenderer_render_xx$2 = function $$render_xx(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_xx$2.$$arity = 2);
    Opal.defs(self, '$render_y', $SpatialHtmlRenderer_render_y$3 = function $$render_y(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_y$3.$$arity = 2);
    Opal.defs(self, '$render_yy', $SpatialHtmlRenderer_render_yy$4 = function $$render_yy(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_yy$4.$$arity = 2);
    return (Opal.defs(self, '$render_z', $SpatialHtmlRenderer_render_z$5 = function $$render_z(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $SpatialHtmlRenderer_render_z$5.$$arity = 2), nil) && 'render_z';
  })($nesting[0], $$($nesting, 'MediaHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'UtilityHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $UtilityHtmlRenderer_render_language$1, $UtilityHtmlRenderer_render_preset$2;

    
    Opal.defs(self, '$render_language', $UtilityHtmlRenderer_render_language$1 = function $$render_language(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $UtilityHtmlRenderer_render_language$1.$$arity = 2);
    return (Opal.defs(self, '$render_preset', $UtilityHtmlRenderer_render_preset$2 = function $$render_preset(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $UtilityHtmlRenderer_render_preset$2.$$arity = 2), nil) && 'render_preset';
  })($nesting[0], $$($nesting, 'SpatialHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'VisualHtmlRenderer');

    var $nesting = [self].concat($parent_nesting), $VisualHtmlRenderer_render_color$1, $VisualHtmlRenderer_render_overflow$2;

    
    Opal.defs(self, '$render_color', $VisualHtmlRenderer_render_color$1 = function $$render_color(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $VisualHtmlRenderer_render_color$1.$$arity = 2);
    return (Opal.defs(self, '$render_overflow', $VisualHtmlRenderer_render_overflow$2 = function $$render_overflow(atome_id, params) {
      var self = this;

      return "" + (atome_id) + " " + (params)
    }, $VisualHtmlRenderer_render_overflow$2.$$arity = 2), nil) && 'render_overflow';
  })($nesting[0], $$($nesting, 'UtilityHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$find', '$+', '$[]']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RenderHtml');

    var $nesting = [self].concat($parent_nesting), $RenderHtml_jq_get$1;

    return (Opal.defs(self, '$jq_get', $RenderHtml_jq_get$1 = function $$jq_get(atome_id) {
      var self = this;

      return $$($nesting, 'Element').$find($rb_plus("#", atome_id['$[]']("value")))
    }, $RenderHtml_jq_get$1.$$arity = 1), nil) && 'jq_get'
  })($nesting[0], $$($nesting, 'VisualHtmlRenderer'), $nesting)
})(Opal);

/* Generated by Opal 1.0.5 */
Opal.modules["extensions/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]', '$sort_by', '$index', '$length']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_sort_by_array$1;

    return (Opal.def(self, '$sort_by_array', $Hash_sort_by_array$1 = function $$sort_by_array(a) {
      var $$2, self = this;

      return $$($nesting, 'Hash')['$[]']($send(self, 'sort_by', [], ($$2 = function(k, _){var self = $$2.$$s || this, $a;

      
        
        if (k == null) {
          k = nil;
        };
        
        if (_ == null) {
          _ = nil;
        };
        return ($truthy($a = a.$index(k)) ? $a : self.$length());}, $$2.$$s = self, $$2.$$arity = 2, $$2)))
    }, $Hash_sort_by_array$1.$$arity = 1), nil) && 'sort_by_array'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/fake_methods"] = function(Opal) {
  var $atome_id$1, $color$2, $opacity$3, $fill$4, $insert$5, $centering$6, $resize$7, $child$8, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  
  
  Opal.def(self, '$atome_id', $atome_id$1 = function $$atome_id($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $atome_id$1.$$arity = -1);
  
  Opal.def(self, '$color', $color$2 = function $$color($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $color$2.$$arity = -1);
  
  Opal.def(self, '$opacity', $opacity$3 = function $$opacity($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $opacity$3.$$arity = -1);
  
  Opal.def(self, '$fill', $fill$4 = function $$fill($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $fill$4.$$arity = -1);
  
  Opal.def(self, '$insert', $insert$5 = function $$insert($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $insert$5.$$arity = -1);
  
  Opal.def(self, '$centering', $centering$6 = function $$centering($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $centering$6.$$arity = -1);
  
  Opal.def(self, '$resize', $resize$7 = function $$resize($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $resize$7.$$arity = -1);
  return (Opal.def(self, '$child', $child$8 = function $$child($a) {
    var $post_args, params, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    params = $post_args;;
    return params;
  }, $child$8.$$arity = -1), nil) && 'child';
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/builder/property"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$|', '$include', '$atome_methods', '$each', '$methods_genesis', '$define_method', '$[]=', '$-', '$method_analysis', '$instance_variable_get', '$+', '$to_s', '$send', '$puts', '$[]', '$instance_of?', '$!=', '$delete', '$<<', '$send_hash', '$==', '$instance_variable_set', '$include?', '$need_pre_processing', '$each_with_index', '$format_params_send', '$store_instance_variable', '$merge', '$!', '$property_save']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'AtomeMethodsList');

    var $nesting = [self].concat($parent_nesting), $AtomeMethodsList_atome_methods$1, $AtomeMethodsList_need_pre_processing$2, $AtomeMethodsList_need_processing$3, $AtomeMethodsList_need_post_processing$4, $AtomeMethodsList_no_rendering$5, $AtomeMethodsList_no_broadcast$6;

    
    Opal.defs(self, '$atome_methods', $AtomeMethodsList_atome_methods$1 = function $$atome_methods() {
      var self = this, spatial = nil, events = nil, helper = nil, visual = nil, audio = nil, geometry = nil, effect = nil, identity = nil, media = nil, hierarchy = nil, communication = nil, utility = nil;

      
      spatial = ["width", "height", "size", "x", "xx", "y", "yy", "z"];
      events = ["touch", "drag", "over"];
      helper = ["tactile", "display"];
      visual = ["color", "opacity", "border", "overflow"];
      audio = ["color", "opacity", "border", "overflow"];
      geometry = ["width", "height", "resize", "rotation"];
      effect = ["blur", "shadow"];
      identity = ["atome_id", "id", "type"];
      media = ["content", "image", "sound", "video"];
      hierarchy = ["parent", "child", "insert"];
      communication = ["share", "send"];
      utility = ["delete", "record", "enliven", "selector", "render", "preset"];
      return spatial['$|'](events)['$|'](helper)['$|'](visual)['$|'](audio)['$|'](geometry)['$|'](effect)['$|'](identity)['$|'](media)['$|'](hierarchy)['$|'](communication)['$|'](utility);
    }, $AtomeMethodsList_atome_methods$1.$$arity = 0);
    Opal.defs(self, '$need_pre_processing', $AtomeMethodsList_need_pre_processing$2 = function $$need_pre_processing() {
      var self = this;

      return ["add", "shadow", "render"]
    }, $AtomeMethodsList_need_pre_processing$2.$$arity = 0);
    Opal.defs(self, '$need_processing', $AtomeMethodsList_need_processing$3 = function $$need_processing() {
      var self = this;

      return ["delete", "color"]
    }, $AtomeMethodsList_need_processing$3.$$arity = 0);
    Opal.defs(self, '$need_post_processing', $AtomeMethodsList_need_post_processing$4 = function $$need_post_processing() {
      var self = this;

      return []
    }, $AtomeMethodsList_need_post_processing$4.$$arity = 0);
    Opal.defs(self, '$no_rendering', $AtomeMethodsList_no_rendering$5 = function $$no_rendering() {
      var self = this;

      return ["shadow", "enliven", "tactile", "selector", "atome_id"]
    }, $AtomeMethodsList_no_rendering$5.$$arity = 0);
    Opal.defs(self, '$no_broadcast', $AtomeMethodsList_no_broadcast$6 = function $$no_broadcast() {
      var self = this;

      return ["atome_id"]
    }, $AtomeMethodsList_no_broadcast$6.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Sparkle');

    var $nesting = [self].concat($parent_nesting), $Sparkle_initialize$7, $Sparkle_methods_genesis$9;

    
    self.$include($$($nesting, 'AtomeMethodsList'));
    
    Opal.def(self, '$initialize', $Sparkle_initialize$7 = function $$initialize() {
      var $$8, self = this, atome_methods = nil;

      
      atome_methods = $$($nesting, 'AtomeMethodsList').$atome_methods();
      return $send(atome_methods, 'each', [], ($$8 = function(method_name){var self = $$8.$$s || this;

      
        
        if (method_name == null) {
          method_name = nil;
        };
        return $$($nesting, 'Sparkle').$methods_genesis(method_name);}, $$8.$$s = self, $$8.$$arity = 1, $$8));
    }, $Sparkle_initialize$7.$$arity = 0);
    return (Opal.defs(self, '$methods_genesis', $Sparkle_methods_genesis$9 = function $$methods_genesis(method_name) {
      var $$10, $$11, $iter = $Sparkle_methods_genesis$9.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Sparkle_methods_genesis$9.$$p = null;
      
      $send($$($nesting, 'Nucleon'), 'define_method', [method_name], ($$10 = function(params){var self = $$10.$$s || this, $iter = $$10.$$p, proc = $iter || nil, $writer = nil;

      
        
        if ($iter) $$10.$$p = null;;
        
        if (params == null) {
          params = nil;
        };
        if ($truthy(params)) {
          
          if ($truthy(proc)) {
            
            $writer = ["proc", $hash2(["value"], {"value": proc})];
            $send(params, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return self.$method_analysis(method_name, params);
        } else {
          return self.$instance_variable_get("" + "@" + (method_name))
        };}, $$10.$$s = self, $$10.$$arity = -1, $$10));
      return $send($$($nesting, 'Nucleon'), 'define_method', [$rb_plus(method_name.$to_s(), "=")], ($$11 = function(params){var self = $$11.$$s || this, $iter = $$11.$$p, proc = $iter || nil;

      
        
        if ($iter) $$11.$$p = null;;
        
        if (params == null) {
          params = nil;
        };
        return self.$send(method_name, params, proc);}, $$11.$$s = self, $$11.$$arity = -1, $$11));
    }, $Sparkle_methods_genesis$9.$$arity = 1), nil) && 'methods_genesis';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Properties');

    var $nesting = [self].concat($parent_nesting), $Properties_send_hash$12, $Properties_property_save$13, $Properties_format_params_send$14, $Properties_store_instance_variable$15, $Properties_method_analysis$16;

    
    
    Opal.def(self, '$send_hash', $Properties_send_hash$12 = function $$send_hash(params, method_name) {
      var self = this;

      
      self.$puts("" + (params) + " " + (method_name));
      return self;
    }, $Properties_send_hash$12.$$arity = 2);
    
    Opal.def(self, '$property_save', $Properties_property_save$13 = function $$property_save(params, method_name) {
      var $a, $b, self = this, previous_content = nil;

      
      previous_content = self.$instance_variable_get("" + "@" + (method_name));
      if ($truthy(($truthy($a = ($truthy($b = params['$[]']("add")) ? previous_content['$instance_of?']($$($nesting, 'Hash')) : $b)) ? previous_content['$!=']($hash2([], {})) : $a))) {
        
        params.$delete("add");
        params = [previous_content, params];
      } else if ($truthy(($truthy($a = params['$[]']("add")) ? previous_content['$instance_of?']($$($nesting, 'Array')) : $a))) {
        
        params.$delete("add");
        params = previous_content['$<<'](params);
      } else if ($truthy(previous_content['$instance_of?']($$($nesting, 'Hash')))) {
        params.$delete("add")};
      return self.$send_hash(params, method_name);
    }, $Properties_property_save$13.$$arity = 2);
    
    Opal.def(self, '$format_params_send', $Properties_format_params_send$14 = function $$format_params_send(params) {
      var self = this;

      
      if ($truthy(params['$instance_of?']($$($nesting, 'Hash')))) {
      } else {
        params = $hash2(["value"], {"value": params})
      };
      return params;
    }, $Properties_format_params_send$14.$$arity = 1);
    
    Opal.def(self, '$store_instance_variable', $Properties_store_instance_variable$15 = function $$store_instance_variable(method_name, params) {
      var self = this, prev_value = nil;

      if (params['$[]']("add")['$=='](true)) {
        
        params.$delete("add");
        prev_value = self.$instance_variable_get("" + "@" + (method_name));
        return self.$instance_variable_set("" + "@" + (method_name), [prev_value, params]);
      } else {
        return self.$instance_variable_set("" + "@" + (method_name), params)
      }
    }, $Properties_store_instance_variable$15.$$arity = 2);
    
    Opal.def(self, '$method_analysis', $Properties_method_analysis$16 = function $$method_analysis(method_name, params, proc) {
      var $$17, $a, self = this, $writer = nil;

      
      if ($truthy($$($nesting, 'AtomeMethodsList').$need_pre_processing()['$include?'](method_name))) {
        params = self.$send("" + (method_name) + "_pre_processor", params)};
      if ($truthy(params['$instance_of?']($$($nesting, 'Array')))) {
        $send(params, 'each_with_index', [], ($$17 = function(param, index){var self = $$17.$$s || this;

        
          
          if (param == null) {
            param = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          param = self.$format_params_send(param);
          if (index['$=='](0)) {
            return self.$store_instance_variable(method_name, param)
          } else {
            return self.$store_instance_variable(method_name, param.$merge($hash2(["add"], {"add": true})))
          };}, $$17.$$s = self, $$17.$$arity = 2, $$17))
      } else {
        
        params = self.$format_params_send(params);
        self.$store_instance_variable(method_name, params);
      };
      if ($truthy(($truthy($a = params) ? params['$instance_of?']($$($nesting, 'Hash'))['$!']() : $a))) {
        params = $hash2(["value"], {"value": params})};
      params = ($truthy($a = params) ? $a : $hash2([], {}));
      if ($truthy(proc)) {
        
        $writer = ["proc", proc];
        $send(params, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      self.$property_save(params, method_name);
      return $hash(method_name, params);
    }, $Properties_method_analysis$16.$$arity = 3);
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/audio"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'AudioProcessor');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/communication"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'CommunicationProcessor');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/effect"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'EffectProcessor');

    var $nesting = [self].concat($parent_nesting), $EffectProcessor_shadow_pre_processor$1;

    
    Opal.def(self, '$shadow_pre_processor', $EffectProcessor_shadow_pre_processor$1 = function $$shadow_pre_processor(params) {
      var self = this;

      return params
    }, $EffectProcessor_shadow_pre_processor$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'EventProcessor');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/geometry"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'GeometryProcessor');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/helper"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HelperProcessor');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/hierarchy"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'HierarchyProcessor');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/identity"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'IdentityProcessor');

    var $nesting = [self].concat($parent_nesting), $IdentityProcessor_atome_id_pre_processor$1, $IdentityProcessor_atome_id_processor$2;

    
    
    Opal.def(self, '$atome_id_pre_processor', $IdentityProcessor_atome_id_pre_processor$1 = function $$atome_id_pre_processor(params) {
      var self = this;

      return params
    }, $IdentityProcessor_atome_id_pre_processor$1.$$arity = 1);
    
    Opal.def(self, '$atome_id_processor', $IdentityProcessor_atome_id_processor$2 = function $$atome_id_processor(params) {
      var self = this;

      return params
    }, $IdentityProcessor_atome_id_processor$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/media"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'MediaProcessor');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/spatial"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'SpatialProcessor');

    var $nesting = [self].concat($parent_nesting);

    nil
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/utility"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'UtilityProcessor');

    var $nesting = [self].concat($parent_nesting), $UtilityProcessor_delete_processor$1, $UtilityProcessor_render_pre_processor$2;

    
    
    Opal.def(self, '$delete_processor', $UtilityProcessor_delete_processor$1 = function $$delete_processor(params) {
      var self = this;

      return params
    }, $UtilityProcessor_delete_processor$1.$$arity = 1);
    
    Opal.def(self, '$render_pre_processor', $UtilityProcessor_render_pre_processor$2 = function $$render_pre_processor(params) {
      var self = this;

      return params
    }, $UtilityProcessor_render_pre_processor$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/properties/visual"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'VisualProcessor');

    var $nesting = [self].concat($parent_nesting), $VisualProcessor_color_processor$1, $VisualProcessor_border_processor$2;

    
    
    Opal.def(self, '$color_processor', $VisualProcessor_color_processor$1 = function $$color_processor(params) {
      var self = this;

      return params
    }, $VisualProcessor_color_processor$1.$$arity = 1);
    
    Opal.def(self, '$border_processor', $VisualProcessor_border_processor$2 = function $$border_processor(params) {
      var self = this;

      return params
    }, $VisualProcessor_border_processor$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/system/utilities"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$sort_by_array', '$each', '$[]=', '$resize_actions', '$grab', '$-', '$==', '$[]', '$atome_id', '$instance_of?', '$resize', '$x', '$centering', '$y']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Utilities');

    var $nesting = [self].concat($parent_nesting), $Utilities_reorder_properties$1, $Utilities_resize_actions$2, $Utilities_viewer_actions$4;

    
    
    Opal.def(self, '$reorder_properties', $Utilities_reorder_properties$1 = function $$reorder_properties(properties) {
      var self = this, order_wanted = nil;

      
      order_wanted = ["atome_id", "type", "parent", "width", "height", "x", "y", "z", "center", "size", "content"];
      return properties.$sort_by_array(order_wanted);
    }, $Utilities_reorder_properties$1.$$arity = 1);
    
    Opal.def(self, '$resize_actions', $Utilities_resize_actions$2 = function $$resize_actions(params) {
      var $$3, self = this;
      if (self.resize_actions == null) self.resize_actions = nil;

      
      
      if (params == null) {
        params = nil;
      };
      if ($truthy(params)) {
        return $send(params, 'each', [], ($$3 = function(key, value){var self = $$3.$$s || this, $writer = nil;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          $writer = [key, value];
          $send(self.$grab("actions").$resize_actions(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3))
      } else if (self.$atome_id()['$[]']("value")['$==']("actions")) {
        if ($truthy(self.resize_actions['$instance_of?']($$($nesting, 'NilClass')))) {
          return (self.resize_actions = $hash2([], {}))
        } else {
          return self.resize_actions
        }
      } else {
        return self.$grab("actions").$resize_actions()
      };
    }, $Utilities_resize_actions$2.$$arity = -1);
    
    Opal.def(self, '$viewer_actions', $Utilities_viewer_actions$4 = function $$viewer_actions() {
      var $$5, self = this;

      return $send(self.$grab("view"), 'resize', [], ($$5 = function(){var self = $$5.$$s || this, $a, $$6;

      return ($a = self.$grab("actions").$resize_actions()['$[]']("center"), ($a === nil || $a == null) ? nil : $send($a, 'each', [], ($$6 = function(atome){var self = $$6.$$s || this;

        
          
          if (atome == null) {
            atome = nil;
          };
          if ($truthy(atome.$x()['$[]']("center"))) {
            atome.$centering("x", atome.$x()['$[]']("center"), atome.$x()['$[]']("reference"), atome.$x()['$[]']("dynamic"))};
          if ($truthy(atome.$y()['$[]']("center"))) {
            return atome.$centering("y", atome.$y()['$[]']("center"), atome.$y()['$[]']("reference"), atome.$y()['$[]']("dynamic"))
          } else {
            return nil
          };}, $$6.$$s = self, $$6.$$arity = 1, $$6)))}, $$5.$$s = self, $$5.$$arity = 0, $$5))
    }, $Utilities_viewer_actions$4.$$arity = 0);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/system/renderer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$each', '$send', '$[]']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Renderer');

    var $nesting = [self].concat($parent_nesting), $Renderer_render_properties$1;

    
    Opal.def(self, '$render_properties', $Renderer_render_properties$1 = function $$render_properties(params) {
      var $$2, self = this;

      
      $send(params, 'each', [], ($$2 = function(atome_id, properties){var self = $$2.$$s || this, $$3;

      
        
        if (atome_id == null) {
          atome_id = nil;
        };
        
        if (properties == null) {
          properties = nil;
        };
        return $send(properties, 'each', [], ($$3 = function(property, value){var self = $$3.$$s || this;

        
          
          if (property == null) {
            property = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          return $$($nesting, 'RenderHtml').$send("" + "render_" + (property), atome_id, value['$[]']("value"));}, $$3.$$s = self, $$3.$$arity = 2, $$3));}, $$2.$$s = self, $$2.$$arity = 2, $$2));
      return params;
    }, $Renderer_render_properties$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/builder/object"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$include', '$[]', '$[]=', '$-', '$nil?', '$to_sym', '$object_id', '$reorder_properties', '$each_key', '$==', '$puts', '$method_analysis', '$keys', '$values', '$<<', '$class_variable_get', '$render_properties', '$class_variable_set']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Nucleon');

    var $nesting = [self].concat($parent_nesting), $Nucleon_initialize$1, $Nucleon_atomise$3, $Nucleon_atomes$4;

    
    self.$include($$($nesting, 'Utilities'));
    self.$include($$($nesting, 'Properties'));
    self.$include($$($nesting, 'VisualProcessor'));
    self.$include($$($nesting, 'SpatialProcessor'));
    self.$include($$($nesting, 'EventProcessor'));
    self.$include($$($nesting, 'HelperProcessor'));
    self.$include($$($nesting, 'AudioProcessor'));
    self.$include($$($nesting, 'GeometryProcessor'));
    self.$include($$($nesting, 'EffectProcessor'));
    self.$include($$($nesting, 'IdentityProcessor'));
    self.$include($$($nesting, 'MediaProcessor'));
    self.$include($$($nesting, 'HierarchyProcessor'));
    self.$include($$($nesting, 'CommunicationProcessor'));
    self.$include($$($nesting, 'UtilityProcessor'));
    self.$include($$($nesting, 'Renderer'));
    
    Opal.def(self, '$initialize', $Nucleon_initialize$1 = function $$initialize(params, refresh) {
      var $a, $$2, self = this, $writer = nil, atome_id = nil, id = nil, formatted_params = nil;

      
      
      if (params == null) {
        params = nil;
      };
      
      if (refresh == null) {
        refresh = true;
      };
      params = ($truthy($a = params) ? $a : $hash2(["type"], {"type": "particle"}));
      if ($truthy(params['$[]']("type"))) {
      } else {
        
        $writer = ["type", "particle"];
        $send(params, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      if ($truthy(params['$[]']("atome_id")['$nil?']())) {
        
        atome_id = (("" + "a_") + (self.$object_id())).$to_sym();
        
        $writer = ["atome_id", atome_id];
        $send(params, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;};
      if ($truthy(params['$[]']("id")['$nil?']())) {
        
        id = (function() {if ($truthy(params['$[]']("preset"))) {
          return ((("" + (params['$[]']("preset"))) + " ") + (self.$object_id())).$to_sym()
        } else {
          return ((("" + (params['$[]']("type"))) + " ") + (self.$object_id())).$to_sym()
        }; return nil; })();
        
        $writer = ["id", id];
        $send(params, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;};
      params = self.$reorder_properties(params);
      formatted_params = $hash2([], {});
      $send(params, 'each_key', [], ($$2 = function(property){var self = $$2.$$s || this, analysed_params = nil;

      
        
        if (property == null) {
          property = nil;
        };
        if (params['$[]']("type")['$[]']("value")['$==']("buffer")) {
          return self.$puts("treatment to come")
        } else {
          
          analysed_params = self.$method_analysis(property, params['$[]'](property), nil);
          
          $writer = [analysed_params.$keys()['$[]'](0), analysed_params.$values()['$[]'](0)];
          $send(formatted_params, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
      $$($nesting, 'Atome').$class_variable_get("@@atomes")['$<<'](self);
      if (params['$[]']("render")['$=='](false)) {
        return nil
      } else {
        return self.$render_properties($hash(formatted_params['$[]']("atome_id")['$[]']("value"), formatted_params))
      };
    }, $Nucleon_initialize$1.$$arity = -1);
    Opal.defs(self, '$atomise', $Nucleon_atomise$3 = function $$atomise() {
      var self = this;

      return $$($nesting, 'Atome').$class_variable_set("@@atomes", [])
    }, $Nucleon_atomise$3.$$arity = 0);
    return (Opal.defs(self, '$atomes', $Nucleon_atomes$4 = function $$atomes() {
      var self = this;

      return $$($nesting, 'Atome').$class_variable_get("@@atomes")
    }, $Nucleon_atomes$4.$$arity = 0), nil) && 'atomes';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/utilities/global"] = function(Opal) {
  var $get$1, $grab$3, $tactile$5, $lorem$6, $version$7, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send;

  Opal.add_stubs(['$each', '$atomes', '$==', '$[]', '$id', '$atome_id']);
  
  
  Opal.def(self, '$get', $get$1 = function $$get(id) {try {

    var $$2, self = this;

    
    $send($$($nesting, 'Atome').$atomes(), 'each', [], ($$2 = function(atome){var self = $$2.$$s || this;

    
      
      if (atome == null) {
        atome = nil;
      };
      if (atome.$id()['$[]']("value")['$=='](id)) {
        Opal.ret(atome)
      } else {
        return nil
      };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    return nil;
    } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
  }, $get$1.$$arity = 1);
  
  Opal.def(self, '$grab', $grab$3 = function $$grab(atome_id) {try {

    var $$4, self = this;

    
    $send($$($nesting, 'Atome').$atomes(), 'each', [], ($$4 = function(atome){var self = $$4.$$s || this;

    
      
      if (atome == null) {
        atome = nil;
      };
      if (atome.$atome_id()['$[]']("value")['$=='](atome_id)) {
        Opal.ret(atome)
      } else {
        return nil
      };}, $$4.$$s = self, $$4.$$arity = 1, $$4));
    return nil;
    } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
  }, $grab$3.$$arity = 1);
  
  Opal.def(self, '$tactile', $tactile$5 = function $$tactile() {
    var self = this;

    return false
  }, $tactile$5.$$arity = 0);
  
  Opal.def(self, '$lorem', $lorem$6 = function $$lorem() {
    var self = this;

    return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n"
  }, $lorem$6.$$arity = 0);
  return (Opal.def(self, '$version', $version$7 = function $$version() {
    var self = this;

    return "v:0.010"
  }, $version$7.$$arity = 0), nil) && 'version';
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/environment/initialize"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$presets', '$tactile', '$viewer_actions', '$merge', '$lorem', '$atomise']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Quark');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], null, $nesting);
  $$($nesting, 'Sparkle').$new();
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Nucleon'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Device');

    var $nesting = [self].concat($parent_nesting), $Device_initialize$1, $Device_presets$2;

    
    
    Opal.def(self, '$initialize', $Device_initialize$1 = function $$initialize() {
      var self = this, actions = nil;

      
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "content"], {"atome_id": "preset", "id": "preset", "content": self.$presets()}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "width", "height", "x", "xx", "y", "yy", "z", "overflow", "color"], {"atome_id": "dark_matter", "id": "dark_matter", "width": 0, "height": 0, "x": 0, "xx": 0, "y": 0, "yy": 0, "z": 0, "overflow": "hidden", "color": "transparent"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "language", "type", "width", "height", "x", "xx", "y", "yy", "z", "overflow", "color"], {"atome_id": "device", "id": "device", "language": "english", "type": "particle", "width": "100%", "height": "100%", "x": 0, "xx": 0, "y": 0, "yy": 0, "z": 1, "overflow": "hidden", "color": "transparent"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "type", "x", "xx", "y", "yy", "z", "overflow", "color"], {"atome_id": "intuition", "id": "intuition", "type": "particle", "x": 0, "xx": 0, "y": 0, "yy": 0, "z": 3, "overflow": "hidden", "color": "transparent"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "type", "x", "xx", "y", "yy", "z", "overflow", "parent", "color", "tactile"], {"atome_id": "view", "id": "view", "type": "particle", "x": 0, "xx": 0, "y": 0, "yy": 0, "z": 0, "overflow": "auto", "parent": "intuition", "color": "transparent", "tactile": self.$tactile()}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "type"], {"atome_id": "messenger", "id": "messenger", "type": "particle"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id"], {"atome_id": "right", "id": "right"}));
      $$($nesting, 'Atome').$new($hash2(["atome_id", "id", "render"], {"atome_id": "buffer", "id": "buffer", "render": false}));
      actions = $$($nesting, 'Atome').$new($hash2(["atome_id", "id"], {"atome_id": "actions", "id": "actions"}));
      return actions.$viewer_actions();
    }, $Device_initialize$1.$$arity = 0);
    return (Opal.def(self, '$presets', $Device_presets$2 = function $$presets() {
      var self = this, visual = nil, shape = nil, box = nil, circle = nil, text = nil, image = nil, video = nil, audio = nil, particle = nil, collector = nil, tool = nil, web = nil, user = nil, color = nil, history = nil, authorisation = nil, shadow = nil, border = nil, blur = nil;

      
      visual = $hash2(["color", "center", "z", "overflow", "parent"], {"color": "lightgray", "center": $hash2(["y", "x", "dynamic"], {"y": 43, "x": 16, "dynamic": false}), "z": 0, "overflow": "visible", "parent": "view"});
      shape = visual.$merge($hash2(["type", "width", "height", "content"], {"type": "shape", "width": 70, "height": 70, "content": $hash2(["points"], {"points": 2})}));
      box = visual.$merge(shape).$merge($hash2(["content"], {"content": $hash2(["points"], {"points": 4})}));
      circle = visual.$merge(shape).$merge($hash2(["color", "content"], {"color": "red", "content": $hash2(["points", "tension"], {"points": 4, "tension": "100%"})}));
      text = visual.$merge($hash2(["type", "color", "size", "content"], {"type": "text", "color": [$hash2(["red", "green", "blue"], {"red": 124, "green": 124, "blue": 124})], "size": 25, "content": self.$lorem()}));
      image = visual.$merge($hash2(["type", "color", "content"], {"type": "image", "color": "transparent", "content": "atome"}));
      video = visual.$merge($hash2(["type", "color", "content"], {"type": "video", "color": "transparent", "content": "atome"}));
      audio = visual.$merge($hash2(["type", "color", "content"], {"type": "audio", "color": "transparent", "content": "atome"}));
      particle = $hash2(["type"], {"type": "particle"});
      collector = $hash2(["type"], {"type": "collector"});
      tool = visual.$merge($hash2(["type", "width", "height", "parent", "content"], {"type": "tool", "width": 52, "height": 50, "parent": "intuition", "content": "dummy"}));
      web = visual.$merge($hash2(["type", "color", "content"], {"type": "web", "color": "transparent", "content": "atome"}));
      user = visual.$merge($hash2(["type", "color", "name", "pass", "content"], {"type": "user", "color": "transparent", "name": "anonymous", "pass": "none", "content": "anonymous"}));
      color = $hash2(["content"], {"content": "black"});
      history = $hash2([], {});
      authorisation = $hash2(["creator", "read", "write"], {"creator": "atome", "read": "all", "write": "all"});
      shadow = $hash2(["x", "y", "blur", "thickness", "color", "invert"], {"x": 0, "y": 0, "blur": 7, "thickness": 0, "color": [$hash2(["alpha"], {"alpha": 0.3})], "invert": false});
      border = $hash2(["thickness", "pattern", "color"], {"thickness": 1, "pattern": "solid", "color": "red"});
      blur = $hash2(["default"], {"default": 5});
      return $hash2(["value"], {"value": $hash2(["shape", "box", "circle", "text", "image", "video", "audio", "particle", "collector", "tool", "web", "user", "color", "history", "authorisation", "shadow", "border", "blur"], {"shape": shape, "box": box, "circle": circle, "text": text, "image": image, "video": video, "audio": audio, "particle": particle, "collector": collector, "tool": tool, "web": web, "user": user, "color": color, "history": history, "authorisation": authorisation, "shadow": shadow, "border": border, "blur": blur})});
    }, $Device_presets$2.$$arity = 0), nil) && 'presets';
  })($nesting[0], null, $nesting);
  $$($nesting, 'Atome').$atomise();
  return $$($nesting, 'Device').$new();
};

/* Generated by Opal 1.0.5 */
Opal.modules["atome/utilities/creation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 1.0.5 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("extensions/hash");
  self.$require("atome/fake_methods");
  self.$require("atome/builder/property");
  self.$require("atome/properties/audio");
  self.$require("atome/properties/communication");
  self.$require("atome/properties/effect");
  self.$require("atome/properties/event");
  self.$require("atome/properties/geometry");
  self.$require("atome/properties/helper");
  self.$require("atome/properties/hierarchy");
  self.$require("atome/properties/identity");
  self.$require("atome/properties/media");
  self.$require("atome/properties/spatial");
  self.$require("atome/properties/utility");
  self.$require("atome/properties/visual");
  self.$require("atome/system/utilities");
  self.$require("atome/system/renderer");
  self.$require("atome/builder/object");
  self.$require("atome/utilities/global");
  self.$require("atome/environment/initialize");
  return self.$require("atome/utilities/creation");
})(Opal);
