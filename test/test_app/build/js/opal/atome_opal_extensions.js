Opal.modules["extensions/geolocation"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars, $def = Opal.def;

  Opal.add_stubs('rescue,then,geolocate,navigator,[]=,latitude,coords,longitude,p');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    return $def(self, '$geolocation', function $$geolocation() {
      var self = this, localisation = nil;
      if ($gvars.window == null) $gvars.window = nil;

      
      localisation = $hash2(["latitude", "longitude"], {"latitude": nil, "longitude": nil});
      return $send($send($gvars.window.$navigator().$geolocate(), 'then', [], function $$1(pos){var $a;

        
        
        if (pos == null) pos = nil;;
        localisation['$[]=']("latitude", pos.$coords().$latitude());
        return ($a = ["longitude", pos.$coords().$longitude()], $send(localisation, '[]=', $a), $a[$a.length - 1]);}, 1), 'rescue', [], function $$2(err){var self = $$2.$$s == null ? this : $$2.$$s;

        
        
        if (err == null) err = nil;;
        self.$p(err);
        return (localisation = nil);}, {$$arity: 1, $$s: self});
    }, 0)
  })($nesting[0], null)
};

Opal.modules["extensions/ping"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('is_a?,instance_exec,address');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$ping', function $$ping(my_proc) {
      var self = this;

      
      
      if (my_proc == null) my_proc = false;;
      if ($truthy(my_proc['$is_a?']($$('Proc')))) {
        self.$instance_exec(my_proc)
      };
       var p = new Ping();
        p.ping('https://'+self.$address()+'', function (err, data) {
            if (err) {
               return false;
            } else {
 console.log("the site "+self.$address()+" is up!");
            }
        });
;
    }, -1)
  })($nesting[0], null, $nesting)
};

Opal.modules["extensions/sha"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def;

  Opal.add_stubs('==,downcase,hexdigest');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$calculate_sha', function $$calculate_sha(string) {
      
      if ($eqeq($$('RUBY_ENGINE').$downcase(), "opal")) {
        return sha256(string)
      } else {
        return $$$($$('Digest'), 'SHA256').$hexdigest(string)
      }
    }, 1)
  })($nesting[0], null, $nesting)
};

Opal.modules["extensions/color"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $def = Opal.def, $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide;

  Opal.add_stubs('rgb_html,/,[]');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Atome');

    
    
    
    $def(self, '$rgb_html', function $$rgb_html(string) {
      
      
  col = w3color(string);
  rgb_col=col.toRgb();
  return Opal.hash(rgb_col)
 
    }, 1);
    return $def(self, '$to_rgb', function $$to_rgb(string) {
      var self = this, rgb_color = nil;

      
      rgb_color = self.$rgb_html(string);
      return $hash2(["red", "green", "blue", "alpha"], {"red": $rb_divide(rgb_color['$[]']("r"), 255), "green": $rb_divide(rgb_color['$[]']("g"), 255), "blue": $rb_divide(rgb_color['$[]']("b"), 255), "alpha": 1});
    }, 1);
  })($nesting[0], null)
};

Opal.modules["properties/generator"] = Opal.return_val(Opal.nil); /* Generated by Opal 1.5.1 */

Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("extensions/geolocation");
  self.$require("extensions/ping");
  self.$require("extensions/sha");
  self.$require("extensions/color");
  return self.$require("properties/generator");
});
