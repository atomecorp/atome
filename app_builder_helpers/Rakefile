# frozen_string_literal: true

require 'opal'
require 'opal-jquery'
require 'opal-browser'
require 'parser'
require 'uglifier'

Opal.append_path 'app'

def build_opal_browser(user_project_path, production = false)
  browser_js = "#{user_project_path}/build/js/opal/opal_browser.js"
  browser_content = Opal::Builder.build('../lib/atome/renderers/opal/opal_browser.rb').to_s
  browser_content.gsub!("$$$('STDERR')['$write_proc='](typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)});", "$$$('STDERR')['$write_proc='](typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){});")
  browser_content = Uglifier.new.compile(browser_content) if production
  File.open(browser_js, 'w') do |f|
    f.puts browser_content
  end
end

def build_atome_kernel(user_project_path, gem_location, production = false)
  kernel_js = "#{user_project_path}/build/js/atome/kernel.js"
  builder = Opal::Builder.new
  builder.append_paths("#{gem_location}/../lib/")
  kernel_content = builder.build("#{gem_location}/../lib/atome.rb").to_s
  kernel_content = Uglifier.new.compile(kernel_content) if production
  File.open(kernel_js, 'w') do |f|
    f.puts kernel_content
  end
end

def build_opal_parser(user_project_path, production = false)
  parser_js = "#{user_project_path}/build/js/opal/opal_parser.js"
  parser_content = Opal::Builder.build('../lib/atome/renderers/opal/opal_parser.rb').to_s
  parser_content = Uglifier.new.compile(parser_content) if production
  File.open(parser_js, 'w') do |f|
    f.puts parser_content
  end
end


def build_user_code(user_project_path, source_code, production = false)
  application_js = "#{user_project_path}/build/js/application.js"
  builder = Opal::Builder.new
  builder.append_paths("#{user_project_path}/")
  application_content = builder.build(source_code).to_s
  application_content = Uglifier.new.compile(application_content) if production
  File.open(application_js, 'w') do |f|
    f.puts application_content
  end
end

task :build_user_code, :user_project_path, :production  do  |t, args|
  t
  user_project_path = args[:user_project_path]
  production = args[:production]
  if  production== 'production'
    production = true
  else
    production = false
  end
  source_code = "#{user_project_path}/index.rb"
  build_user_code(user_project_path, source_code, production)
end

task :system_builder , :user_project_path, :production  do  |t, args|
  t
  user_project_path = args[:user_project_path]
  production = args[:production]
  if  production== 'production'
    production = true
  else
    production = false
  end
  gem_location = File.join(File.dirname(__FILE__))
  source_code = '../vendor/assets/index.rb'
  build_atome_kernel(user_project_path, gem_location, production)
  build_opal_browser(user_project_path, production)
  build_opal_parser(user_project_path, production)
  build_user_code(user_project_path, source_code, production)
end


task :build do
  puts 'nothing for now'
end



task default: :build
